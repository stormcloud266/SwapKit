<%_ if (config.clientType === "sdk") { _%>
import { createSwapKit } from "@stormcloud266/sdk";

export type SwapKitClient = ReturnType<typeof createSwapKit>;
<%_ } else { _%>
import { SwapKit } from "@stormcloud266/core";
<%_ if (plugins.includes("evm")) { _%>
import { EVMPlugin } from "@stormcloud266/plugin-evm";
<%_ } _%>
<%_ if (plugins.includes("thorchain")) { _%>
import { MayachainPlugin, ThorchainPlugin } from "@stormcloud266/plugin-thorchain";
<%_ } _%>
<%_ if (plugins.includes("chainflip")) { _%>
import { ChainflipPlugin } from "@stormcloud266/plugin-chainflip";
<%_ } _%>
<%_ wallets.forEach(function(walletName) { _%>
import { <%= walletName === 'wc' ? 'walletconnect' : walletName.split('-')[0] %>Wallet } from "@stormcloud266/wallet-<%= walletName %>";
<%_ }); _%>

export type SwapKitClient = ReturnType<typeof SwapKit>;

const plugins = {
  <%_ if (plugins.includes("chainflip")) { _%>
  ...ChainflipPlugin,
  <%_ } _%>
  <%_ if (plugins.includes("evm")) { _%>
  ...EVMPlugin,
  <%_ } _%>
  <%_ if (plugins.includes("thorchain")) { _%>
  ...MayachainPlugin,
  ...ThorchainPlugin,
  <%_ } _%>
};

const wallets = {
<%_ wallets.forEach(function(walletName) { _%>
  ...<%= walletName === 'wc' ? 'walletconnect' : walletName.split("-")[0] %>Wallet,
<%_ }); _%>
};

<%_ } _%>

const clientCache = new Map<string, SwapKitClient>();

const swapKitParams = {
  ethplorerApiKey: <%- apiKey.ethplorerApiKey || "freekey" %>,
  covalentApiKey: <%- apiKey.covalentApiKey || undefined %>,
  blockchairApiKey: <%- apiKey.blockchairApiKey || undefined %>,
  walletConnectProjectId: <%- apiKey.walletConnectProjectId || undefined %>,
  stagenet: false,
};

export const getSwapKitClient = (
) => {
  const key = JSON.stringify(swapKitParams);
  if (clientCache.has(key)) return clientCache.get(key);

<%_ if (config.clientType === "sdk") { _%>
  const client = createSwapKit(swapKitParams);
<%_ } else { _%>
  const client = SwapKit({ ...swapKitParams, wallets, plugins });
<%_ } _%>

  clientCache.set(key, client);

  return client;
};

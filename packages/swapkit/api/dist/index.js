var be=Object.defineProperty;var D=(r,t)=>{for(var i in t)be(r,i,{get:t[i],enumerable:!0,configurable:!0,set:(n)=>t[i]=()=>n})};var F={};D(F,{getTNSChainAddress:()=>He,getTHORNamesByOwner:()=>pe,getTHORNamesByAddress:()=>Ie,getTHORNameDetails:()=>W,getTHORChainPools:()=>Le,getLiquidityPositionsRaw:()=>K,getLiquidityPositions:()=>fe});import{AssetValue as f,BaseDecimal as h,RequestClient as c,SwapKitNumber as Ne}from"@swapkit/helpers";function W(r){return c.get(`${T}/thorname/lookup/${r}`)}function pe(r){return c.get(`${T}/thorname/owner/${r}`)}function Ie(r){return c.get(`${T}/thorname/address/${r}`)}function Le(r){return c.get(`${T}/pools`,{searchParams:{period:r}})}function K(r){return c.get(`${T}/fullmember?address=${r.join(",")}`)}async function He({chain:r,tns:t}){return(await W(t))?.entries?.find((n)=>n.chain.toLowerCase()===r.toLowerCase())?.address}async function fe(r){return(await K(r)).map((i)=>({assetRegisteredAddress:i.assetAddress,asset:f.from({asset:i.pool,value:i.assetAdded,fromBaseDecimal:h.THOR}),assetPending:f.from({asset:i.pool,value:i.assetPending,fromBaseDecimal:h.THOR}),assetWithdrawn:f.from({asset:i.pool,value:i.assetWithdrawn,fromBaseDecimal:h.THOR}),runeRegisteredAddress:i.runeAddress,rune:f.from({asset:"THOR.RUNE",value:i.runeAdded,fromBaseDecimal:h.THOR}),runePending:f.from({asset:"THOR.RUNE",value:i.runePending,fromBaseDecimal:h.THOR}),runeWithdrawn:f.from({asset:"THOR.RUNE",value:i.runeWithdrawn,fromBaseDecimal:h.THOR}),poolShare:new Ne(i.sharedUnits).div(i.poolUnits),dateLastAdded:i.dateLastAdded,dateFirstAdded:i.dateFirstAdded}))}var T="https://mu.thorswap.net";import{AssetValue as A,BaseDecimal as u,Chain as N,RequestClient as M,SwapKitNumber as $}from"@swapkit/helpers";function j(r,t=!1){return M.get(`${t?w:X}/v2/borrower/${r}`)}function Q(r,t=!1){return M.get(`${t?w:X}/v2/saver/${r}`)}function J(r,t){return M.get(`${t?w:X}/v2/member/${r}`)}async function he(r,t=!1){return(await j(r,t)).pools.map((n)=>({collateral_deposited:A.from({asset:n.collateral_asset,value:n.collateral_deposited,fromBaseDecimal:u.THOR}),collateral_withdrawn:A.from({asset:n.collateral_asset,value:n.collateral_withdrawn,fromBaseDecimal:u.THOR}),debt_issued_tor:$.fromBigInt(BigInt(n.debt_issued_tor),u.THOR),debt_repaid_tor:$.fromBigInt(BigInt(n.debt_repaid_tor),u.THOR),last_open_loan_timestamp:n.last_open_loan_timestamp,last_repay_loan_timestamp:n.last_repay_loan_timestamp,target_assets:n.target_assets.map((S)=>A.from({asset:S}))}))}async function Pe(r,t=!1){return(await Q(r,t)).pools.map((n)=>({assetRegisteredAddress:n.assetAddress,assetAdded:A.from({asset:n.pool,value:n.assetAdded,fromBaseDecimal:u.THOR}),assetDeposit:A.from({asset:n.pool,value:n.assetDeposit,fromBaseDecimal:u.THOR}),assetRedeem:A.from({asset:n.pool,value:n.assetRedeem,fromBaseDecimal:u.THOR}),assetWithdrawn:A.from({asset:n.pool,value:n.assetWithdrawn,fromBaseDecimal:u.THOR}),dateLastAdded:n.dateLastAdded,dateFirstAdded:n.dateFirstAdded}))}async function Be(r,t=!1){return(await J(r,t)).pools.map((n)=>({assetRegisteredAddress:n.assetAddress,asset:A.from({asset:n.pool,value:n.assetAdded,fromBaseDecimal:u.THOR}),assetPending:A.from({asset:n.pool,value:n.assetPending,fromBaseDecimal:u.THOR}),assetWithdrawn:A.from({asset:n.pool,value:n.assetWithdrawn,fromBaseDecimal:u.THOR}),[`${t?"cacao":"rune"}RegisteredAddress`]:n.runeAddress,[`${t?"cacao":"rune"}`]:A.from({asset:"THOR.RUNE",value:n.runeAdded,fromBaseDecimal:u.THOR}),[`${t?"cacao":"rune"}Pending`]:A.from({asset:"THOR.RUNE",value:n.runePending,fromBaseDecimal:u.THOR}),[`${t?"cacao":"rune"}Withdrawn`]:A.from({asset:"THOR.RUNE",value:n.runeWithdrawn,fromBaseDecimal:u.THOR}),poolShare:new $(n.liquidityUnits).div(n.pool),dateLastAdded:n.dateLastAdded,dateFirstAdded:n.dateFirstAdded}))}var X="https://midgard.ninerealms.com",w="https://midgard.mayachain.info",Z=(r)=>({getBorrowerDetail:(t)=>he(t,r===N.Maya),getBorrowerDetailRaw:(t)=>j(t,r===N.Maya),getSaversDetail:(t)=>Pe(t,r===N.Maya),getSaverDetailRaw:(t)=>Q(t,r===N.Maya),getLiquidityPosition:(t)=>Be(t,r===N.Maya),getLiquidityPositionRaw:(t)=>J(t,r===N.Maya)}),z=Z(N.THORChain),O=Z(N.Maya);var x={};D(x,{getThorchainQueue:()=>De,getTNSPreferredAsset:()=>ve,getTHORNodeTNSDetails:()=>_,getRunePoolProviderInfo:()=>Ue,getRunePoolInfo:()=>Ve,getNodes:()=>ce,getMimirInfo:()=>Te,getLastBlock:()=>Se,getInboundAddresses:()=>Ge});import{AssetValue as Ce,RequestClient as p}from"@swapkit/helpers";function I({type:r="thorchain",stagenet:t=!1}={}){switch(r){case"mayachain":return t?"https://stagenet.mayanode.mayachain.info/mayachain":"https://mayanode.mayachain.info/mayachain";default:return t?"https://stagenet-thornode.ninerealms.com/thorchain":"https://thornode.thorswap.net/thorchain"}}function Se(r){return p.get(`${I(r)}/lastblock`)}function De(r){return p.get(`${I(r)}/queue`)}function ce(r){return p.get(`${I(r)}/nodes`)}function Te(r){return p.get(`${I(r)}/mimir`)}function Ge(r){return p.get(`${I(r)}/inbound_addresses`)}function _(r){return p.get(`${I(r)}/thorname/${r.name}`)}async function ve(r){const t=await _({name:r});if(!t.preferred_asset||t.preferred_asset===".")return;return Ce.from({asyncTokenLookup:!0,asset:t.preferred_asset})}function Ve(r){return p.get(`${I(r)}/runepool`)}function Ue(r){return p.get(`${I(r)}/rune_provider/${r.thorAddress}`)}var y={};D(y,{getTxnDetails:()=>qe,getTokenListProviders:()=>We,getSwapQuote:()=>we,getRepayQuote:()=>ye,getLoans:()=>ke,getLendingAssets:()=>Ye,getGasRates:()=>Ee,getCachedPrices:()=>Xe,getBorrowQuote:()=>xe,APIV1RequestClient:()=>G});import{RequestClient as P}from"@swapkit/helpers";import{z as L}from"zod";var Fe;((o)=>{o.SWAP_TC_TO_TC="SWAP:TC-TC";o.SWAP_ETH_TO_TC="SWAP:ERC20-TC";o.SWAP_TC_TO_ETH="SWAP:TC-ERC20";o.SWAP_ETH_TO_ETH="SWAP:ERC20-ERC20";o.SWAP_AVAX_TO_TC="SWAP:AVAX-TC";o.SWAP_TC_TO_AVAX="SWAP:TC-AVAX";o.SWAP_AVAX_TO_AVAX="SWAP:AVAX-AVAX";o.SWAP_ETH_TO_AVAX="SWAP:ETH-AVAX";o.SWAP_AVAX_TO_ETH="SWAP:AVAX-ETH";o.SWAP_TC_TO_GAIA="SWAP:TC-GAIA";o.SWAP_GAIA_TO_TC="SWAP:GAIA-TC";o.SWAP_TC_TO_BTC="SWAP:TC-BTC";o.SWAP_BTC_TO_TC="SWAP:BTC-TC";o.SWAP_TC_TO_BCH="SWAP:TC-BCH";o.SWAP_BCH_TO_TC="SWAP:BCH-TC";o.SWAP_TC_TO_LTC="SWAP:TC-LTC";o.SWAP_LTC_TO_TC="SWAP:LTC-TC";o.SWAP_TC_TO_DOGE="SWAP:TC-DOGE";o.SWAP_DOGE_TO_TC="SWAP:DOGE-TC";o.TC_STATUS="TC:STATUS";o.TC_TRANSFER="TC:TRANSFER";o.TC_DEPOSIT="TC:DEPOSIT";o.TC_SEND="TC:SEND";o.TC_SWITCH="TC:SWITCH";o.TC_LP_ADD="TC:ADDLIQUIDITY";o.TC_LP_WITHDRAW="TC:WITHDRAW";o.TC_TNS_CREATE="TC:TNS-CREATE";o.TC_TNS_EXTEND="TC:TNS-EXTEND";o.TC_TNS_UPDATE="TC:TNS-UPDATE";o.TC_SAVINGS_ADD="TC:ADDSAVINGS";o.TC_SAVINGS_WITHDRAW="TC:WITHDRAWSAVINGS";o.TC_LENDING_OPEN="TC:LENDINGOPEN";o.TC_LENDING_CLOSE="TC:LENDINGCLOSE";o.ETH_APPROVAL="ETH:APPROVAL";o.ETH_STATUS="ETH:STATUS";o.ETH_TRANSFER_TO_TC="ETH:TRANSFER:IN";o.ETH_TRANSFER_FROM_TC="ETH:TRANSFER:OUT";o.AVAX_APPROVAL="AVAX:APPROVAL";o.AVAX_STATUS="AVAX:STATUS";o.AVAX_TRANSFER_TO_TC="AVAX:TRANSFER:IN";o.AVAX_TRANSFER_FROM_TC="AVAX:TRANSFER:OUT";o.BSC_APPROVAL="BSC:APPROVAL";o.BSC_STATUS="BSC:STATUS";o.BSC_TRANSFER_TO_TC="BSC:TRANSFER:IN";o.BSC_TRANSFER_FROM_TC="BSC:TRANSFER:OUT";o.APPROVAL="APPROVAL";o.STATUS="STATUS";o.TRANSFER_TO_TC="TRANSFER:IN";o.TRANSFER_FROM_TC="TRANSFER:OUT";o.UNSUPPORTED="UNSUPPORTED";o.TC_LENDING="TC:LENDING"})(Fe||={});var $e;((l)=>{l.PENDING="pending";l.SUCCESS="success";l.CANCELLED="cancelled";l.REFUNDED="refunded";l.REPLACED="replaced";l.ERROR="error";l.UNKNOWN="unknown";l.NOT_STARTED="not_started";l.NOT_FOUND="not_found";l.RETRIES_EXCEEDED="retries_exceeded";l.STREAMING="streaming"})($e||={});var Me;((n)=>{n[n.NOT_STARTED=0]="NOT_STARTED";n[n.SUCCESS=1]="SUCCESS";n[n.REFUNDED=2]="REFUNDED"})(Me||={});var R;((s)=>{s.INVALID_INPUT_PARAMETERS="1000";s.UNKNOWN_PROVIDERS="1001";s.CANNOT_FIND_INBOUND_ADDRESS="1002";s.NO_INBOUND_ADDRESSES="1003";s.CHAIN_HALTED_OR_UNSUPPORTED="1004";s.MISSING_INPUT_PARAMETER="1005";s.INVALID_TYPE_GENERIC="1100";s.INVALID_NUMBER_STRING="1101";s.INVALID_NUMBER="1102";s.INVALID_BOOLEAN="1103";s.INVALID_OBJECT="1104";s.INVALID_ARRAY="1105";s.SELL_AMOUNT_MUST_BE_POSITIVE_INTEGER="2000";s.SELL_BUY_ASSETS_ARE_THE_SAME="2001";s.MISSING_SOURCE_ADDRESS_FOR_SYNTH="2002";s.AFF_ADDRESS_AND_BPS_OR_NEITHER="2003";s.AFF_ADDRESS_TOO_LONG="2004";s.AFF_BPS_INTEGER_MAX_500="2005";s.SOURCE_ADDRESS_INVALID_FOR_SELL_CHAIN="2006";s.DESTINATION_ADDRESS_INVALID_FOR_BUY_CHAIN="2007";s.PREFERRED_PROVIDER_NOT_SUPPORTED="2008";s.DESTINATION_ADDRESS_SMART_CONTRACT="2009";s.BUY_AMOUNT_MUST_BE_POSITIVE_INTEGER="2010";s.SOURCE_ADDRESS_SMART_CONTRACT="2011";s.SWAP_AMOUNT_TOO_LOW="2012";s.INVALID_PROVIDER="2100";s.MISSING_CROSS_CHAIN_PROVIDER="2101";s.MISSING_AVAX_PROVIDER="2102";s.MISSING_BSC_PROVIDER="2103";s.MISSING_ETH_PROVIDER="2104";s.INVALID_PROVIDER_FOR_SWAP_OUT="2105";s.MISSING_ARB_PROVIDER="2106";s.INVALID_CHAIN="2200";s.INVALID_ASSET="2201";s.INVALID_ASSET_IDENTIFIER="2202";s.UNSUPPORTED_CHAIN="2204";s.UNSUPPORTED_ASSET="2203";s.UNSUPPORTED_ASSET_FOR_SWAPOUT="2205";s.INVALID_SOURCE_ADDRESS="2300";s.INVALID_DESTINATION_ADDRESS="2301";s.THORNODE_QUOTE_GENERIC_ERROR="3000";s.NOT_ENOUGH_SYNTH_BALANCE="3001";s.SYNTH_MINTING_CAP_REACHED="3002";s.INVALID_QUOTE_MODE="4000";s.NO_QUOTES="4001";s.SERVICE_UNAVAILABLE_GENERIC="5000";s.MISSING_GAS_DATA_GENERIC="5100";s.MISSING_TOKEN_INFO_GENERIC="5200";s.CANT_FIND_TOKEN_LIST="5201";s.NO_PRICE="5202";s.PRICE_IS_STALE="5203";s.ADDRESS_NOT_WHITELISTED="6000";s.ADDRESS_ALREADY_CLAIMED="6001";s.TEMPORARY_ERROR="9999"})(R||={});var ee;((d)=>{d.HEALTH_CONTROLLER="1000";d.LIQUIDITY_CONTROLLER="1001";d.PROVIDER_CONTROLLER="1002";d.QUOTE_CONTROLLER="1003";d.SWAP_CONTROLLER="1004";d.UTIL_CONTROLLER="1005";d.AIRDROP_CONTROLLER="1006";d.PROVIDER="2000";d.ASSET="2001";d.TOKEN_LIST="2002";d.QUOTE="2100";d.QUOTE_TXN_DETAILS="2101";d.THORCHAIN_PROVIDER="3000";d.UNISWAPV2_ETH_PROVIDER="3001";d.UNISWAPV3_ETH_PROVIDER="3002";d.SUSHISWAP_ETH_PROVIDER="3003";d.PANCAKESWAP_BSC_PROVIDER="3004";d.PANCAKESWAP_ETH_PROVIDER="3005";d.ONEINCH_ETH_PROVIDER="3006";d.ONEINCH_BSC_PROVIDER="3007";d.ONEINCH_AVAX_PROVIDER="3008";d.ZEROX_ETH_PROVIDER="3009";d.WOOFI_AVAX_PROVIDER="3010";d.PANGOLIN_AVAX_PROVIDER="3011";d.TRADERJOE_AVAX_PROVIDER="3012";d.KYBER_ETH_PROVIDER="3013";d.KYBER_AVAX_PROVIDER="3014";d.WOOFI_BSC_PROVIDER="3015";d.STARGATE_PROVIDER="3016";d.PROVIDER_UTIL="4000";d.TXN_DETAILS="5000";d.AIRDROP_UTIL="6000"})(ee||={});var re;((g)=>{g.VALIDATION_ERROR="VALIDATION_ERROR";g.REQUEST_PARAMETER_ERROR="REQUEST_PARAMETER_ERROR";g.RESPONSE_PARSING_ERROR="RESPONSE_PARSING_ERROR";g.UNSUPPORTED="UNSUPPORTED";g.NOT_IMPLEMENTED="NOT_IMPLEMENTED";g.INCOMPATIBLE_ASSETS_OPERATIONS="INCOMPATIBLE_ASSETS_OPERATIONS";g.SERVICE_UNAVAILABLE="SERVICE_UNAVAILABLE";g.DOWN_FOR_MAINTENANCE="DOWN_FOR_MAINTENANCE";g.MISSING_INBOUND_INFO="MISSING_INBOUND_INFO";g.QUOTE_FETCHING_ERROR="QUOTE_FETCHING_ERROR";g.AIRDROP_ERROR="AIRDROP_ERROR";g.UNHANDLED_ERROR="UNHANDLED_ERROR"})(re||={});var te=L.object({status:L.number(),type:L.nativeEnum(re),code:L.nativeEnum(R),module:L.nativeEnum(ee),complete:L.string(),identifier:L.string(),message:L.string()});function Xe({tokens:r,...t}){const i=new URLSearchParams,n=r.filter((S,H,ge)=>ge.findIndex((le)=>le===S)===H);for(let S of n)i.append("tokens",JSON.stringify(S));if(t.metadata)i.append("metadata","true");if(t.lookup)i.append("lookup","true");if(t.sparkline)i.append("sparkline","true");return G.post(`${b}/tokenlist/cached-price`,{body:i.toString(),headers:{"Content-Type":"application/x-www-form-urlencoded"}})}function we(r){return G.get(`${b}/aggregator/tokens/quote`,{searchParams:r})}function xe(r){return G.get(`${b}/aggregator/lending/borrow`,{searchParams:r})}function ye(r){return G.get(`${b}/aggregator/lending/repay`,{searchParams:r})}function Ye(){return P.get(`${b}/aggregator/lending/assets`)}function ke(r){return P.get(`${b}/aggregator/lending/loans`,{searchParams:r})}function Ee(){return P.get(`${b}/resource-worker/gasPrice/getAll`)}function qe(r){return P.get(`${b}/apiusage/v2/txn`,{searchParams:{txHash:r}})}function We(){return P.get(`${b}/tokenlist/providers`)}var b="https://api.thorswap.finance",G=P.extend({responseHandler:(r)=>{try{return te.parse(r)}catch(t){return r}}});var k={};D(k,{getTrackerDetails:()=>ur,getTokenListV2:()=>gr,getTokenListProvidersV2:()=>Y,getSwapQuoteV2:()=>Ar,getPrice:()=>lr});import{RequestClient as v,SwapKitError as ue}from"@swapkit/helpers";import{Chain as Ke,ChainId as je,FeeTypeEnum as Qe,ProviderName as C,WarningCodeEnum as Je}from"@swapkit/helpers";import{z as e}from"zod";var ne;((a)=>{a.native_send="native_send";a.token_transfer="token_transfer";a.native_contract_call="native_contract_call";a.token_contract_call="token_contract_call";a.approve="approve";a.deposit="deposit";a.thorname_action="thorname_action";a.lp_action="lp_action";a.swap="swap";a.streaming_swap="streaming_swap";a.stake="stake";a.claim="claim";a.lending="lending";a.unknown="unknown"})(ne||={});var se;((H)=>{H.unknown="unknown";H.not_started="not_started";H.pending="pending";H.swappping="swapping";H.completed="completed"})(se||={});var oe;((m)=>{m.not_started="not_started";m.starting="starting";m.broadcasted="broadcasted";m.mempool="mempool";m.inbound="inbound";m.outbound="outbound";m.swapping="swapping";m.completed="completed";m.refunded="refunded";m.partially_refunded="partially_refunded";m.dropped="dropped";m.reverted="reverted";m.replaced="replaced";m.retries_exceeded="retries_exceeded";m.parsing_error="parsing_error"})(oe||={});var Ur=e.object({error:e.string(),message:e.string()}),B=e.object({chain:e.nativeEnum(Ke),symbol:e.string(),ticker:e.string(),decimal:e.optional(e.number()),address:e.optional(e.string()),isGasAsset:e.boolean(),isSynthetic:e.boolean(),tax:e.optional(e.object({buy:e.number(),sell:e.number()}))}),Ze=e.object({name:e.string(),id:e.string(),market_cap:e.number(),total_volume:e.number(),price_change_24h_usd:e.number(),price_change_percentage_24h_usd:e.number(),timestamp:e.number()}),ie=e.array(e.object({identifier:e.string(),provider:e.string(),cg:Ze.optional(),price_usd:e.number(),timestamp:e.number()}).partial()),Fr=e.object({sellAsset:e.string({description:"Asset to sell"}),buyAsset:e.string({description:"Asset to buy"}),sellAmount:e.string({description:"Amount of asset to sell"}).refine((r)=>+r>0,{message:"sellAmount must be greater than 0",path:["sellAmount"]}),providers:e.optional(e.array(e.string({description:"List of providers to use"}).refine((r)=>{return C[r]!==void 0},{message:"Invalid provider",path:["providers"]}))),sourceAddress:e.optional(e.string({description:"Address to send asset from"})),destinationAddress:e.optional(e.string({description:"Address to send asset to"})),slippage:e.optional(e.number({description:"Slippage tolerance as a percentage. Default is 3%."})),affiliate:e.optional(e.string({description:"Affiliate thorname"})),affiliateFee:e.optional(e.number({description:"Affiliate fee in basis points"}).refine((r)=>{return r===Math.floor(r)&&r>=0},{message:"affiliateFee must be a positive integer",path:["affiliateFee"]})),allowSmartContractSender:e.optional(e.boolean({description:"Allow smart contract as sender"})),allowSmartContractReceiver:e.optional(e.boolean({description:"Allow smart contract as recipient"})),disableSecurityChecks:e.optional(e.boolean({description:"Disable security checks"})),includeTx:e.optional(e.boolean({description:"Set to true to include an transaction object (EVM only)"}))}).refine((r)=>r.sellAsset!==r.buyAsset,{message:"Must be different",path:["sellAsset","buyAsset"]}),$r=e.object({tokens:e.array(e.object({identifier:e.string()})),metadata:e.boolean()}),ze=e.object({evmCalldata:e.optional(e.string()),logs:e.optional(e.unknown()),memo:e.optional(e.string()),spender:e.optional(e.string())}),Oe=e.object({estimatedfinalisedAt:e.number(),estimatedTimeToComplete:e.number(),updatedAt:e.number(),currentLegIndex:e.optional(e.number()),providerDetails:e.optional(e.unknown())}),_e=e.object({network:e.optional(B),affiliate:e.optional(B),liquidity:e.optional(B),protocol:e.optional(B),tax:e.optional(B)}),Re=e.object({broadcastedAt:e.optional(e.number()),wallet:e.optional(e.string()),quoteId:e.optional(e.string()),explorerUrl:e.optional(e.string()),affiliate:e.optional(e.string()),fees:e.optional(_e),provider:e.optional(e.nativeEnum(C)),images:e.optional(e.object({from:e.optional(e.string()),to:e.optional(e.string()),provider:e.optional(e.string()),chain:e.optional(e.string())}))}),U=e.object({chainId:e.nativeEnum(je),hash:e.string(),block:e.number(),type:e.nativeEnum(ne),status:e.nativeEnum(se),trackingStatus:e.optional(e.nativeEnum(oe)),fromAsset:e.string(),fromAmount:e.string(),fromAddress:e.string(),toAsset:e.string(),toAmount:e.string(),toAddress:e.string(),finalAsset:e.optional(B),finalAddress:e.optional(e.string()),finalisedAt:e.number(),transient:e.optional(Oe),meta:e.optional(Re),payload:e.optional(ze)}),Mr=U.extend({legs:e.array(U)}),Xr=U.extend({legs:e.array(U)}),de=e.array(e.object({type:e.nativeEnum(Qe),amount:e.string(),asset:e.string(),chain:e.string(),protocol:e.nativeEnum(C)})),me=e.object({inbound:e.optional(e.number({description:"Time to receive inbound asset in seconds"})),swap:e.optional(e.number({description:"Time to swap assets in seconds"})),outbound:e.optional(e.number({description:"Time to receive outbound asset in seconds"})),total:e.number({description:"Total time in seconds"})}),er=e.object({to:e.string({description:"Address of the recipient"}),from:e.string({description:"Address of the sender"}),value:e.string({description:"Value to send"}),data:e.string({description:"Data to send"})}),rr=e.array(e.union([e.string(),e.number(),e.array(e.string()),e.object({from:e.string(),value:e.string()}).describe("Parameters to pass to the contract method")])),wr=e.object({contractAddress:e.string({description:"Address of the contract to interact with"}),contractMethod:e.string({description:"Name of the method to call"}),contractParams:rr,contractParamNames:e.array(e.string({description:"Names of the parameters to pass to the contract method"})),approvalToken:e.optional(e.string({description:"Address of the token to approve spending of"})),approvalSpender:e.optional(e.string({description:"Address of the spender to approve"}))}),tr=e.object({sellAsset:e.string({description:"Asset to sell"}),buyAsset:e.string({description:"Asset to buy"}),provider:e.nativeEnum(C),sourceAddress:e.string({description:"Source address"}),destinationAddress:e.string({description:"Destination address"}),estimatedTime:me.optional(),affiliate:e.string({description:"Affiliate address"}).optional(),affiliateFee:e.number({description:"Affiliate fee"}).optional(),slipPercentage:e.number({description:"Slippage as a percentage"})}),xr=tr.omit({sourceAddress:!0,destinationAddress:!0,slipPercentage:!0}),nr=e.object({asset:e.string({description:"Asset name"}),price:e.number({description:"Price in USD"}),image:e.string({description:"Asset image"})}),sr=e.object({priceImpact:e.optional(e.number({description:"Price impact"})),assets:e.optional(e.array(nr)),approvalAddress:e.optional(e.string({description:"Approval address for swap"}))}),or=e.array(e.object({code:e.nativeEnum(Je),display:e.string(),tooltip:e.string().optional()})),ir=e.object({provider:e.nativeEnum(C),sellAsset:e.string({description:"Asset to sell"}),sellAmount:e.string({description:"Sell amount"}),buyAsset:e.string({description:"Asset to buy"}),buyAmount:e.string({description:"Buy amount"}),buyAmountMaxSlippage:e.string({description:"Buy amount max slippage"}),fees:e.optional(de)}),dr=e.object({providers:e.array(e.nativeEnum(C)),sellAsset:e.string({description:"Asset to sell"}),sellAmount:e.string({description:"Sell amount"}),buyAsset:e.string({description:"Asset to buy"}),expectedBuyAmount:e.string({description:"Expected Buy amount"}),expectedBuyAmountMaxSlippage:e.string({description:"Expected Buy amount max slippage"}),sourceAddress:e.string({description:"Source address"}),destinationAddress:e.string({description:"Destination address"}),targetAddress:e.optional(e.string({description:"Target address"})),inboundAddress:e.optional(e.string({description:"Inbound address"})),expiration:e.optional(e.string({description:"Expiration"})),memo:e.optional(e.string({description:"Memo"})),fees:de,tx:e.optional(er),transaction:e.optional(e.unknown()),estimatedTime:e.optional(me),totalSlippageBps:e.number({description:"Total slippage in bps"}),legs:e.array(ir),warnings:or,meta:sr}),ae=e.object({quoteId:e.string({description:"Quote ID"}),routes:e.array(dr),error:e.optional(e.string({description:"Error message"}))});function V(r){return r?ar:mr}function ur(r){return v.post(`${V()}/track`,{json:r})}async function Ar(r,t){const i=await v.post(`${V(t)}/quote`,{json:r});if(i.error)throw new ue("api_v2_server_error",{message:i.error});try{return ae.parse(i)}catch(n){return console.warn(n),i}}function Y(){return v.get(`${V()}/providers`)}function gr(r){return v.get(`${V()}/tokens?provider=${r}`)}async function lr(r,t=!1){const i=await v.post(`${V(t)}/price`,{json:r});try{return ie.parse(i)}catch(n){throw new ue("api_v2_invalid_response",n)}}var mr="https://api.swapkit.dev",ar="https://dev-api.swapkit.dev";var q={};D(q,{getTokenList:()=>Ir,getProviderLogo:()=>fr,getLogoForAsset:()=>Lr,getChainLogoForAsset:()=>Hr});import{AssetValue as br,RequestClient as Nr,getChainIdentifier as pr}from"@swapkit/helpers";function Ir(r){return Nr.get(`${E}/token-list/${r}.json`)}function Lr(r){return`${E}/token-list/images/${r.toLowerCase()}.png`}function Hr(r){const{chain:t}=br.from({asset:r}),i=pr(t).toLowerCase();return`${E}/token-list/images/${i}.png`}async function fr(r){return Ae||=await Y(),Ae.find((t)=>t.name===r)?.url}var E="https://static.thorswap.net",Ae;var Kr={...F,...x,...y,...k,...q,thorchainMidgard:z,mayachainMidgard:O};export{ne as TxnType,se as TxnStatus,$e as TxStatus,Fe as TransactionType,Mr as TransactionSchema,Xr as TransactionDTOSchema,oe as TrackingStatus,Ze as TokenDetailsMetadataSchema,Kr as SwapKitApi,Me as StreamingSwapProgressStatus,or as RouteQuoteWarningSchema,sr as RouteQuoteMetadataSchema,nr as RouteQuoteMetadataAssetSchema,xr as RouteLegWithoutAddressesSchema,tr as RouteLegSchema,ae as QuoteResponseSchema,Fr as QuoteRequestSchema,ie as PriceResponseSchema,$r as PriceRequestSchema,de as FeesSchema,me as EstimatedTimeSchema,er as EVMTransactionSchema,wr as EVMTransactionDetailsSchema,rr as EVMTransactionDetailsParamsSchema,re as ERROR_TYPE,ee as ERROR_MODULE,R as ERROR_CODE,B as AssetValueSchema,Ur as ApiV2ErrorSchema,te as ApiV1ErrorSchema};

//# debugId=9185AF3CB55F71F064756E2164756E21

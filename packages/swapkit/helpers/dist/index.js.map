{
  "version": 3,
  "sources": ["../src/index.ts", "../src/types/network.ts", "../src/types/chains.ts", "../src/types/commonTypes.ts", "../src/types/derivationPath.ts", "../src/types/wallet.ts", "../src/types/sdk.ts", "../src/types/quotes.ts", "../src/modules/assetValue.ts", "../src/modules/swapKitError.ts", "../src/helpers/others.ts", "../src/helpers/validators.ts", "../src/modules/bigIntArithmetics.ts", "../src/modules/requestClient.ts", "../src/helpers/asset.ts", "../src/helpers/derivationPath.ts", "../src/helpers/liquidity.ts", "../src/helpers/memo.ts", "../src/helpers/web3wallets.ts", "../src/modules/swapKitNumber.ts"],
  "sourcesContent": [
    "export * from \"@swapkit/contracts\";\nexport * from \"./types/index.ts\";\n\n/**\n * Helpers\n */\nexport * from \"./helpers/asset.ts\";\nexport * from \"./helpers/derivationPath.ts\";\nexport * from \"./helpers/liquidity.ts\";\nexport * from \"./helpers/memo.ts\";\nexport * from \"./helpers/others.ts\";\nexport * from \"./helpers/validators.ts\";\nexport * from \"./helpers/web3wallets.ts\";\n\n/**\n * Modules\n */\nexport * from \"./modules/assetValue.ts\";\nexport * from \"./modules/bigIntArithmetics.ts\";\nexport * from \"./modules/requestClient.ts\";\nexport * from \"./modules/swapKitError.ts\";\nexport * from \"./modules/swapKitNumber.ts\";\n",
    "export enum RPCUrl {\n  Arbitrum = \"https://arb1.arbitrum.io/rpc\",\n  Avalanche = \"https://node-router.thorswap.net/avalanche-c\",\n  BinanceSmartChain = \"https://bsc-dataseed.binance.org\",\n  Bitcoin = \"https://node-router.thorswap.net/bitcoin\",\n  BitcoinCash = \"https://node-router.thorswap.net/bitcoin-cash\",\n  Chainflip = \"wss://mainnet-archive.chainflip.io\",\n  Cosmos = \"https://node-router.thorswap.net/cosmos/rpc\",\n  Dash = \"https://node-router.thorswap.net/dash\",\n  Dogecoin = \"https://node-router.thorswap.net/dogecoin\",\n  Ethereum = \"https://node-router.thorswap.net/ethereum\",\n  Kujira = \"https://rpc-kujira.synergynodes.com/\",\n  Litecoin = \"https://node-router.thorswap.net/litecoin\",\n  Maya = \"https://tendermint.mayachain.info\",\n  MayaStagenet = \"https://stagenet.tendermint.mayachain.info\",\n  Optimism = \"https://mainnet.optimism.io\",\n  Polkadot = \"wss://rpc.polkadot.io\",\n  Polygon = \"https://polygon-rpc.com\",\n  Radix = \"https://radix-mainnet.rpc.grove.city/v1/326002fc/core\",\n  Sepolia = \"https://native-amm.vercel.app/rpc/sepolia\",\n  THORChain = \"https://rpc.thorswap.net\",\n  THORChainStagenet = \"https://stagenet-rpc.ninerealms.com\",\n  Solana = \"https://mainnet.helius-rpc.com/?api-key=2cbe3ae6-cfc5-4141-a093-0055d0fa3d80\",\n}\n\nexport enum ExplorerUrl {\n  Arbitrum = \"https://arbiscan.io\",\n  Avalanche = \"https://snowtrace.io\",\n  BinanceSmartChain = \"https://bscscan.com\",\n  Bitcoin = \"https://blockchair.com/bitcoin\",\n  BitcoinCash = \"https://www.blockchair.com/bitcoin-cash\",\n  Chainflip = \"https://explorer.polkascan.io/polkadot\",\n  Cosmos = \"https://www.mintscan.io/cosmos\",\n  Dash = \"https://blockchair.com/dash\",\n  Dogecoin = \"https://blockchair.com/dogecoin\",\n  Ethereum = \"https://etherscan.io\",\n  Kujira = \"https://finder.kujira.network/kaiyo-1\",\n  Litecoin = \"https://blockchair.com/litecoin\",\n  Maya = \"https://www.mayascan.org\",\n  Optimism = \"https://optimistic.etherscan.io\",\n  Polkadot = \"https://polkadot.subscan.io\",\n  Polygon = \"https://polygonscan.com\",\n  Radix = \"https://dashboard.radixdlt.com\",\n  Sepolia = \"https://sepolia.etherscan.io\",\n  THORChain = \"https://runescan.io\",\n  Solana = \"https://solscan.io\",\n}\n",
    "import { ExplorerUrl, RPCUrl } from \"./network\";\n\nexport enum Chain {\n  Arbitrum = \"ARB\",\n  Avalanche = \"AVAX\",\n  BinanceSmartChain = \"BSC\",\n  Bitcoin = \"BTC\",\n  BitcoinCash = \"BCH\",\n  Cosmos = \"GAIA\",\n  Dash = \"DASH\",\n  Dogecoin = \"DOGE\",\n  Ethereum = \"ETH\",\n  Kujira = \"KUJI\",\n  Litecoin = \"LTC\",\n  Maya = \"MAYA\",\n  Optimism = \"OP\",\n  Polkadot = \"DOT\",\n  Chainflip = \"FLIP\",\n  Polygon = \"MATIC\",\n  Radix = \"XRD\",\n  Sepolia = \"SEP\",\n  THORChain = \"THOR\",\n  Solana = \"SOL\",\n}\n\nexport type WalletChain = Exclude<Chain, Chain.Chainflip | Chain.Radix>;\n\nexport enum ChainId {\n  Arbitrum = \"42161\",\n  ArbitrumHex = \"0xa4b1\",\n  Avalanche = \"43114\",\n  AvalancheHex = \"0xa86a\",\n  BinanceSmartChain = \"56\",\n  BinanceSmartChainHex = \"0x38\",\n  Bitcoin = \"bitcoin\",\n  BitcoinCash = \"bitcoincash\",\n  Chainflip = \"chainflip\",\n  Cosmos = \"cosmoshub-4\",\n  Dash = \"dash\",\n  Dogecoin = \"dogecoin\",\n  Kujira = \"kaiyo-1\",\n  Ethereum = \"1\",\n  EthereumHex = \"0x1\",\n  Litecoin = \"litecoin\",\n  Maya = \"mayachain-mainnet-v1\",\n  MayaStagenet = \"mayachain-stagenet-v1\",\n  Optimism = \"10\",\n  OptimismHex = \"0xa\",\n  Polkadot = \"polkadot\",\n  Polygon = \"137\",\n  PolygonHex = \"0x89\",\n  Radix = \"radix-mainnet\",\n  Sepolia = \"11155111\",\n  SepoliaHex = \"0xaa36a7\",\n  THORChain = \"thorchain-mainnet-v1\",\n  THORChainStagenet = \"thorchain-stagenet-v2\",\n  Solana = \"solana\",\n}\n\nexport const ChainIdToChain: Record<ChainId, Chain> = {\n  [ChainId.ArbitrumHex]: Chain.Arbitrum,\n  [ChainId.Arbitrum]: Chain.Arbitrum,\n  [ChainId.AvalancheHex]: Chain.Avalanche,\n  [ChainId.Avalanche]: Chain.Avalanche,\n  [ChainId.BinanceSmartChainHex]: Chain.BinanceSmartChain,\n  [ChainId.BinanceSmartChain]: Chain.BinanceSmartChain,\n  [ChainId.BitcoinCash]: Chain.BitcoinCash,\n  [ChainId.Bitcoin]: Chain.Bitcoin,\n  [ChainId.Chainflip]: Chain.Chainflip,\n  [ChainId.Cosmos]: Chain.Cosmos,\n  [ChainId.Dash]: Chain.Dash,\n  [ChainId.Dogecoin]: Chain.Dogecoin,\n  [ChainId.EthereumHex]: Chain.Ethereum,\n  [ChainId.Kujira]: Chain.Kujira,\n  [ChainId.Ethereum]: Chain.Ethereum,\n  [ChainId.Litecoin]: Chain.Litecoin,\n  [ChainId.MayaStagenet]: Chain.Maya,\n  [ChainId.Maya]: Chain.Maya,\n  [ChainId.OptimismHex]: Chain.Optimism,\n  [ChainId.Optimism]: Chain.Optimism,\n  [ChainId.Polkadot]: Chain.Polkadot,\n  [ChainId.PolygonHex]: Chain.Polygon,\n  [ChainId.Polygon]: Chain.Polygon,\n  [ChainId.Radix]: Chain.Radix,\n  [ChainId.Sepolia]: Chain.Sepolia,\n  [ChainId.SepoliaHex]: Chain.Sepolia,\n  [ChainId.THORChainStagenet]: Chain.THORChain,\n  [ChainId.THORChain]: Chain.THORChain,\n  [ChainId.Solana]: Chain.Solana,\n};\n\ntype ChainNameType = keyof typeof Chain;\nconst chainNames = Object.keys(Chain) as ChainNameType[];\nconst chains = Object.values(Chain) as Chain[];\n\nexport enum BaseDecimal {\n  ARB = 18,\n  AVAX = 18,\n  BCH = 8,\n  BSC = 18,\n  BTC = 8,\n  DASH = 8,\n  DOGE = 8,\n  DOT = 10,\n  ETH = 18,\n  FLIP = 18,\n  GAIA = 6,\n  KUJI = 6,\n  LTC = 8,\n  MATIC = 18,\n  MAYA = 8,\n  OP = 18,\n  SEP = 18,\n  SOL = 9,\n  THOR = 8,\n  XRD = 18,\n  ZEC = 8,\n}\n\nexport type SubstrateChain = Chain.Polkadot | Chain.Chainflip;\nexport const SubstrateChains = [Chain.Polkadot, Chain.Chainflip];\n\nexport type EVMChain =\n  | Chain.Ethereum\n  | Chain.Avalanche\n  | Chain.BinanceSmartChain\n  | Chain.Arbitrum\n  | Chain.Optimism\n  | Chain.Polygon\n  | Chain.Sepolia;\nexport const EVMChains = [\n  Chain.Ethereum,\n  Chain.Avalanche,\n  Chain.BinanceSmartChain,\n  Chain.Arbitrum,\n  Chain.Optimism,\n  Chain.Polygon,\n  Chain.Sepolia,\n] as const;\n\nexport type UTXOChain =\n  | Chain.Bitcoin\n  | Chain.BitcoinCash\n  | Chain.Dash\n  | Chain.Dogecoin\n  | Chain.Litecoin;\nexport const UTXOChains = [\n  Chain.Bitcoin,\n  Chain.BitcoinCash,\n  Chain.Dash,\n  Chain.Dogecoin,\n  Chain.Litecoin,\n] as const;\n\nexport type CosmosChain = Chain.Cosmos | Chain.THORChain | Chain.Maya | Chain.Kujira;\nexport const CosmosChains = [Chain.Cosmos, Chain.THORChain, Chain.Maya, Chain.Kujira] as const;\n\nexport const TCSupportedChains = [\n  Chain.Avalanche,\n  Chain.BinanceSmartChain,\n  Chain.Bitcoin,\n  Chain.BitcoinCash,\n  Chain.Cosmos,\n  Chain.Dogecoin,\n  Chain.Ethereum,\n  Chain.Litecoin,\n  Chain.THORChain,\n] as const;\n\nexport const MAYASupportedChains = [\n  Chain.Arbitrum,\n  Chain.Dash,\n  Chain.Ethereum,\n  Chain.Kujira,\n  Chain.Maya,\n  Chain.THORChain,\n] as const;\n\nconst ChainToChainName = chains.reduce(\n  (acc, chain) => {\n    const chainName = chainNames.find((key) => Chain[key as ChainNameType] === chain);\n\n    if (chainName) acc[chain] = chainName;\n\n    return acc;\n  },\n  {} as { [key in Chain]: ChainNameType },\n);\n\nexport const ChainToChainId = chains.reduce(\n  (acc, chain) => {\n    acc[chain] = ChainId[ChainToChainName[chain]];\n    return acc;\n  },\n  {} as { [key in Chain]: ChainId },\n);\n\nexport const ChainToRPC = chains.reduce(\n  (acc, chain) => {\n    acc[chain] = RPCUrl[ChainToChainName[chain]];\n    return acc;\n  },\n  {} as { [key in Chain]: RPCUrl },\n);\n\nexport const ChainToHexChainId = chains.reduce(\n  (acc, chain) => {\n    const chainString = `${ChainToChainName[chain]}Hex` as keyof typeof ChainId;\n\n    acc[chain] = ChainId[chainString];\n    return acc;\n  },\n  {} as { [key in Chain]: ChainId },\n);\n\nexport const ChainToExplorerUrl = chains.reduce(\n  (acc, chain) => {\n    acc[chain] = ExplorerUrl[ChainToChainName[chain]];\n    return acc;\n  },\n  {} as { [key in Chain]: string },\n);\n",
    "import type { Chain } from \"./chains.ts\";\nimport type { ChainApis } from \"./sdk.ts\";\nimport type { ChainWallet } from \"./wallet.ts\";\n\nexport type ConnectConfig = {\n  stagenet?: boolean;\n  /**\n   * @required\n   */\n  thorswapApiKey?: string;\n  /**\n   * @required for AVAX & BSC\n   */\n  covalentApiKey?: string;\n  /**\n   * @required for ETH\n   */\n  ethplorerApiKey?: string;\n  /**\n   * @required for BTC, BCH, LTC, DOGE\n   */\n  blockchairApiKey?: string;\n  /**\n   * @required for Walletconnect\n   */\n  walletConnectProjectId?: string;\n  /**\n   * @optional for Trezor config\n   */\n  trezorManifest?: {\n    email: string;\n    appUrl: string;\n  };\n  /**\n   * @optional for KeepKey config\n   */\n  keepkeyConfig?: {\n    apiKey: string;\n    pairingInfo: {\n      name: string;\n      imageUrl: string;\n      basePath: string;\n      url: string;\n    };\n  };\n  /**\n   * @optional for setting the chainflip broker url\n   */\n  chainflipBrokerUrl?: string;\n};\n\nexport type ConnectWalletParams<M = { [key in string]: NotWorth }> = {\n  addChain: <T extends Chain>(params: ChainWallet<T> & M) => void;\n  apis: ChainApis;\n  config: ConnectConfig;\n  rpcUrls: { [chain in Chain]?: string };\n};\n\nexport type Witness = {\n  value: number;\n  script: Buffer;\n};\n\nexport enum QuoteMode {\n  TC_SUPPORTED_TO_TC_SUPPORTED = \"TC-TC\",\n  TC_SUPPORTED_TO_ETH = \"TC-ERC20\",\n  TC_SUPPORTED_TO_AVAX = \"TC-ARC20\",\n  TC_SUPPORTED_TO_BSC = \"TC-BEP20\",\n  ETH_TO_TC_SUPPORTED = \"ERC20-TC\",\n  ETH_TO_ETH = \"ERC20-ERC20\",\n  ETH_TO_AVAX = \"ERC20-ARC20\",\n  ETH_TO_BSC = \"ERC20-BEP20\",\n  AVAX_TO_TC_SUPPORTED = \"ARC20-TC\",\n  AVAX_TO_ETH = \"ARC20-ERC20\",\n  AVAX_TO_AVAX = \"ARC20-ARC20\",\n  AVAX_TO_BSC = \"ARC20-BEP20\",\n  BSC_TO_TC_SUPPORTED = \"BEP20-TC\",\n  BSC_TO_ETH = \"BEP20-ERC20\",\n  BSC_TO_AVAX = \"BEP20-ARC20\",\n  BSC_TO_BSC = \"BEP20-BEP20\",\n}\n\nexport type Asset = {\n  chain: Chain;\n  symbol: string;\n  ticker: string;\n  synth?: boolean;\n};\n\nexport const AGG_SWAP = [QuoteMode.ETH_TO_ETH, QuoteMode.AVAX_TO_AVAX, QuoteMode.BSC_TO_BSC];\n\nexport const SWAP_IN = [\n  QuoteMode.ETH_TO_TC_SUPPORTED,\n  QuoteMode.ETH_TO_AVAX,\n  QuoteMode.ETH_TO_BSC,\n  QuoteMode.AVAX_TO_TC_SUPPORTED,\n  QuoteMode.AVAX_TO_ETH,\n  QuoteMode.AVAX_TO_BSC,\n  QuoteMode.BSC_TO_TC_SUPPORTED,\n  QuoteMode.BSC_TO_ETH,\n  QuoteMode.BSC_TO_AVAX,\n];\n\nexport const SWAP_OUT = [\n  QuoteMode.TC_SUPPORTED_TO_TC_SUPPORTED,\n  QuoteMode.TC_SUPPORTED_TO_ETH,\n  QuoteMode.TC_SUPPORTED_TO_AVAX,\n  QuoteMode.TC_SUPPORTED_TO_BSC,\n];\n",
    "import type { Chain } from \"./chains\";\n\nexport enum ContractAddress {\n  ARB = \"0x0000000000000000000000000000000000000000\",\n  AVAX = \"0x0000000000000000000000000000000000000000\",\n  ETH = \"0x0000000000000000000000000000000000000000\",\n  BSC = \"0x0000000000000000000000000000000000000000\",\n  MATIC = \"0x0000000000000000000000000000000000001010\",\n  OP = \"0x4200000000000000000000000000000000000042\",\n  SEP = \"0x0000000000000000000000000000000000000000\",\n}\n\nexport enum DerivationPath {\n  ARB = \"m/44'/60'/0'/0\",\n  AVAX = \"m/44'/60'/0'/0\",\n  BCH = \"m/44'/145'/0'/0\",\n  BSC = \"m/44'/60'/0'/0\",\n  BTC = \"m/84'/0'/0'/0\",\n  DASH = \"m/44'/5'/0'/0\",\n  DOGE = \"m/44'/3'/0'/0\",\n  DOT = \"////\",\n  ETH = \"m/44'/60'/0'/0\",\n  FLIP = \"////\",\n  GAIA = \"m/44'/118'/0'/0\",\n  KUJI = \"m/44'/118'/0'/0\",\n  LTC = \"m/84'/2'/0'/0\",\n  MATIC = \"m/44'/60'/0'/0\",\n  MAYA = \"m/44'/931'/0'/0\",\n  OP = \"m/44'/60'/0'/0\",\n  SOL = \"m/44'/501'/0'/0\",\n  SEP = \"m/44'/60'/0'/0\",\n  THOR = \"m/44'/931'/0'/0\",\n  XRD = \"////\",\n}\n\nexport type DerivationPathArray = [number, number, number, number, number?];\n\nexport const NetworkDerivationPath: Record<Chain, DerivationPathArray> = {\n  ARB: [44, 60, 0, 0, 0],\n  AVAX: [44, 60, 0, 0, 0],\n  BCH: [44, 145, 0, 0, 0],\n  BSC: [44, 60, 0, 0, 0],\n  BTC: [84, 0, 0, 0, 0],\n  DASH: [44, 5, 0, 0, 0],\n  DOGE: [44, 3, 0, 0, 0],\n  ETH: [44, 60, 0, 0, 0],\n  SEP: [44, 60, 0, 0, 0],\n  GAIA: [44, 118, 0, 0, 0],\n  KUJI: [44, 118, 0, 0, 0],\n  LTC: [84, 2, 0, 0, 0],\n  MATIC: [44, 60, 0, 0, 0],\n  MAYA: [44, 931, 0, 0, 0],\n  OP: [44, 60, 0, 0, 0],\n  SOL: [44, 501, 0, 0, 0],\n  THOR: [44, 931, 0, 0, 0],\n\n  // Polkadot and related network derivation path is not number based\n  XRD: [0, 0, 0, 0, 0],\n  DOT: [0, 0, 0, 0, 0],\n  FLIP: [0, 0, 0, 0, 0],\n};\n",
    "import type { CosmosWallets, ThorchainWallets } from \"@swapkit/toolbox-cosmos\";\nimport type { EVMWallets } from \"@swapkit/toolbox-evm\";\nimport type { SolanaWallet } from \"@swapkit/toolbox-solana\";\nimport type { SubstrateWallets } from \"@swapkit/toolbox-substrate\";\nimport type { UTXOWallets } from \"@swapkit/toolbox-utxo\";\nimport type { Eip1193Provider } from \"ethers\";\n\nimport type { AssetValue } from \"../modules/assetValue\";\nimport type { Chain } from \"./chains\";\nimport type { ConnectWalletParams } from \"./commonTypes\";\n\ndeclare global {\n  interface WindowEventMap {\n    \"eip6963:announceProvider\": CustomEvent;\n  }\n}\n\nexport type { CosmosWallets, ThorchainWallets, EVMWallets, SubstrateWallets, UTXOWallets };\n\nexport enum WalletOption {\n  BRAVE = \"BRAVE\",\n  COINBASE_MOBILE = \"COINBASE_MOBILE\",\n  COINBASE_WEB = \"COINBASE_WEB\",\n  EIP6963 = \"EIP6963\",\n  EXODUS = \"EXODUS\",\n  KEEPKEY = \"KEEPKEY\",\n  KEPLR = \"KEPLR\",\n  KEYSTORE = \"KEYSTORE\",\n  LEDGER = \"LEDGER\",\n  METAMASK = \"METAMASK\",\n  OKX = \"OKX\",\n  OKX_MOBILE = \"OKX_MOBILE\",\n  PHANTOM = \"PHANTOM\",\n  POLKADOT_JS = \"POLKADOT_JS\",\n  RADIX_WALLET = \"RADIX_WALLET\",\n  TREZOR = \"TREZOR\",\n  TALISMAN = \"TALISMAN\",\n  TRUSTWALLET_WEB = \"TRUSTWALLET_WEB\",\n  WALLETCONNECT = \"WALLETCONNECT\",\n  XDEFI = \"XDEFI\",\n}\n\nexport enum LedgerErrorCode {\n  NoError = 0x9000,\n  LockedDevice = 0x5515,\n  TC_NotFound = 65535,\n}\n\nexport type ChainWallet<T extends Chain> = {\n  chain: T;\n  address: string;\n  balance: AssetValue[];\n  walletType: WalletOption;\n  disconnect?: () => void;\n  signMessage?: (message: string) => Promise<string>;\n};\n\nexport type EmptyWallet = { [key in Chain]?: unknown };\nexport type BaseWallet<T extends EmptyWallet | Record<string, unknown>> = {\n  [key in Chain]: ChainWallet<key> & (T extends EmptyWallet ? T[key] : never);\n};\n\nexport type FullWallet = BaseWallet<\n  EVMWallets & UTXOWallets & CosmosWallets & ThorchainWallets & SubstrateWallets & SolanaWallet\n>;\n\n/**\n * @deprecated use FullWallet instead\n */\nexport type Wallet = FullWallet;\n\nexport type SwapKitWallet<ConnectParams extends Todo[]> = (\n  params: ConnectWalletParams,\n) => (...connectParams: ConnectParams) => boolean | Promise<boolean>;\n\nexport type SwapKitPluginParams<Config = {}> = {\n  getWallet: <T extends Chain>(chain: T) => FullWallet[T];\n  stagenet?: boolean;\n  config: Config;\n};\n\nexport type EIP6963ProviderInfo = {\n  walletId: string;\n  uuid: string;\n  name: string;\n  icon: string;\n};\n\nexport type EIP6963ProviderDetail = {\n  info: EIP6963ProviderInfo;\n  provider: Eip1193Provider;\n};\n\nexport type EIP6963Provider = {\n  info: EIP6963ProviderInfo;\n  provider: Eip1193Provider;\n};\n\n// This type represents the structure of an event dispatched by a wallet to announce its presence based on EIP-6963.\nexport type EIP6963AnnounceProviderEvent = Event & {\n  detail: EIP6963Provider;\n};\n",
    "import type { CovalentApiType, EthplorerApiType } from \"@swapkit/toolbox-evm\";\nimport type { BlockchairApiType } from \"@swapkit/toolbox-utxo\";\n\nimport type { AssetValue } from \"../modules/assetValue\";\nimport type { Chain, CosmosChain, UTXOChain } from \"./chains\";\n\ntype CovalentChains =\n  | Chain.BinanceSmartChain\n  | Chain.Polygon\n  | Chain.Avalanche\n  | Chain.Arbitrum\n  | Chain.Optimism;\n\nexport type ChainApis = { [key in CovalentChains]?: CovalentApiType } & {\n  [key in Chain.Ethereum]?: EthplorerApiType;\n} & {\n  [key in Chain.Sepolia]?: EthplorerApiType;\n} & {\n  [key in UTXOChain]?: BlockchairApiType;\n} & {\n  [key in CosmosChain | Chain.Solana | Chain.Radix | Chain.Polkadot]?: string;\n};\n\nexport type GenericSwapParams<T = unknown> = {\n  buyAsset?: AssetValue;\n  sellAsset?: AssetValue;\n  recipient?: string;\n  feeOptionKey?: FeeOption;\n  route: T;\n};\n\nexport type SwapParams<PluginNames = string, R = unknown> = GenericSwapParams<R> & {\n  pluginName?: PluginNames;\n};\n\nexport enum FeeOption {\n  Average = \"average\",\n  Fast = \"fast\",\n  Fastest = \"fastest\",\n}\n\nexport enum ApproveMode {\n  Approve = \"approve\",\n  CheckOnly = \"checkOnly\",\n}\n\nexport type ApproveReturnType<T extends ApproveMode> = T extends \"checkOnly\"\n  ? Promise<boolean>\n  : Promise<string>;\n\nexport type WalletTxParams = {\n  feeOptionKey?: FeeOption;\n  from?: string;\n  memo?: string; // optional memo to pass\n  recipient: string;\n};\n\nexport enum MemoType {\n  NAME_REGISTER = \"~\",\n  BOND = \"BOND\",\n  DEPOSIT = \"+\",\n  LEAVE = \"LEAVE\",\n  UNBOND = \"UNBOND\",\n  WITHDRAW = \"-\",\n  OPEN_LOAN = \"$+\",\n  CLOSE_LOAN = \"$-\",\n  RUNEPOOL_DEPOSIT = \"POOL+\",\n  RUNEPOOL_WITHDRAW = \"POOL-\",\n}\n",
    "export enum ErrorCode {\n  unknownError = \"unknownError\",\n  test_error = \"test_error\",\n  providerDetailsError = \"providerDetailsError\",\n  blockHeaderNotFound = \"blockHeaderNotFound\",\n  blockHashNotFoundAtHeight = \"blockHashNotFoundAtHeight\",\n  blockHashNotFoundAtHash = \"blockHashNotFoundAtHash\",\n  txHashMissing = \"txHashMissing\",\n  assetValueMissingInfo = \"assetValueMissingInfo\",\n  invalidAsset = \"invalidAsset\",\n  blockIsRequired = \"blockIsRequired\",\n  currentBlockHeaderNotFound = \"currentBlockHeaderNotFound\",\n  failedToRetrieveBalance = \"failedToRetrieveBalance\",\n  failedToRetrieveBlock = \"failedToRetrieveBlock\",\n  failedToRetrieveFees = \"failedToRetrieveFees\",\n  notImplementedBCH = \"notImplementedBCH\",\n  notImplementedDoge = \"notImplementedDoge\",\n  noPoolsFound = \"noPoolsFound\",\n  noVaultsFound = \"noVaultsFound\",\n  noTxFound = \"noTxFound\",\n  noInputCoinFound = \"noInputCoinFound\",\n  noBlockDataFound = \"noBlockDataFound\",\n  multipleCosmosMessages = \"multipleCosmosMessages\",\n  heightOrHashNotProvided = \"heightOrHashNotProvided\",\n  unknownDenom = \"unknownDenom\",\n  invalidBlockHeight = \"invalidBlockHeight\",\n  timestampExtrinsicNoArgumentsForBlock = \"timestampExtrinsicNoArgumentsForBlock\",\n  timestampExtrinsicNoTimestampForBlock = \"timestampExtrinsicNoTimestampForBlock\",\n  noTimestampExtrinsicForHash = \"noTimestampExtrinsicForHash\",\n  timestampExtrinsicNoArgumentsForHash = \"timestampExtrinsicNoArgumentsForHash\",\n  txMemoUndefined = \"txMemoUndefined\",\n  txMemoIncorrect = \"txMemoIncorrect\",\n  txTypeNotFound = \"txTypeNotFound\",\n  txNoMessage = \"txNoMessage\",\n  txNotFound = \"txNotFound\",\n  txReceiptNotFound = \"txReceiptNotFound\",\n  txParsingError = \"txParsingError\",\n  blockNotFound = \"blockNotFound\",\n  balanceNotFound = \"balanceNotFound\",\n  configError = \"configError\",\n  noQuoteResponse = \"noQuoteResponse\",\n  noPoolAssetsFound = \"noPoolAssetsFound\",\n  noThorchainPools = \"noThorchainPools\",\n  noMayachainPools = \"noMayachainPools\",\n  invalidAffiliateFee = \"invalidAffiliateFee\",\n  invalidBuyAssetAddress = \"invalidBuyAssetAddress\",\n  invalidSellAssetAddress = \"invalidSellAssetAddress\",\n  invalidSourceAddress = \"invalidSourceAddress\",\n  invalidDestinationAddress = \"invalidDestinationAddress\",\n  sourceAddressIsSmartContract = \"sourceAddressIsSmartContract\",\n  destinationAddressIsSmartContract = \"destinationAddressIsSmartContract\",\n  invalidChainId = \"invalidChainId\",\n  unsupportedChainId = \"unsupportedChainId\",\n  unsupportedEVMChainId = \"unsupportedEVMChainId\",\n  noWhitelistTokens = \"noWhitelistTokens\",\n  failedFetchGasPrice = \"failedFetchGasPrice\",\n  failedToCreateDepositChannel = \"failedToCreateDepositChannel\",\n  noProviderDetailsFound = \"noProviderDetailsFound\",\n  noTokenListsFound = \"noTokenListsFound\",\n  tokenNotFound = \"tokenNotFound\",\n  tokenPriceNotFound = \"tokenPriceNotFound\",\n  swapAmountTooSmall = \"swapAmountTooSmall\",\n  legsArrayIsEmpty = \"legsArrayIsEmpty\",\n  failedToFetchQuoteForLeg = \"failedToFetchQuoteForLeg\",\n  noBlockHeaderFound = \"noBlockHeaderFound\",\n  failedToSimulateSwap = \"failedToSimulateSwap\",\n  addressScreeningFailed = \"addressScreeningFailed\",\n  noLiquidtyProvidersFound = \"noLiquidtyProvidersFound\",\n  noSaversFound = \"noSaversFound\",\n  noInboundAddressesFound = \"noInboundAddressesFound\",\n  noInboundAddressFoundForChain = \"noInboundAddressFoundForChain\",\n  noLastBlocksFound = \"noLastBlocksFound\",\n  noVersionFound = \"noVersionFound\",\n  noConstantsFound = \"noConstantsFound\",\n  noMimirsFound = \"noMimirsFound\",\n  noRoutesFound = \"noRoutesFound\",\n  quoteNotFound = \"quoteNotFound\",\n  ledgerSignFailed = \"ledgerSignFailed\",\n  ledgerFetchSwapFailed = \"ledgerFetchSwapFailed\",\n  failedToFetchTx = \"failedToFetchTx\",\n  failedBuildTransactionDetails = \"failedBuildTransactionDetails\",\n  noLegsForRoute = \"noLegsForRoute\",\n  noRouterAddressFound = \"noRouterAddressFound\",\n  noAggregatorAddressFound = \"noAggregatorAddressFound\",\n  noContractInstanceFound = \"noContractInstanceFound\",\n  noContractAddressFound = \"noContractAddressFound\",\n  invalidAffiliate = \"invalidAffiliate\",\n  providerNotfound = \"No provider found\",\n  noRecordFound = \"No Record found\",\n  slippageTooLow = \"Slippage too low\",\n  tradingHalted = \"tradingHalted\",\n  noWrappedGasAsset = \"noWrappedGasAsset\",\n  aggregatorAddressNotFound = \"aggregatorAddressNotFound\",\n  routerAddressNotFound = \"routerAddressNotFound\",\n  dummyAddressNotFound = \"dummyAddressNotFound\",\n  trackerError = \"trackerError\",\n  noOhlcvDataFound = \"noOhlcvDataFound\",\n  noTradingPairs = \"noTradingPairs\",\n  noLoanPositionFound = \"noLoanPositionFound\",\n  noLendingAvailability = \"noLendingAvailability\",\n  lendingRepayTooSmall = \"lendingRepayTooSmall\",\n  missingState = \"missingState\",\n  ledgerSwapNotFound = \"ledgerSwapNotFound\",\n  ledgerSwapNotReadyForTracking = \"ledgerSwapNotReadyForTracking\",\n  errorEstimatingGas = \"errorEstimatingGas\",\n  apiKeyInvalid = \"apiKeyInvalid\",\n  apiKeyFailedToUpdate = \"apiKeyFailedToUpdate\",\n  apiKeyExpired = \"apiKeyExpired\",\n  unauthorized = \"unauthorized\",\n  failedToCreateMemo = \"failedToCreateMemo\",\n  radixIncorrectInstructions = \"radixIncorrectInstructions\",\n  invalidAddressForChain = \"invalidAddressForChain\",\n}\n\nexport enum WarningCodeEnum {\n  highSlippage = \"highSlippage\",\n  highPriceImpact = \"highPriceImpact\",\n}\n\nexport enum ProviderName {\n  CHAINFLIP = \"CHAINFLIP\",\n  MAYACHAIN = \"MAYACHAIN\",\n  MAYACHAIN_STREAMING = \"MAYACHAIN_STREAMING\",\n  ONEINCH = \"ONEINCH\",\n  PANCAKESWAP = \"PANCAKESWAP\",\n  PANGOLIN_V1 = \"PANGOLIN_V1\",\n  SUSHISWAP_V2 = \"SUSHISWAP_V2\",\n  THORCHAIN = \"THORCHAIN\",\n  THORCHAIN_STREAMING = \"THORCHAIN_STREAMING\",\n  TRADERJOE_V2 = \"TRADERJOE_V2\",\n  UNISWAP_V2 = \"UNISWAP_V2\",\n  UNISWAP_V3 = \"UNISWAP_V3\",\n  CAVIAR_V1 = \"CAVIAR_V1\",\n}\n\nexport enum FeeTypeEnum {\n  LIQUIDITY = \"liquidity\",\n  NETWORK = \"network\",\n  INBOUND = \"inbound\",\n  OUTBOUND = \"outbound\",\n  AFFILIATE = \"affiliate\",\n  TAX = \"tax\",\n}\n",
    "import { red, yellow } from \"picocolors\";\nimport {\n  type CommonAssetString,\n  CommonAssetStrings,\n  getAssetType,\n  getCommonAssetInfo,\n  getDecimal,\n  isGasAsset,\n} from \"../helpers/asset.ts\";\nimport { warnOnce } from \"../helpers/others.ts\";\nimport { validateIdentifier } from \"../helpers/validators.ts\";\nimport { BaseDecimal, Chain, type ChainId, ChainToChainId } from \"../types/chains.ts\";\nimport type { TokenNames, TokenTax } from \"../types/tokens.ts\";\n\nimport type { NumberPrimitives } from \"./bigIntArithmetics.ts\";\nimport { BigIntArithmetics, formatBigIntToSafeValue } from \"./bigIntArithmetics.ts\";\nimport { SwapKitError } from \"./swapKitError.ts\";\nimport type { SwapKitValueType } from \"./swapKitNumber.ts\";\n\nconst staticTokensMap = new Map<\n  TokenNames,\n  { tax?: TokenTax; decimal: number; identifier: string }\n>();\n\ntype ConditionalAssetValueReturn<T extends { asyncTokenLookup?: boolean }> =\n  T[\"asyncTokenLookup\"] extends true ? Promise<AssetValue> : AssetValue;\n\ntype AssetIdentifier =\n  | { asset: CommonAssetString }\n  | { asset: TokenNames }\n  | { asset: string }\n  | { chain: Chain };\n\ntype AssetValueFromParams = AssetIdentifier & {\n  value?: NumberPrimitives | SwapKitValueType;\n  fromBaseDecimal?: number;\n  asyncTokenLookup?: boolean;\n};\n\nexport class AssetValue extends BigIntArithmetics {\n  address?: string;\n  chain: Chain;\n  isGasAsset = false;\n  isSynthetic = false;\n  symbol: string;\n  tax?: TokenTax;\n  ticker: string;\n  type: ReturnType<typeof getAssetType>;\n  chainId: ChainId;\n\n  constructor({\n    value,\n    decimal,\n    tax,\n    chain,\n    symbol,\n    identifier,\n  }: { decimal: number; value: SwapKitValueType; tax?: TokenTax } & (\n    | { chain: Chain; symbol: string; identifier?: never }\n    | { identifier: string; chain?: never; symbol?: never }\n  )) {\n    super(typeof value === \"object\" ? value : { decimal, value });\n\n    const assetInfo = getAssetInfo(identifier || `${chain}.${symbol}`);\n\n    this.type = getAssetType(assetInfo);\n    this.tax = tax;\n    this.chain = assetInfo.chain;\n    this.ticker = assetInfo.ticker;\n    this.symbol = assetInfo.symbol;\n    this.address = assetInfo.address;\n    this.isSynthetic = assetInfo.isSynthetic;\n    this.isGasAsset = assetInfo.isGasAsset;\n    this.chainId = ChainToChainId[assetInfo.chain];\n  }\n\n  toString() {\n    return this.isSynthetic ? this.symbol : `${this.chain}.${this.symbol}`;\n  }\n\n  toUrl() {\n    return this.isSynthetic ? `${this.chain}.${this.symbol.replace(\"/\", \".\")}` : this.toString();\n  }\n\n  eqAsset({ chain, symbol }: { chain: Chain; symbol: string }) {\n    return this.chain === chain && this.symbol === symbol;\n  }\n\n  eq(assetValue: AssetValue) {\n    return this.eqAsset(assetValue) && this.eqValue(assetValue);\n  }\n\n  // THOR.RUNE\n  // THOR.ETH.ETH\n  // ETH.THOR-0x1234567890\n  static fromUrl(urlAsset: string, value: NumberPrimitives = 0) {\n    const [chain, ticker, symbol] = urlAsset.split(\".\");\n    if (!(chain && ticker)) {\n      throw new SwapKitError({\n        errorKey: \"helpers_invalid_asset_url\",\n        info: { urlAsset },\n      });\n    }\n\n    const asset = chain === Chain.THORChain && symbol ? `${chain}.${ticker}/${symbol}` : urlAsset;\n\n    return AssetValue.from({ asset, value });\n  }\n\n  static from<T extends {}>({\n    value = 0,\n    fromBaseDecimal,\n    asyncTokenLookup,\n    ...fromAssetOrChain\n  }: T & AssetValueFromParams): ConditionalAssetValueReturn<T> {\n    const parsedValue = value instanceof BigIntArithmetics ? value.getValue(\"string\") : value;\n    const isFromChain = \"chain\" in fromAssetOrChain;\n    const assetOrChain = isFromChain ? fromAssetOrChain.chain : fromAssetOrChain.asset;\n\n    const isFromCommonAssetOrChain =\n      isFromChain ||\n      CommonAssetStrings.includes(assetOrChain as (typeof CommonAssetStrings)[number]);\n\n    const { identifier: unsafeIdentifier, decimal: commonAssetDecimal } = isFromCommonAssetOrChain\n      ? getCommonAssetInfo(assetOrChain as CommonAssetString)\n      : { identifier: assetOrChain, decimal: undefined };\n\n    const { chain, isSynthetic } = getAssetInfo(unsafeIdentifier);\n    const token = staticTokensMap.get(unsafeIdentifier.toUpperCase() as TokenNames);\n    const tokenDecimal = token?.decimal || commonAssetDecimal;\n\n    warnOnce(\n      !(asyncTokenLookup || tokenDecimal),\n      yellow(\n        `Couldn't find static decimal for ${red(unsafeIdentifier)} (Using default ${red(BaseDecimal[chain])} decimal as fallback).\nThis can result in incorrect calculations and mess with amount sent on transactions.\nYou can load static assets by installing @swapkit/tokens package and calling AssetValue.loadStaticAssets()\nor by passing asyncTokenLookup: true to the from() function, which will make it async and return a promise.`,\n      ),\n    );\n\n    const { decimal, identifier, tax } = token || {\n      decimal: tokenDecimal || BaseDecimal[chain],\n      identifier: unsafeIdentifier,\n    };\n\n    const adjustedValue = fromBaseDecimal\n      ? safeValue(BigInt(parsedValue), fromBaseDecimal)\n      : safeValue(parsedValue, decimal);\n\n    const assetValue = asyncTokenLookup\n      ? createAssetValue(identifier, fromBaseDecimal ? adjustedValue : parsedValue)\n      : isSynthetic\n        ? createSyntheticAssetValue(identifier, adjustedValue)\n        : new AssetValue({ tax, decimal, identifier, value: adjustedValue });\n\n    return assetValue as ConditionalAssetValueReturn<T>;\n  }\n\n  static loadStaticAssets() {\n    return new Promise<{ ok: true } | { ok: false; message: string; error: Todo }>(\n      (resolve, reject) => {\n        try {\n          import(\"@swapkit/tokens\").then((tokenPackages) => {\n            for (const tokenList of Object.values(tokenPackages)) {\n              for (const { identifier, chain, ...rest } of tokenList.tokens) {\n                staticTokensMap.set(identifier.toUpperCase() as TokenNames, {\n                  identifier,\n                  decimal: \"decimals\" in rest ? rest.decimals : BaseDecimal[chain as Chain],\n                });\n              }\n            }\n\n            resolve({ ok: true });\n          });\n        } catch (error) {\n          console.error(error);\n          reject({\n            ok: false,\n            error,\n            message:\n              \"Couldn't load static assets. Ensure you have installed @swapkit/tokens package\",\n          });\n        }\n      },\n    );\n  }\n\n  /**\n   * @deprecated use AssetValue.from({ asset, value, asyncTokenLookup: true })\n   */\n  static fromString(asset: string, value: NumberPrimitives = 0) {\n    return AssetValue.from({ asset, value, asyncTokenLookup: true });\n  }\n  /**\n   * @deprecated use AssetValue.from({ asset, value, asyncTokenLookup: true })\n   */\n  static fromIdentifier(\n    asset: `${Chain}.${string}` | `${Chain}/${string}` | TokenNames,\n    value: NumberPrimitives = 0,\n  ) {\n    return AssetValue.from({ asset: asset as TokenNames, value, asyncTokenLookup: true });\n  }\n  /**\n   * @deprecated use AssetValue.from({ asset, value })\n   */\n  static fromStringSync(asset: string, value: NumberPrimitives = 0) {\n    return AssetValue.from({ asset, value });\n  }\n  /**\n   * @deprecated use AssetValue.from({ asset, value, fromBaseDecimal, asyncTokenLookup: true })\n   */\n  static fromStringWithBase(\n    asset: string,\n    value: string | bigint = 0n,\n    fromBaseDecimal: number = BaseDecimal.THOR,\n  ) {\n    return AssetValue.from({ asyncTokenLookup: true, asset, value, fromBaseDecimal });\n  }\n  /**\n   * @deprecated use AssetValue.from({ asset, value, fromBaseDecimal, asyncTokenLookup: true })\n   */\n  static fromStringWithBaseSync(\n    asset: string,\n    value: string | bigint = 0n,\n    fromBaseDecimal: number = BaseDecimal.THOR,\n  ) {\n    return AssetValue.from({ asset, value, fromBaseDecimal });\n  }\n  /**\n   * @deprecated use AssetValue.from({ asset, value })\n   */\n  static fromIdentifierSync(asset: TokenNames, value: NumberPrimitives = 0) {\n    return AssetValue.from({ asset, value });\n  }\n  /**\n   * @deprecated use AssetValue.from({ asset, value }) or AssetValue.from({ chain, value })\n   */\n  static fromChainOrSignature(assetOrChain: CommonAssetString, value: NumberPrimitives = 0) {\n    if (Object.values(Chain).includes(assetOrChain as Chain)) {\n      return AssetValue.from({ chain: assetOrChain as Chain, value });\n    }\n    return AssetValue.from({ asset: assetOrChain, value });\n  }\n}\n\nexport function getMinAmountByChain(chain: Chain) {\n  const asset = AssetValue.from({ chain });\n\n  switch (chain) {\n    case Chain.Bitcoin:\n    case Chain.Litecoin:\n    case Chain.BitcoinCash:\n    case Chain.Dash:\n      return asset.set(0.00010001);\n\n    case Chain.Dogecoin:\n      return asset.set(1.00000001);\n\n    case Chain.Avalanche:\n    case Chain.Ethereum:\n    case Chain.Arbitrum:\n    case Chain.BinanceSmartChain:\n      return asset.set(0.00000001);\n\n    case Chain.THORChain:\n    case Chain.Maya:\n      return asset.set(0);\n\n    case Chain.Cosmos:\n    case Chain.Kujira:\n      return asset.set(0.000001);\n\n    default:\n      return asset.set(0.00000001);\n  }\n}\n\nasync function createAssetValue(identifier: string, value: NumberPrimitives = 0) {\n  validateIdentifier(identifier);\n\n  const staticToken = staticTokensMap.get(identifier.toUpperCase() as TokenNames);\n  const decimal = staticToken?.decimal || (await getDecimal(getAssetInfo(identifier)));\n  if (!staticToken) {\n    staticTokensMap.set(identifier.toUpperCase() as TokenNames, { identifier, decimal });\n  }\n\n  return new AssetValue({ decimal, value: safeValue(value, decimal), identifier });\n}\n\nfunction createSyntheticAssetValue(identifier: string, value: NumberPrimitives = 0) {\n  const chain = identifier.split(\".\")?.[0]?.toUpperCase() as Chain | undefined;\n  const isMayaOrThor = chain ? [Chain.Maya, Chain.THORChain].includes(chain) : false;\n\n  const [synthChain, symbol] = isMayaOrThor\n    ? identifier.split(\".\").slice(1).join().split(\"/\")\n    : identifier.split(\"/\");\n\n  if (!(synthChain && symbol)) {\n    throw new SwapKitError({\n      errorKey: \"helpers_invalid_asset_identifier\",\n      info: { identifier },\n    });\n  }\n\n  return new AssetValue({\n    decimal: 8,\n    value: safeValue(value, 8),\n    identifier: `${chain || Chain.THORChain}.${synthChain}/${symbol}`,\n  });\n}\n\nfunction safeValue(value: NumberPrimitives, decimal: number) {\n  return typeof value === \"bigint\"\n    ? formatBigIntToSafeValue({ value, bigIntDecimal: decimal, decimal })\n    : value;\n}\n\n// TODO refactor & split into smaller functions\nfunction getAssetInfo(identifier: string) {\n  const isSynthetic = identifier.slice(0, 14).includes(\"/\");\n\n  const isThorchain = identifier.split(\".\")?.[0]?.toUpperCase() === Chain.THORChain;\n  const isMaya = identifier.split(\".\")?.[0]?.toUpperCase() === Chain.Maya;\n\n  const [synthChain, synthSymbol = \"\"] =\n    isThorchain || isMaya\n      ? identifier.split(\".\").slice(1).join().split(\"/\")\n      : identifier.split(\"/\");\n\n  if (isSynthetic && !(synthChain && synthSymbol)) {\n    throw new SwapKitError({\n      errorKey: \"helpers_invalid_asset_identifier\",\n      info: { identifier },\n    });\n  }\n\n  const adjustedIdentifier =\n    identifier.includes(\".\") && !isSynthetic\n      ? identifier\n      : `${isMaya ? Chain.Maya : Chain.THORChain}.${synthSymbol}`;\n\n  const [chain, ...rest] = adjustedIdentifier.split(\".\") as [Chain, string];\n\n  const symbol = isSynthetic ? synthSymbol : rest.join(\".\");\n  const splitSymbol = symbol.split(\"-\");\n  const ticker = (\n    splitSymbol.length === 1 ? splitSymbol[0] : splitSymbol.slice(0, -1).join(\"-\")\n  ) as string;\n  const address = splitSymbol.length === 1 ? undefined : splitSymbol[splitSymbol.length - 1];\n\n  return {\n    address: address?.toLowerCase(),\n    chain,\n    isGasAsset: isGasAsset({ chain, symbol }),\n    isSynthetic,\n    ticker,\n    symbol:\n      (isSynthetic ? `${synthChain}/` : \"\") +\n      (address ? `${ticker}-${address?.toLowerCase() ?? \"\"}` : symbol),\n  };\n}\n",
    "const errorCodes = {\n  /**\n   * Core\n   */\n  core_estimated_max_spendable_chain_not_supported: 10002,\n  core_extend_error: 10003,\n  core_inbound_data_not_found: 10004,\n  core_approve_asset_address_or_from_not_found: 10005,\n  core_plugin_not_found: 10006,\n  core_plugin_swap_not_found: 10007,\n  core_approve_asset_target_invalid: 10008,\n  core_explorer_unsupported_chain: 10009,\n  core_verify_message_not_supported: 10010,\n  core_chain_halted: 10099,\n  /**\n   * Core - Wallet\n   */\n  core_wallet_connection_not_found: 10100,\n  core_wallet_xdefi_not_installed: 10101,\n  core_wallet_evmwallet_not_installed: 10102,\n  core_wallet_walletconnect_not_installed: 10103,\n  core_wallet_keystore_not_installed: 10104,\n  core_wallet_ledger_not_installed: 10105,\n  core_wallet_trezor_not_installed: 10106,\n  core_wallet_keplr_not_installed: 10107,\n  core_wallet_okx_not_installed: 10108,\n  core_wallet_keepkey_not_installed: 10109,\n  core_wallet_talisman_not_installed: 10110,\n  core_wallet_not_keypair_wallet: 10111,\n  core_wallet_sign_message_not_supported: 10110,\n  /**\n   * Core - Swap\n   */\n  core_swap_invalid_params: 10200,\n  core_swap_route_not_complete: 10201,\n  core_swap_asset_not_recognized: 10202,\n  core_swap_contract_not_found: 10203,\n  core_swap_route_transaction_not_found: 10204,\n  core_swap_contract_not_supported: 10205,\n  core_swap_transaction_error: 10206,\n  core_swap_quote_mode_not_supported: 10207,\n  /**\n   * Core - Transaction\n   */\n  core_transaction_deposit_error: 10301,\n  core_transaction_create_liquidity_base_error: 10302,\n  core_transaction_create_liquidity_asset_error: 10303,\n  core_transaction_create_liquidity_invalid_params: 10304,\n  core_transaction_add_liquidity_invalid_params: 10305,\n  core_transaction_add_liquidity_base_address: 10306,\n  core_transaction_add_liquidity_base_error: 10307,\n  core_transaction_add_liquidity_asset_error: 10308,\n  core_transaction_withdraw_error: 10309,\n  core_transaction_deposit_to_pool_error: 10310,\n  core_transaction_deposit_insufficient_funds_error: 10311,\n  core_transaction_deposit_gas_error: 10312,\n  core_transaction_invalid_sender_address: 10313,\n  core_transaction_deposit_server_error: 10314,\n  core_transaction_user_rejected: 10315,\n  core_transaction_failed: 10316,\n  /**\n   * Wallets\n   */\n  wallet_connection_rejected_by_user: 20000,\n  wallet_missing_api_key: 20001,\n  wallet_chain_not_supported: 20002,\n  wallet_missing_params: 20003,\n  wallet_provider_not_found: 20004,\n  wallet_failed_to_add_or_switch_network: 20005,\n  wallet_ledger_connection_error: 20101,\n  wallet_ledger_connection_claimed: 20102,\n  wallet_ledger_get_address_error: 20103,\n  wallet_ledger_device_not_found: 20104,\n  wallet_ledger_device_locked: 20105,\n  wallet_phantom_not_found: 20201,\n  wallet_xdefi_not_found: 20301,\n  wallet_xdefi_send_transaction_no_address: 20302,\n  wallet_xdefi_contract_address_not_provided: 20303,\n  wallet_xdefi_asset_not_defined: 20304,\n  wallet_walletconnect_project_id_not_specified: 20401,\n  wallet_walletconnect_connection_not_established: 20402,\n  wallet_walletconnect_namespace_not_supported: 20403,\n  wallet_trezor_failed_to_sign_transaction: 20501,\n  wallet_trezor_derivation_path_not_supported: 20502,\n  wallet_trezor_failed_to_get_address: 20503,\n  wallet_talisman_not_enabled: 20601,\n  wallet_talisman_not_found: 20602,\n  wallet_polkadot_not_found: 20701,\n  /**\n   * Chainflip\n   */\n  chainflip_channel_error: 30001,\n  chainflip_unknown_asset: 30002,\n  chainflip_broker_invalid_params: 30100,\n  chainflip_broker_recipient_error: 30101,\n  chainflip_broker_register: 30102,\n  chainflip_broker_tx_error: 30103,\n  chainflip_broker_withdraw: 30104,\n  chainflip_broker_fund_only_flip_supported: 30105,\n  chainflip_broker_fund_invalid_address: 30106,\n  /**\n   * THORChain\n   */\n  thorchain_chain_halted: 40001,\n  thorchain_trading_halted: 40002,\n  thorchain_swapin_router_required: 40100,\n  thorchain_swapin_vault_required: 40101,\n  thorchain_swapin_memo_required: 40102,\n  thorchain_swapin_token_required: 40103,\n  /**\n   * SwapKit API\n   */\n  api_v2_invalid_response: 50001,\n  api_v2_server_error: 50002,\n  /**\n   * Toolboxes\n   */\n  toolbox_cosmos_signer_not_defined: 90101,\n  toolbox_cosmos_no_accounts_found: 90102,\n  toolbox_cosmos_verify_signature_no_pubkey: 90103,\n  toolbox_evm_no_abi_fragment: 90201,\n  toolbox_evm_no_signer: 90202,\n  toolbox_evm_no_signer_address: 90203,\n  toolbox_evm_no_from_address: 90204,\n  toolbox_evm_no_contract_address: 90205,\n  toolbox_evm_no_fee_data: 90206,\n  toolbox_evm_no_gas_price: 90207,\n  toolbox_evm_no_to_address: 90208,\n  toolbox_evm_invalid_gas_asset_address: 90209,\n  toolbox_evm_provider_not_eip1193_compatible: 90210,\n  toolbox_evm_error_estimating_gas_limit: 90211,\n  toolbox_evm_error_sending_transaction: 90212,\n  /**\n   * Helpers\n   */\n  helpers_invalid_number_different_decimals: 99000,\n  helpers_invalid_number_of_years: 99001,\n  helpers_invalid_identifier: 99002,\n  helpers_invalid_asset_url: 99003,\n  helpers_invalid_asset_identifier: 99004,\n  helpers_invalid_memo_type: 99005,\n  helpers_failed_to_switch_network: 99103,\n  helpers_not_found_provider: 99200,\n  /**\n   * Anything else\n   */\n  not_implemented: 99999,\n} as const;\n\nexport type ErrorKeys = keyof typeof errorCodes;\n\nexport class SwapKitError extends Error {\n  static ErrorCode = errorCodes;\n\n  constructor(\n    errorOrErrorKey: ErrorKeys | { errorKey: ErrorKeys; info?: Record<string, NotWorth> },\n    sourceError?: NotWorth,\n  ) {\n    const isErrorString = typeof errorOrErrorKey === \"string\";\n\n    const errorKey = isErrorString ? errorOrErrorKey : errorOrErrorKey.errorKey;\n\n    if (sourceError) {\n      console.error(sourceError, {\n        stack: sourceError?.stack,\n        message: sourceError?.message,\n      });\n    }\n\n    super(errorKey, {\n      cause: {\n        code: SwapKitError.ErrorCode[errorKey],\n        message: `${errorKey}${isErrorString ? \"\" : `: ${JSON.stringify(errorOrErrorKey.info)}`}`,\n      },\n    });\n\n    Object.setPrototypeOf(this, SwapKitError.prototype);\n  }\n}\n",
    "import { type ErrorKeys, SwapKitError } from \"../modules/swapKitError\";\nimport { Chain } from \"../types\";\n\n// 10 rune for register, 1 rune per year\n// MINIMUM_REGISTRATION_FEE = 11\nexport function getTHORNameCost(numberOfYears: number) {\n  if (numberOfYears < 0)\n    throw new SwapKitError({\n      errorKey: \"helpers_invalid_number_of_years\",\n      info: { numberOfYears },\n    });\n  return 10 + numberOfYears;\n}\n\n// 10 CACAO for register\n// 1.0512 CACAO per year\nexport function getMAYANameCost(numberOfYears: number) {\n  if (numberOfYears < 0)\n    throw new SwapKitError({\n      errorKey: \"helpers_invalid_number_of_years\",\n      info: { numberOfYears },\n    });\n  // round to max 10 decimals\n  return Math.round((10 + numberOfYears * 1.0512) * 1e10) / 1e10;\n}\n\nexport function wrapWithThrow<T>(fn: () => T, errorKey?: ErrorKeys) {\n  try {\n    return fn();\n  } catch (error) {\n    if (errorKey) {\n      throw new SwapKitError(errorKey, error);\n    }\n\n    return console.error(error);\n  }\n}\n\nexport function getChainIdentifier<T extends Chain>(chain: T) {\n  switch (chain) {\n    case Chain.THORChain:\n      return `${chain}.RUNE`;\n\n    case Chain.Cosmos:\n      return `${chain}.ATOM`;\n\n    case Chain.BinanceSmartChain:\n      return `${chain}`;\n\n    default:\n      return `${chain}.${chain}`;\n  }\n}\n\nconst skipWarnings = [\"production\", \"test\"].includes(process.env.NODE_ENV || \"\");\nconst warnings = new Set();\nexport function warnOnce(condition: boolean, warning: string) {\n  if (!skipWarnings && condition) {\n    if (warnings.has(warning)) {\n      return;\n    }\n\n    warnings.add(warning);\n    console.warn(warning);\n  }\n}\n",
    "import { SwapKitError } from \"../modules/swapKitError\";\nimport { Chain } from \"../types/chains\";\n\n// Backward compatibility\nconst supportedChains = [...Object.values(Chain), \"TERRA\"];\n\nexport function validateIdentifier(identifier = \"\") {\n  const uppercasedIdentifier = identifier.toUpperCase();\n\n  const [chain] = uppercasedIdentifier.split(\".\") as [Chain, string];\n  if (supportedChains.includes(chain)) return true;\n\n  const [synthChain] = uppercasedIdentifier.split(\"/\") as [Chain, string];\n  if (supportedChains.includes(synthChain)) return true;\n\n  throw new SwapKitError({\n    errorKey: \"helpers_invalid_identifier\",\n    info: {\n      message: `Invalid identifier: ${identifier}. Expected format: <Chain>.<Ticker> or <Chain>.<Ticker>-<ContractAddress>`,\n      identifier,\n    },\n  });\n}\n\nexport function validateTNS(name: string) {\n  if (name.length > 30) return false;\n\n  const regex = /^[a-zA-Z0-9+_-]+$/g;\n\n  return !!name.match(regex);\n}\n",
    "import { BaseDecimal } from \"../types/chains.ts\";\nimport type { SwapKitNumber } from \"./swapKitNumber.ts\";\n\ntype NumberPrimitivesType = {\n  bigint: bigint;\n  number: number;\n  string: string;\n};\nexport type NumberPrimitives = bigint | number | string;\ntype InitialisationValueType = NumberPrimitives | BigIntArithmetics | SwapKitNumber;\n\ntype SKBigIntParams = InitialisationValueType | { decimal?: number; value: number | string };\ntype AllowedNumberTypes = \"bigint\" | \"number\" | \"string\";\n\nconst DEFAULT_DECIMAL = 8;\nconst toMultiplier = (decimal: number) => 10n ** BigInt(decimal);\nconst decimalFromMultiplier = (multiplier: bigint) =>\n  Math.log10(Number.parseFloat(multiplier.toString()));\n\nexport function formatBigIntToSafeValue({\n  value,\n  bigIntDecimal = DEFAULT_DECIMAL,\n  decimal = DEFAULT_DECIMAL,\n}: {\n  value: bigint;\n  bigIntDecimal?: number;\n  decimal?: number;\n}) {\n  if (decimal === 0) return value.toString();\n  const isNegative = value < 0n;\n  let valueString = value.toString().substring(isNegative ? 1 : 0);\n\n  const padLength = decimal - (valueString.length - 1);\n\n  if (padLength > 0) {\n    valueString = \"0\".repeat(padLength) + valueString;\n  }\n\n  const decimalIndex = valueString.length - decimal;\n  let decimalString = valueString.slice(-decimal);\n\n  // Check if we need to round up\n  if (Number.parseInt(decimalString[bigIntDecimal] || \"0\") >= 5) {\n    // Increment the last decimal place and slice off the rest\n    decimalString = `${decimalString.substring(0, bigIntDecimal - 1)}${(Number.parseInt(decimalString[bigIntDecimal - 1] || \"0\") + 1).toString()}`;\n  } else {\n    // Just slice off the extra digits\n    decimalString = decimalString.substring(0, bigIntDecimal);\n  }\n\n  return `${isNegative ? \"-\" : \"\"}${valueString.slice(0, decimalIndex)}.${decimalString}`.replace(\n    /\\.?0*$/,\n    \"\",\n  );\n}\n\nexport class BigIntArithmetics {\n  decimalMultiplier: bigint = 10n ** 8n;\n  bigIntValue = 0n;\n  decimal?: number;\n\n  static fromBigInt(value: bigint, decimal?: number) {\n    return new BigIntArithmetics({\n      decimal,\n      value: formatBigIntToSafeValue({ value, bigIntDecimal: decimal, decimal }),\n    });\n  }\n\n  static shiftDecimals({\n    value,\n    from,\n    to,\n  }: {\n    value: InstanceType<typeof SwapKitNumber>;\n    from: number;\n    to: number;\n  }) {\n    return BigIntArithmetics.fromBigInt(\n      (value.getBaseValue(\"bigint\") * toMultiplier(to)) / toMultiplier(from),\n      to,\n    );\n  }\n\n  constructor(params: SKBigIntParams) {\n    const value = getStringValue(params);\n    const isComplex = typeof params === \"object\";\n    this.decimal = isComplex ? params.decimal : undefined;\n\n    // use the multiplier to keep track of decimal point - defaults to 8 if lower than 8\n    this.decimalMultiplier =\n      isComplex && \"decimalMultiplier\" in params\n        ? params.decimalMultiplier\n        : toMultiplier(Math.max(getFloatDecimals(toSafeValue(value)), this.decimal || 0));\n    this.#setValue(value);\n  }\n\n  set(value: SKBigIntParams): this {\n    // @ts-expect-error False positive\n    return new this.constructor({ decimal: this.decimal, value, identifier: this.toString() });\n  }\n  add(...args: InitialisationValueType[]) {\n    return this.#arithmetics(\"add\", ...args);\n  }\n  sub(...args: InitialisationValueType[]) {\n    return this.#arithmetics(\"sub\", ...args);\n  }\n  mul(...args: InitialisationValueType[]) {\n    return this.#arithmetics(\"mul\", ...args);\n  }\n  div(...args: InitialisationValueType[]) {\n    return this.#arithmetics(\"div\", ...args);\n  }\n  gt(value: InitialisationValueType) {\n    return this.#comparison(\"gt\", value);\n  }\n  gte(value: InitialisationValueType) {\n    return this.#comparison(\"gte\", value);\n  }\n  lt(value: InitialisationValueType) {\n    return this.#comparison(\"lt\", value);\n  }\n  lte(value: InitialisationValueType) {\n    return this.#comparison(\"lte\", value);\n  }\n  eqValue(value: InitialisationValueType) {\n    return this.#comparison(\"eqValue\", value);\n  }\n\n  // @ts-expect-error False positive\n  getValue<T extends AllowedNumberTypes>(type: T): NumberPrimitivesType[T] {\n    const value = this.formatBigIntToSafeValue(\n      this.bigIntValue,\n      this.decimal || decimalFromMultiplier(this.decimalMultiplier),\n    );\n\n    switch (type) {\n      case \"number\":\n        return Number(value) as NumberPrimitivesType[T];\n      case \"string\":\n        return value as NumberPrimitivesType[T];\n      case \"bigint\":\n        return ((this.bigIntValue * 10n ** BigInt(this.decimal || 8n)) /\n          this.decimalMultiplier) as NumberPrimitivesType[T];\n    }\n  }\n\n  // @ts-expect-error\n  getBaseValue<T extends AllowedNumberTypes>(type: T): NumberPrimitivesType[T] {\n    const divisor = this.decimalMultiplier / toMultiplier(this.decimal || BaseDecimal.THOR);\n    const baseValue = this.bigIntValue / divisor;\n\n    switch (type) {\n      case \"number\":\n        return Number(baseValue) as NumberPrimitivesType[T];\n      case \"string\":\n        return baseValue.toString() as NumberPrimitivesType[T];\n      case \"bigint\":\n        return baseValue as NumberPrimitivesType[T];\n    }\n  }\n\n  getBigIntValue(value: InitialisationValueType, decimal?: number) {\n    if (!decimal && typeof value === \"object\") return value.bigIntValue;\n\n    const stringValue = getStringValue(value);\n    const safeValue = toSafeValue(stringValue);\n\n    if (safeValue === \"0\" || safeValue === \"undefined\") return 0n;\n    return this.#toBigInt(safeValue, decimal);\n  }\n\n  toSignificant(significantDigits = 6) {\n    const [int, dec] = this.getValue(\"string\").split(\".\");\n    const integer = int || \"\";\n    const decimal = dec || \"\";\n    const valueLength = Number.parseInt(integer) ? integer.length + decimal.length : decimal.length;\n\n    if (valueLength <= significantDigits) {\n      return this.getValue(\"string\");\n    }\n\n    if (integer.length >= significantDigits) {\n      return integer.slice(0, significantDigits).padEnd(integer.length, \"0\");\n    }\n\n    if (Number.parseInt(integer)) {\n      return `${integer}.${decimal.slice(0, significantDigits - integer.length)}`.padEnd(\n        significantDigits - integer.length,\n        \"0\",\n      );\n    }\n\n    const trimmedDecimal = Number.parseInt(decimal);\n    const slicedDecimal = `${trimmedDecimal}`.slice(0, significantDigits);\n\n    return `0.${slicedDecimal.padStart(\n      decimal.length - `${trimmedDecimal}`.length + slicedDecimal.length,\n      \"0\",\n    )}`;\n  }\n\n  toFixed(fixedDigits = 6) {\n    const [int, dec] = this.getValue(\"string\").split(\".\");\n    const integer = int || \"\";\n    const decimal = dec || \"\";\n\n    if (Number.parseInt(integer)) {\n      return `${integer}.${decimal.slice(0, fixedDigits)}`.padEnd(fixedDigits, \"0\");\n    }\n\n    const trimmedDecimal = Number.parseInt(decimal);\n    const slicedDecimal = `${trimmedDecimal}`.slice(0, fixedDigits);\n\n    return `0.${slicedDecimal.padStart(\n      decimal.length - `${trimmedDecimal}`.length + slicedDecimal.length,\n      \"0\",\n    )}`;\n  }\n\n  toAbbreviation(digits = 2) {\n    const value = this.getValue(\"number\");\n    const abbreviations = [\"\", \"K\", \"M\", \"B\", \"T\", \"Q\", \"Qi\", \"S\"];\n    const tier = Math.floor(Math.log10(Math.abs(value)) / 3);\n    const suffix = abbreviations[tier];\n\n    if (!suffix) return this.getValue(\"string\");\n\n    const scale = 10 ** (tier * 3);\n    const scaled = value / scale;\n\n    return `${scaled.toFixed(digits)}${suffix}`;\n  }\n\n  toCurrency(\n    currency = \"$\",\n    {\n      currencyPosition = \"start\",\n      decimal = 2,\n      decimalSeparator = \".\",\n      thousandSeparator = \",\",\n    } = {},\n  ) {\n    const value = this.getValue(\"number\");\n    const [int = \"\", dec = \"\"] = value.toFixed(6).split(\".\");\n    const integer = int.replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousandSeparator);\n\n    const parsedValue =\n      int || dec\n        ? int === \"0\"\n          ? `${Number.parseFloat(`0.${dec}`)}`.replace(\".\", decimalSeparator)\n          : `${integer}${Number.parseInt(dec) ? `${decimalSeparator}${dec.slice(0, decimal)}` : \"\"}`\n        : \"0.00\";\n\n    return `${currencyPosition === \"start\" ? currency : \"\"}${parsedValue}${\n      currencyPosition === \"end\" ? currency : \"\"\n    }`;\n  }\n\n  formatBigIntToSafeValue(value: bigint, decimal?: number) {\n    const bigIntDecimal = decimal || this.decimal || DEFAULT_DECIMAL;\n    const decimalToUseForConversion = Math.max(\n      bigIntDecimal,\n      decimalFromMultiplier(this.decimalMultiplier),\n    );\n    const isNegative = value < 0n;\n\n    const valueString = value.toString().substring(isNegative ? 1 : 0);\n    const padLength = decimalToUseForConversion - (valueString.length - 1);\n\n    const parsedValueString = padLength > 0 ? \"0\".repeat(padLength) + valueString : valueString;\n\n    const decimalIndex = parsedValueString.length - decimalToUseForConversion;\n    let decimalString = parsedValueString.slice(-decimalToUseForConversion);\n\n    // Check if we need to round up\n    if (Number.parseInt(decimalString[bigIntDecimal] || \"0\") >= 5) {\n      // Increment the last decimal place and slice off the rest\n      decimalString = `${decimalString.substring(0, bigIntDecimal - 1)}${(Number.parseInt(decimalString[bigIntDecimal - 1] || \"0\") + 1).toString()}`;\n    } else {\n      // Just slice off the extra digits\n      decimalString = decimalString.substring(0, bigIntDecimal);\n    }\n\n    return `${isNegative ? \"-\" : \"\"}${parsedValueString.slice(\n      0,\n      decimalIndex,\n    )}.${decimalString}`.replace(/\\.?0*$/, \"\");\n  }\n\n  #arithmetics(method: \"add\" | \"sub\" | \"mul\" | \"div\", ...args: InitialisationValueType[]): this {\n    const precisionDecimal = this.#retrievePrecisionDecimal(this, ...args);\n    const decimal = Math.max(precisionDecimal, decimalFromMultiplier(this.decimalMultiplier));\n    const precisionDecimalMultiplier = toMultiplier(decimal);\n\n    const result = args.reduce(\n      (acc: bigint, arg) => {\n        const value = this.getBigIntValue(arg, decimal);\n\n        switch (method) {\n          case \"add\":\n            return acc + value;\n          case \"sub\":\n            return acc - value;\n          /**\n           * Multiplication & division would end up with wrong result if we don't adjust the value\n           * 200000000n * 200000000n => 40000000000000000n\n           * 200000000n / 200000000n => 1n\n           * So we do the following:\n           * 200000000n * 200000000n = 40000000000000000n / 100000000n (decimals) => 400000000n\n           * (200000000n * 100000000n (decimals)) / 200000000n => 100000000n\n           */\n          case \"mul\":\n            return (acc * value) / precisionDecimalMultiplier;\n          case \"div\": {\n            if (value === 0n) throw new RangeError(\"Division by zero\");\n            return (acc * precisionDecimalMultiplier) / value;\n          }\n          default:\n            return acc;\n        }\n      },\n      //normalize is to precision multiplier base\n      (this.bigIntValue * precisionDecimalMultiplier) / this.decimalMultiplier,\n    );\n\n    const value = formatBigIntToSafeValue({\n      bigIntDecimal: decimal,\n      decimal,\n      value: result,\n    });\n\n    // @ts-expect-error False positive\n    return new this.constructor({\n      decimalMultiplier: toMultiplier(decimal),\n      decimal: this.decimal,\n      value,\n      identifier: this.toString(),\n    });\n  }\n\n  #comparison(method: \"gt\" | \"gte\" | \"lt\" | \"lte\" | \"eqValue\", ...args: InitialisationValueType[]) {\n    const decimal = this.#retrievePrecisionDecimal(this, ...args);\n    const value = this.getBigIntValue(args[0] || \"0\", decimal);\n    const compareToValue = this.getBigIntValue(this, decimal);\n\n    switch (method) {\n      case \"gt\":\n        return compareToValue > value;\n      case \"gte\":\n        return compareToValue >= value;\n      case \"lt\":\n        return compareToValue < value;\n      case \"lte\":\n        return compareToValue <= value;\n      case \"eqValue\":\n        return compareToValue === value;\n    }\n  }\n\n  #setValue(value: InitialisationValueType) {\n    const safeValue = toSafeValue(value) || \"0\";\n    this.bigIntValue = this.#toBigInt(safeValue);\n  }\n\n  #retrievePrecisionDecimal(...args: InitialisationValueType[]) {\n    const decimals = args\n      .map((arg) => {\n        const isObject = typeof arg === \"object\";\n        const value = isObject\n          ? arg.decimal || decimalFromMultiplier(arg.decimalMultiplier)\n          : getFloatDecimals(toSafeValue(arg));\n\n        return value;\n      })\n      .filter(Boolean) as number[];\n\n    return Math.max(...decimals, DEFAULT_DECIMAL);\n  }\n\n  #toBigInt(value: string, decimal?: number) {\n    const multiplier = decimal ? toMultiplier(decimal) : this.decimalMultiplier;\n    const padDecimal = decimalFromMultiplier(multiplier);\n    const [integerPart = \"\", decimalPart = \"\"] = value.split(\".\");\n\n    return BigInt(`${integerPart}${decimalPart.padEnd(padDecimal, \"0\")}`);\n  }\n}\n\nconst numberFormatter = Intl.NumberFormat(\"fullwide\", {\n  useGrouping: false,\n  maximumFractionDigits: 20,\n});\n\nfunction toSafeValue(value: InitialisationValueType) {\n  const parsedValue =\n    typeof value === \"number\" ? numberFormatter.format(value) : getStringValue(value);\n  const splitValue = `${parsedValue}`.replaceAll(\",\", \".\").split(\".\");\n\n  return splitValue.length > 1\n    ? `${splitValue.slice(0, -1).join(\"\")}.${splitValue.at(-1)}`\n    : splitValue[0] || \"0\";\n}\n\nfunction getFloatDecimals(value: string) {\n  const decimals = value.split(\".\")[1]?.length || 0;\n  return Math.max(decimals, DEFAULT_DECIMAL);\n}\n\nfunction getStringValue(param: SKBigIntParams) {\n  return typeof param === \"object\"\n    ? \"getValue\" in param\n      ? param.getValue(\"string\")\n      : param.value\n    : param;\n}\n",
    "type Options = Parameters<typeof fetch>[1] & {\n  headers?: Record<string, string>;\n  apiKey?: string;\n  method?: \"GET\" | \"POST\";\n  onError?: (error: NotWorth) => NotWorth;\n  responseHandler?: (response: NotWorth) => NotWorth;\n  searchParams?: Record<string, string>;\n  json?: unknown;\n};\n\nlet clientConfig: Options = {};\n\nexport const defaultRequestHeaders =\n  typeof window !== \"undefined\"\n    ? ({} as Record<string, string>)\n    : { referrer: \"https://sk.thorswap.net\", referer: \"https://sk.thorswap.net\" };\n\nexport function setRequestClientConfig({ apiKey, ...config }: Options) {\n  clientConfig = { ...config, apiKey };\n}\n\nasync function fetchWithConfig(url: string, options: Options) {\n  const { apiKey, ...config } = clientConfig;\n  const { searchParams, json, body } = options;\n  const headers = {\n    ...defaultRequestHeaders,\n    ...config.headers,\n    ...options.headers,\n    ...(json ? { \"Content-Type\": \"application/json\" } : {}),\n  } as Record<string, string>;\n\n  const bodyToSend = json ? JSON.stringify(json) : body;\n\n  const urlInstance = new URL(url);\n  if (searchParams) {\n    urlInstance.search = new URLSearchParams(searchParams).toString();\n  }\n\n  if (apiKey) headers[\"x-api-key\"] = apiKey;\n\n  try {\n    const response = await fetch(urlInstance.toString(), {\n      ...config,\n      ...options,\n      body: bodyToSend,\n      headers,\n    });\n    const body = await response.json();\n\n    if (options.responseHandler) return options.responseHandler(body);\n\n    return body;\n  } catch (error) {\n    if (options.onError) return options.onError(error);\n\n    console.error(error);\n  }\n}\n\nexport const RequestClient = {\n  get: async <T>(url: string, options?: Options): Promise<T> =>\n    fetchWithConfig(url, { ...options, method: \"GET\" }),\n  post: async <T>(url: string, options?: Options): Promise<T> =>\n    fetchWithConfig(url, { ...options, method: \"POST\" }),\n  extend: (options: Options) => {\n    const extendedConfig = { ...clientConfig, ...options };\n    return {\n      get: async <T>(url: string, options?: Options): Promise<T> =>\n        fetchWithConfig(url, { ...extendedConfig, ...options, method: \"GET\" }),\n      post: async <T>(url: string, options?: Options): Promise<T> =>\n        fetchWithConfig(url, { ...extendedConfig, ...options, method: \"POST\" }),\n      extend: (newOptions: Options) => RequestClient.extend({ ...extendedConfig, ...newOptions }),\n    };\n  },\n};\n",
    "import { AssetValue } from \"../modules/assetValue.ts\";\nimport { RequestClient } from \"../modules/requestClient.ts\";\nimport { BaseDecimal, Chain, ChainToRPC, type EVMChain, EVMChains } from \"../types/chains.ts\";\nimport type { RadixCoreStateResourceDTO } from \"../types/radix.ts\";\nimport type { TokenNames } from \"../types/tokens.ts\";\n\nconst getDecimalMethodHex = \"0x313ce567\";\n\nexport type CommonAssetString = (typeof CommonAssetStrings)[number] | Chain;\n\nexport type ConditionalAssetValueReturn<T extends boolean> = T extends true\n  ? Promise<AssetValue[]>\n  : AssetValue[];\n\nexport const CommonAssetStrings = [\n  `${Chain.Maya}.MAYA`,\n  `${Chain.Ethereum}.THOR`,\n  `${Chain.Ethereum}.vTHOR`,\n  `${Chain.Kujira}.USK`,\n] as const;\n\nconst getContractDecimals = async ({ chain, to }: { chain: EVMChain; to: string }) => {\n  try {\n    const { result } = await RequestClient.post<{ result: string }>(ChainToRPC[chain], {\n      headers: {\n        accept: \"*/*\",\n        \"content-type\": \"application/json\",\n        \"cache-control\": \"no-cache\",\n      },\n      body: JSON.stringify({\n        id: 44,\n        jsonrpc: \"2.0\",\n        method: \"eth_call\",\n        params: [{ to: to.toLowerCase(), data: getDecimalMethodHex }, \"latest\"],\n      }),\n    });\n\n    return Number.parseInt(BigInt(result || BaseDecimal[chain]).toString());\n  } catch (error) {\n    console.error(error);\n    return BaseDecimal[chain];\n  }\n};\n\nconst getRadixResourceDecimals = async ({ symbol }: { symbol: string }) => {\n  try {\n    const resourceAddress = symbol.split(\"-\")[1]?.toLowerCase();\n\n    const { manager } = await RequestClient.post<RadixCoreStateResourceDTO>(\n      `${ChainToRPC[Chain.Radix]}/state/resource`,\n      {\n        headers: {\n          Accept: \"*/*\",\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          network: \"mainnet\",\n          resource_address: resourceAddress,\n        }),\n      },\n    );\n\n    return manager.divisibility.value.divisibility;\n  } catch (error) {\n    console.error(error);\n    return BaseDecimal[Chain.Radix];\n  }\n};\n\nconst getETHAssetDecimal = (symbol: string) => {\n  if (symbol === Chain.Ethereum) return BaseDecimal.ETH;\n  const splitSymbol = symbol.split(\"-\");\n  const address =\n    splitSymbol.length === 1 ? undefined : splitSymbol[splitSymbol.length - 1]?.toLowerCase();\n\n  return address?.startsWith(\"0x\")\n    ? getContractDecimals({ chain: Chain.Ethereum, to: address })\n    : BaseDecimal.ETH;\n};\n\nconst getAVAXAssetDecimal = (symbol: string) => {\n  const splitSymbol = symbol.split(\"-\");\n  const address = splitSymbol.length === 1 ? undefined : splitSymbol[splitSymbol.length - 1];\n\n  return address?.startsWith(\"0x\")\n    ? getContractDecimals({ chain: Chain.Avalanche, to: address.toLowerCase() })\n    : BaseDecimal.AVAX;\n};\n\nconst getBSCAssetDecimal = (symbol: string) => {\n  if (symbol === Chain.BinanceSmartChain) return BaseDecimal.BSC;\n\n  return BaseDecimal.BSC;\n};\n\nconst getRadixAssetDecimal = (symbol: string) => {\n  if (symbol === Chain.Radix) return BaseDecimal.XRD;\n\n  return getRadixResourceDecimals({ symbol });\n};\n\nexport const getDecimal = ({ chain, symbol }: { chain: Chain; symbol: string }) => {\n  switch (chain) {\n    case Chain.Ethereum:\n      return getETHAssetDecimal(symbol);\n    case Chain.Avalanche:\n      return getAVAXAssetDecimal(symbol);\n    case Chain.BinanceSmartChain:\n      return getBSCAssetDecimal(symbol);\n    case Chain.Radix:\n      return getRadixAssetDecimal(symbol);\n    default:\n      return BaseDecimal[chain];\n  }\n};\n\nexport const getGasAsset = ({ chain }: { chain: Chain }) => {\n  switch (chain) {\n    case Chain.Arbitrum:\n    case Chain.Optimism:\n      return AssetValue.from({ asset: `${chain}.ETH` });\n    case Chain.Maya:\n      return AssetValue.from({ asset: `${chain}.CACAO` });\n    case Chain.Cosmos:\n      return AssetValue.from({ asset: `${chain}.ATOM` });\n    case Chain.BinanceSmartChain:\n      return AssetValue.from({ asset: `${chain}.BNB` });\n    case Chain.THORChain:\n      return AssetValue.from({ asset: `${chain}.RUNE` });\n\n    default:\n      return AssetValue.from({ asset: `${chain}.${chain}` });\n  }\n};\n\nexport const isGasAsset = ({ chain, symbol }: { chain: Chain; symbol: string }) => {\n  switch (chain) {\n    case Chain.Arbitrum:\n    case Chain.Optimism:\n      return symbol === \"ETH\";\n    case Chain.Maya:\n      return symbol === \"CACAO\";\n    case Chain.Cosmos:\n      return symbol === \"ATOM\";\n    case Chain.BinanceSmartChain:\n      return symbol === \"BNB\";\n    case Chain.THORChain:\n      return symbol === \"RUNE\";\n\n    default:\n      return symbol === chain;\n  }\n};\n\nexport const getCommonAssetInfo = (\n  assetString: CommonAssetString,\n): { identifier: string; decimal: number } => {\n  switch (assetString) {\n    case Chain.Arbitrum:\n    case Chain.Optimism:\n      return { identifier: `${assetString}.ETH`, decimal: BaseDecimal[assetString] };\n\n    case `${Chain.Ethereum}.THOR`:\n      return { identifier: \"ETH.THOR-0xa5f2211b9b8170f694421f2046281775e8468044\", decimal: 18 };\n    case `${Chain.Ethereum}.vTHOR`:\n      return { identifier: \"ETH.vTHOR-0x815c23eca83261b6ec689b60cc4a58b54bc24d8d\", decimal: 18 };\n    case Chain.Cosmos:\n      return { identifier: `${assetString}.ATOM`, decimal: BaseDecimal[assetString] };\n    case Chain.THORChain:\n      return { identifier: `${assetString}.RUNE`, decimal: BaseDecimal[assetString] };\n    case Chain.BinanceSmartChain:\n      return { identifier: `${assetString}.BNB`, decimal: BaseDecimal[assetString] };\n    case Chain.Maya:\n      return { identifier: `${assetString}.CACAO`, decimal: 10 };\n    case Chain.Radix:\n      return { identifier: `${Chain.Radix}.XRD`, decimal: BaseDecimal[assetString] };\n\n    case `${Chain.Maya}.MAYA`:\n      return { identifier: assetString, decimal: 4 };\n    case `${Chain.Kujira}.USK`:\n      return { identifier: assetString, decimal: 6 };\n\n    default:\n      return { identifier: `${assetString}.${assetString}`, decimal: BaseDecimal[assetString] };\n  }\n};\n\n// biome-ignore lint/complexity/noExcessiveCognitiveComplexity: TODO: Refactor\nexport const getAssetType = ({ chain, symbol }: { chain: Chain; symbol: string }) => {\n  if (symbol.includes(\"/\")) return \"Synth\";\n\n  switch (chain) {\n    case Chain.Cosmos:\n      return symbol === \"ATOM\" ? \"Native\" : Chain.Cosmos;\n    case Chain.Kujira:\n      return symbol === Chain.Kujira ? \"Native\" : Chain.Kujira;\n    case Chain.BinanceSmartChain:\n      return symbol === \"BNB\" ? \"Native\" : \"BEP20\";\n    case Chain.Ethereum:\n      return symbol === Chain.Ethereum ? \"Native\" : \"ERC20\";\n    case Chain.Avalanche:\n      return symbol === Chain.Avalanche ? \"Native\" : Chain.Avalanche;\n    case Chain.Polygon:\n      return symbol === Chain.Polygon ? \"Native\" : \"POLYGON\";\n    case Chain.Arbitrum:\n      return [Chain.Ethereum, Chain.Arbitrum].includes(symbol as Chain) ? \"Native\" : \"ARBITRUM\";\n    case Chain.Optimism:\n      return [Chain.Ethereum, Chain.Optimism].includes(symbol as Chain) ? \"Native\" : \"OPTIMISM\";\n    case Chain.Radix:\n      return symbol === Chain.Radix ? \"Native\" : \"RADIX\";\n\n    default:\n      return \"Native\";\n  }\n};\n\nexport const assetFromString = (assetString: string) => {\n  const [chain, ...symbolArray] = assetString.split(\".\") as [Chain, ...(string | undefined)[]];\n  const synth = assetString.includes(\"/\");\n  const symbol = symbolArray.join(\".\");\n  const splitSymbol = symbol?.split(\"-\");\n  const ticker = splitSymbol?.length\n    ? splitSymbol.length === 1\n      ? splitSymbol[0]\n      : splitSymbol.slice(0, -1).join(\"-\")\n    : undefined;\n\n  return { chain, symbol, ticker, synth };\n};\n\nconst potentialScamRegex = new RegExp(\n  /(.)\\1{6}|\\.ORG|\\.NET|\\.FINANCE|\\.COM|WWW|HTTP|\\\\\\\\|\\/\\/|[\\s$%:[\\]]/,\n  \"gmi\",\n);\n\nconst evmAssetHasAddress = (assetString: string) => {\n  const [chain, symbol] = assetString.split(\".\") as [EVMChain, string];\n  if (!EVMChains.includes(chain as EVMChain)) return true;\n  const splitSymbol = symbol.split(\"-\");\n  const address = splitSymbol.length === 1 ? undefined : splitSymbol[splitSymbol.length - 1];\n\n  return isGasAsset({ chain: chain as Chain, symbol }) || !!address;\n};\n\nexport const filterAssets = (\n  tokens: {\n    value: string;\n    decimal: number;\n    chain: Chain;\n    symbol: string;\n  }[],\n) =>\n  tokens.filter(({ chain, value, symbol }) => {\n    const assetString = `${chain}.${symbol}`;\n\n    return (\n      !potentialScamRegex.test(assetString) && evmAssetHasAddress(assetString) && value !== \"0\"\n    );\n  });\n\nexport async function findAssetBy(\n  params:\n    | { chain: EVMChain | Chain.Radix; contract: string }\n    | { identifier: `${Chain}.${string}` },\n) {\n  const tokenPackages = await import(\"@swapkit/tokens\");\n\n  for (const tokenList of Object.values(tokenPackages)) {\n    for (const { identifier, chain: tokenChain, ...rest } of tokenList.tokens) {\n      if (\"identifier\" in params && identifier === params.identifier) {\n        return identifier as TokenNames;\n      }\n\n      if (\n        \"address\" in rest &&\n        \"chain\" in params &&\n        tokenChain === params.chain &&\n        rest.address.toLowerCase() === params.contract.toLowerCase()\n      )\n        return identifier as TokenNames;\n    }\n  }\n\n  return;\n}\n",
    "import {\n  Chain,\n  type DerivationPathArray,\n  type EVMChain,\n  EVMChains,\n  NetworkDerivationPath,\n} from \"../types\";\n\ntype Params = {\n  chain: Chain;\n  index: number;\n  addressIndex?: number;\n  type?: \"legacy\" | \"ledgerLive\" | \"nativeSegwitMiddleAccount\" | \"segwit\";\n};\n\nconst updatedLastIndex = (path: DerivationPathArray, index: number) => {\n  const newPath = [...path.slice(0, path.length - 1), index];\n  return newPath as DerivationPathArray;\n};\n\nexport function derivationPathToString([network, chainId, account, change, index]:\n  | [number, number, number, number, number | undefined]\n  | DerivationPathArray) {\n  const shortPath = typeof index !== \"number\";\n\n  return `m/${network}'/${chainId}'/${account}'/${change}${shortPath ? \"\" : `/${index}`}`;\n}\n\nexport function getDerivationPathFor({ chain, index, addressIndex = 0, type }: Params) {\n  if (EVMChains.includes(chain as EVMChain)) {\n    if (type === \"legacy\") return [44, 60, 0, index] as DerivationPathArray;\n    if (type === \"ledgerLive\") return [44, 60, index, 0, addressIndex] as DerivationPathArray;\n    return updatedLastIndex(NetworkDerivationPath[chain], index);\n  }\n\n  const chainId = chain === Chain.Litecoin ? 2 : 0;\n\n  switch (type) {\n    case \"nativeSegwitMiddleAccount\":\n      return [84, chainId, index, 0, addressIndex] as DerivationPathArray;\n    case \"segwit\":\n      return [49, chainId, 0, 0, index] as DerivationPathArray;\n    case \"legacy\":\n      return [44, chainId, 0, 0, index] as DerivationPathArray;\n    default:\n      return updatedLastIndex(NetworkDerivationPath[chain], index);\n  }\n}\n\nexport function getWalletFormatFor(path: string) {\n  const [_, purpose, chainId] = path.split(\"/\").map((p) => Number.parseInt(p, 10));\n\n  if (chainId === 145) \"cashaddr\";\n\n  switch (purpose) {\n    case 44:\n      return \"legacy\";\n    case 49:\n      return \"p2sh\";\n    default:\n      return \"bech32\";\n  }\n}\n",
    "import { SwapKitNumber } from \"../index.ts\";\nimport { BaseDecimal } from \"../types/chains.ts\";\n\ntype ShareParams<T extends {}> = T & {\n  liquidityUnits: string;\n  poolUnits: string;\n};\n\ntype PoolParams = {\n  runeAmount: string;\n  assetAmount: string;\n  runeDepth: string;\n  assetDepth: string;\n};\n\n/**\n *  Ref: https://gitlab.com/thorchain/thornode/-/issues/657\n *  share = (s * A * (2 * T^2 - 2 * T * s + s^2))/T^3\n *  s = stakeUnits for member (after factoring in withdrawBasisPoints)\n *  T = totalPoolUnits for pool\n *  A = assetDepth to be withdrawn\n *\n *  Formula:\n *  share = (s * A * (2 * T^2 - 2 * T * s + s^2))/T^3\n *  (part1 * (part2 - part3 + part4)) / part5\n */\nexport function getAsymmetricRuneShare({\n  liquidityUnits,\n  poolUnits,\n  runeDepth,\n}: ShareParams<{ runeDepth: string }>) {\n  const s = toTCSwapKitNumber(liquidityUnits);\n  const T = toTCSwapKitNumber(poolUnits);\n  const A = toTCSwapKitNumber(runeDepth);\n\n  const part1 = s.mul(A);\n  const part2 = T.mul(T).mul(2);\n  const part3 = T.mul(s).mul(2);\n  const part4 = s.mul(s);\n  const part5 = T.mul(T).mul(T);\n\n  const numerator = part1.mul(part2.sub(part3).add(part4));\n\n  return numerator.div(part5);\n}\n\nexport function getAsymmetricAssetShare({\n  liquidityUnits,\n  poolUnits,\n  assetDepth,\n}: ShareParams<{ assetDepth: string }>) {\n  const s = toTCSwapKitNumber(liquidityUnits);\n  const T = toTCSwapKitNumber(poolUnits);\n  const A = toTCSwapKitNumber(assetDepth);\n\n  const part1 = s.mul(A);\n  const part2 = T.mul(T).mul(2);\n  const part3 = T.mul(s).mul(2);\n  const part4 = s.mul(s);\n  const numerator = part1.mul(part2.sub(part3).add(part4));\n  const part5 = T.mul(T).mul(T);\n\n  return numerator.div(part5);\n}\n\nexport function getAsymmetricRuneWithdrawAmount({\n  percent,\n  runeDepth,\n  liquidityUnits,\n  poolUnits,\n}: ShareParams<{ percent: number; runeDepth: string }>) {\n  return getAsymmetricRuneShare({ runeDepth, liquidityUnits, poolUnits }).mul(percent);\n}\n\nexport function getAsymmetricAssetWithdrawAmount({\n  percent,\n  assetDepth,\n  liquidityUnits,\n  poolUnits,\n}: ShareParams<{ percent: number; assetDepth: string }>) {\n  return getAsymmetricAssetShare({ assetDepth, liquidityUnits, poolUnits }).mul(percent);\n}\n\nfunction toTCSwapKitNumber(value: string) {\n  return SwapKitNumber.fromBigInt(BigInt(value), BaseDecimal.THOR);\n}\n\nexport function getSymmetricPoolShare({\n  liquidityUnits,\n  poolUnits,\n  runeDepth,\n  assetDepth,\n}: ShareParams<{\n  runeDepth: string;\n  assetDepth: string;\n}>) {\n  return {\n    assetAmount: toTCSwapKitNumber(assetDepth).mul(liquidityUnits).div(poolUnits),\n    runeAmount: toTCSwapKitNumber(runeDepth).mul(liquidityUnits).div(poolUnits),\n  };\n}\n\nexport function getSymmetricWithdraw({\n  liquidityUnits,\n  poolUnits,\n  runeDepth,\n  assetDepth,\n  percent,\n}: ShareParams<{\n  runeDepth: string;\n  assetDepth: string;\n  percent: number;\n}>) {\n  return Object.fromEntries(\n    Object.entries(getSymmetricPoolShare({ liquidityUnits, poolUnits, runeDepth, assetDepth })).map(\n      ([name, value]) => [name, value.mul(percent)],\n    ),\n  );\n}\n\nexport function getEstimatedPoolShare({\n  runeDepth,\n  poolUnits,\n  assetDepth,\n  liquidityUnits,\n  runeAmount,\n  assetAmount,\n}: ShareParams<{\n  runeAmount: string;\n  assetAmount: string;\n  runeDepth: string;\n  assetDepth: string;\n}>) {\n  const R = new SwapKitNumber({ value: runeDepth, decimal: 8 });\n  const A = new SwapKitNumber({ value: assetDepth, decimal: 8 });\n  const P = new SwapKitNumber({ value: poolUnits, decimal: 8 });\n  const runeAddAmount = new SwapKitNumber({ value: runeAmount, decimal: 8 });\n  const assetAddAmount = new SwapKitNumber({ value: assetAmount, decimal: 8 });\n\n  // liquidityUnits = P * (r*A + a*R + 2*r*a) / (r*A + a*R + 2*R*A)\n  const rA = runeAddAmount.mul(A);\n  const aR = assetAddAmount.mul(R);\n  const ra = runeAddAmount.mul(assetAddAmount);\n  const RA = R.mul(A);\n  const numerator = P.mul(rA.add(aR.add(ra.mul(2))));\n  const denominator = rA.add(aR.add(RA.mul(2)));\n  const liquidityUnitsAfterAdd = numerator.div(denominator);\n  const estimatedLiquidityUnits = toTCSwapKitNumber(liquidityUnits).add(liquidityUnitsAfterAdd);\n\n  if (liquidityUnitsAfterAdd.getBaseValue(\"number\") === 0) {\n    return estimatedLiquidityUnits.div(P).getBaseValue(\"number\");\n  }\n\n  // get pool units after add\n  const newPoolUnits = P.add(estimatedLiquidityUnits);\n\n  return estimatedLiquidityUnits.div(newPoolUnits).getBaseValue(\"number\");\n}\n\nexport function getLiquiditySlippage({\n  runeAmount,\n  assetAmount,\n  runeDepth,\n  assetDepth,\n}: PoolParams) {\n  if (runeAmount === \"0\" || assetAmount === \"0\" || runeDepth === \"0\" || assetDepth === \"0\")\n    return 0;\n  // formula: (t * R - T * r)/ (T*r + R*T)\n  const R = toTCSwapKitNumber(runeDepth);\n  const T = toTCSwapKitNumber(assetDepth);\n  const assetAddAmount = toTCSwapKitNumber(assetAmount);\n  const runeAddAmount = toTCSwapKitNumber(runeAmount);\n\n  const numerator = assetAddAmount.mul(R).sub(T.mul(runeAddAmount));\n  const denominator = T.mul(runeAddAmount).add(R.mul(T));\n\n  // set absolute value of percent, no negative allowed\n  return Math.abs(numerator.div(denominator).getBaseValue(\"number\"));\n}\n",
    "import { SwapKitError } from \"../modules/swapKitError\";\nimport { Chain } from \"../types/chains\";\nimport { MemoType } from \"../types/sdk\";\n\nexport function getMemoForLeaveAndBond({ type, address }: BondOrLeaveParams) {\n  return `${type}:${address}`;\n}\n\nexport function getMemoForUnbond({ address, unbondAmount }: UnbondParams) {\n  return `${MemoType.UNBOND}:${address}:${unbondAmount}`;\n}\n\n/**\n * Deposit\n */\nexport function getMemoForRunePoolDeposit(affiliate?: WithAffiliate<{}>) {\n  return addAffiliate(MemoType.RUNEPOOL_DEPOSIT, affiliate);\n}\n\nexport function getMemoForSaverDeposit({\n  chain,\n  symbol,\n  ...affiliate\n}: WithAffiliate<{ chain: Chain; symbol: string }>) {\n  return addAffiliate(`${MemoType.DEPOSIT}:${chain}/${symbol}`, affiliate);\n}\n\nexport function getMemoForDeposit({\n  chain,\n  symbol,\n  address,\n  ...affiliate\n}: WithAffiliate<{\n  chain: Chain;\n  symbol: string;\n  address?: string;\n}>) {\n  const poolIdentifier = getPoolIdentifier({ chain, symbol });\n  const addressPart = address ? `:${address}:` : \":\";\n\n  return addAffiliate(`${MemoType.DEPOSIT}:${poolIdentifier}${addressPart}`, affiliate);\n}\n\n/**\n * Withdraw\n */\nexport function getMemoForSaverWithdraw({\n  chain,\n  symbol,\n  basisPoints,\n}: { chain: Chain; symbol: string; basisPoints: number }) {\n  return `${MemoType.WITHDRAW}:${chain}/${symbol}:${basisPoints}`;\n}\n\nexport function getMemoForWithdraw({\n  chain,\n  symbol,\n  ticker,\n  basisPoints,\n  targetAsset,\n}: WithdrawParams) {\n  const shortenedSymbol =\n    chain === \"ETH\" && ticker !== \"ETH\" ? `${ticker}-${symbol.slice(-3)}` : symbol;\n  const targetPart = targetAsset ? `:${targetAsset}` : \"\";\n\n  return `${MemoType.WITHDRAW}:${chain}.${shortenedSymbol}:${basisPoints}${targetPart}`;\n}\n\nexport function getMemoForRunePoolWithdraw({\n  basisPoints,\n  ...affiliate\n}: WithAffiliate<{ basisPoints: number }>) {\n  return addAffiliate(`${MemoType.RUNEPOOL_WITHDRAW}:${basisPoints}`, affiliate);\n}\n\n/**\n * TNS\n */\nexport function getMemoForNameRegister({ name, chain, address, owner }: NameRegisterParams) {\n  const baseMemo = `${MemoType.NAME_REGISTER}:${name}:${chain}:${address}`;\n  const ownerAssignmentOrChangePart = owner ? `:${owner}` : \"\";\n\n  return `${baseMemo}${ownerAssignmentOrChangePart}`;\n}\n\nexport function getMemoForNamePreferredAssetRegister({\n  name,\n  chain,\n  asset,\n  payout,\n  owner,\n}: PreferredAssetRegisterParams) {\n  return `${MemoType.NAME_REGISTER}:${name}:${chain}:${payout}:${owner}:${asset}`;\n}\n\nexport function getMemoForLoan(\n  memoType: MemoType.OPEN_LOAN | MemoType.CLOSE_LOAN,\n  {\n    asset,\n    address,\n    minAmount,\n    ...affiliate\n  }: WithAffiliate<{ address: string; asset: string; minAmount?: string }>,\n) {\n  const baseMemo = `${memoType}:${asset}:${address}`;\n  const minAmountPart = minAmount ? `:${minAmount}` : \"\";\n\n  return addAffiliate(`${baseMemo}${minAmountPart}`, affiliate);\n}\n\n/**\n * Internal helpers\n */\nfunction addAffiliate(\n  memo: string,\n  { affiliateAddress, affiliateBasisPoints }: WithAffiliate<{}> = {},\n) {\n  const affiliatedMemo = `${memo}${affiliateAddress ? `:${affiliateAddress}:${affiliateBasisPoints || 0}` : \"\"}`;\n\n  return affiliatedMemo.endsWith(\":\") ? affiliatedMemo.slice(0, -1) : affiliatedMemo;\n}\n\nfunction getPoolIdentifier({\n  chain,\n  symbol,\n}: {\n  chain: Chain;\n  symbol: string;\n}) {\n  switch (chain) {\n    case Chain.Bitcoin:\n    case Chain.Dogecoin:\n    case Chain.Litecoin:\n      return chain.slice(0, 1).toLowerCase();\n    case Chain.BitcoinCash:\n      return \"c\";\n\n    default:\n      return `${chain}.${symbol}`;\n  }\n}\n\ntype WithAffiliate<T extends {}> = T & {\n  affiliateAddress?: string;\n  affiliateBasisPoints?: number;\n};\n\ntype BondOrLeaveParams = { type: MemoType.BOND | MemoType.LEAVE; address: string };\ntype UnbondParams = { address: string; unbondAmount: number };\ntype NameRegisterParams = { name: string; chain: string; address: string; owner?: string };\ntype PreferredAssetRegisterParams = {\n  name: string;\n  chain: Chain;\n  asset: string;\n  payout: string;\n  owner: string;\n};\ntype WithdrawParams = {\n  chain: Chain;\n  symbol: string;\n  ticker: string;\n  basisPoints: number;\n  targetAsset?: string;\n};\n\n/**\n * @deprecated - Use separate functions per each memo type like getMemoForDeposit, getMemoForWithdraw, etc.\n */\nexport const getMemoFor = <T extends MemoType>(memoType: T, options: NotWorth) => {\n  switch (memoType) {\n    case MemoType.LEAVE:\n    case MemoType.BOND: {\n      return getMemoForLeaveAndBond({ type: memoType, address: options?.address });\n    }\n\n    case MemoType.UNBOND: {\n      return getMemoForUnbond({ address: options?.address, unbondAmount: options?.unbondAmount });\n    }\n\n    case MemoType.NAME_REGISTER: {\n      return getMemoForNameRegister(options);\n    }\n\n    case MemoType.OPEN_LOAN:\n    case MemoType.CLOSE_LOAN: {\n      return getMemoForLoan(memoType, options);\n    }\n\n    case MemoType.DEPOSIT: {\n      const { chain, symbol, address, singleSide } = options;\n\n      if (singleSide) {\n        return getMemoForSaverDeposit({ chain, symbol });\n      }\n\n      return getMemoForDeposit({ chain, symbol, address });\n    }\n\n    case MemoType.WITHDRAW: {\n      const {\n        chain,\n        ticker,\n        symbol,\n        basisPoints,\n        targetAssetString: targetAsset,\n        singleSide,\n      } = options;\n\n      if (singleSide) {\n        return getMemoForSaverWithdraw({ chain, symbol, basisPoints });\n      }\n\n      return getMemoForWithdraw({\n        chain,\n        ticker,\n        symbol,\n        basisPoints,\n        targetAsset,\n      });\n    }\n\n    default:\n      throw new SwapKitError({\n        errorKey: \"helpers_invalid_memo_type\",\n        info: { memoType },\n      });\n  }\n};\n",
    "import type { BrowserProvider } from \"ethers\";\nimport { SwapKitError } from \"../modules/swapKitError\";\nimport {\n  Chain,\n  ChainId,\n  type EIP6963AnnounceProviderEvent,\n  type EIP6963Provider,\n  WalletOption,\n} from \"../types\";\n\nexport type EthereumWindowProvider = BrowserProvider & {\n  __XDEFI?: boolean;\n  isBraveWallet?: boolean;\n  isCoinbaseWallet?: boolean;\n  isMetaMask?: boolean;\n  isOkxWallet?: boolean;\n  isTrust?: boolean;\n  isTalisman?: boolean;\n  on: (event: string, callback?: () => void) => void;\n  overrideIsMetaMask?: boolean;\n  request: <T = unknown>(args: { method: string; params?: unknown[] }) => Promise<T>;\n  selectedProvider?: EthereumWindowProvider;\n};\n\ndeclare const window: {\n  ethereum: EthereumWindowProvider;\n  trustwallet: EthereumWindowProvider;\n  coinbaseWalletExtension: EthereumWindowProvider;\n  braveSolana: Todo;\n} & Window;\n\ntype NetworkParams = {\n  chainId: ChainId;\n  chainName: string;\n  nativeCurrency: {\n    name: string;\n    symbol: string;\n    decimals: number;\n  };\n  rpcUrls: string[];\n  blockExplorerUrls: string[];\n};\n\ntype ProviderRequestParams = {\n  provider?: BrowserProvider;\n  params?: Todo;\n  method:\n    | \"wallet_addEthereumChain\"\n    | \"wallet_switchEthereumChain\"\n    | \"eth_requestAccounts\"\n    | \"eth_sendTransaction\"\n    | \"eth_signTransaction\";\n};\n\nconst methodsToWrap = [\n  \"approve\",\n  \"approvedAmount\",\n  \"call\",\n  \"sendTransaction\",\n  \"transfer\",\n  \"isApproved\",\n  \"approvedAmount\",\n  \"EIP1193SendTransaction\",\n  \"getFeeData\",\n  \"broadcastTransaction\",\n  \"estimateCall\",\n  \"estimateGasLimit\",\n  \"estimateGasPrices\",\n  \"createContractTxObject\",\n];\n\nexport const wrapMethodWithNetworkSwitch = <T extends (...args: Todo[]) => Todo>(\n  func: T,\n  provider: BrowserProvider,\n  chainId: ChainId,\n) =>\n  (async (...args: Todo[]) => {\n    try {\n      await switchEVMWalletNetwork(provider, chainId);\n    } catch (error) {\n      throw new SwapKitError({\n        errorKey: \"helpers_failed_to_switch_network\",\n        info: { error },\n      });\n    }\n    return func(...args);\n  }) as unknown as T;\n\nconst providerRequest = ({ provider, params, method }: ProviderRequestParams) => {\n  if (!provider?.send) {\n    throw new SwapKitError(\"helpers_not_found_provider\");\n  }\n\n  const providerParams = params ? (Array.isArray(params) ? params : [params]) : [];\n  return provider.send(method, providerParams);\n};\n\nexport const prepareNetworkSwitch = <T extends { [key: string]: (...args: Todo[]) => Todo }>({\n  toolbox,\n  chainId,\n  provider = window.ethereum,\n}: {\n  toolbox: T;\n  chainId: ChainId;\n  provider?: BrowserProvider;\n}) => {\n  const wrappedMethods = methodsToWrap.reduce((object, methodName) => {\n    if (!toolbox[methodName]) return object;\n    const method = toolbox[methodName];\n\n    if (typeof method !== \"function\") return object;\n\n    return {\n      // biome-ignore lint/performance/noAccumulatingSpread: This is a valid use case\n      ...object,\n      [methodName]: wrapMethodWithNetworkSwitch<typeof method>(method, provider, chainId),\n    };\n  }, {});\n\n  return { ...toolbox, ...wrappedMethods };\n};\n\nexport const addEVMWalletNetwork = (provider: BrowserProvider, networkParams: NetworkParams) =>\n  providerRequest({ provider, method: \"wallet_addEthereumChain\", params: [networkParams] });\n\nexport const switchEVMWalletNetwork = (provider: BrowserProvider, chainId = ChainId.EthereumHex) =>\n  providerRequest({ provider, method: \"wallet_switchEthereumChain\", params: [{ chainId }] });\n\nexport const addAccountsChangedCallback = (callback: () => void) => {\n  window.ethereum?.on(\"accountsChanged\", () => callback());\n  // @ts-expect-error that should be implemented in xdefi and hooked up via swapkit core\n  window.xfi?.ethereum.on(\"accountsChanged\", () => callback());\n};\n\nexport const getETHDefaultWallet = () => {\n  const { isTrust, isBraveWallet, __XDEFI, overrideIsMetaMask, selectedProvider } =\n    window?.ethereum || {};\n  if (isTrust) return WalletOption.TRUSTWALLET_WEB;\n  if (isBraveWallet) return WalletOption.BRAVE;\n  if (overrideIsMetaMask && selectedProvider?.isCoinbaseWallet) return WalletOption.COINBASE_WEB;\n  if (__XDEFI) WalletOption.XDEFI;\n  return WalletOption.METAMASK;\n};\n\nexport const isDetected = (walletOption: WalletOption) => {\n  return listWeb3EVMWallets().includes(walletOption);\n};\n\nexport const listWeb3EVMWallets = () => {\n  const metamaskEnabled = window?.ethereum && !window.ethereum?.isBraveWallet;\n  // @ts-ignore that should be implemented in xdefi and hooked up via swapkit core\n  const xdefiEnabled = window?.xfi || window?.ethereum?.__XDEFI;\n  const braveEnabled = window?.ethereum?.isBraveWallet;\n  const trustEnabled = window?.ethereum?.isTrust || window?.trustwallet;\n  const coinbaseEnabled =\n    (window?.ethereum?.overrideIsMetaMask &&\n      window?.ethereum?.selectedProvider?.isCoinbaseWallet) ||\n    window?.coinbaseWalletExtension;\n\n  const wallets = [];\n  if (metamaskEnabled) wallets.push(WalletOption.METAMASK);\n  if (xdefiEnabled) wallets.push(WalletOption.XDEFI);\n  if (braveEnabled) wallets.push(WalletOption.BRAVE);\n  if (trustEnabled) wallets.push(WalletOption.TRUSTWALLET_WEB);\n  if (coinbaseEnabled) wallets.push(WalletOption.COINBASE_WEB);\n  if (okxMobileEnabled()) wallets.push(WalletOption.OKX_MOBILE);\n\n  return wallets;\n};\n\nexport function ensureEVMApiKeys({\n  chain,\n  covalentApiKey,\n  ethplorerApiKey,\n}: { chain: Chain; covalentApiKey?: string; ethplorerApiKey?: string }) {\n  const missingKey =\n    chain !== Chain.Ethereum && chain !== Chain.Sepolia && !covalentApiKey\n      ? \"covalentApiKey\"\n      : ethplorerApiKey\n        ? undefined\n        : \"ethplorerApiKey\";\n\n  if (missingKey) {\n    throw new SwapKitError({ errorKey: \"wallet_missing_api_key\", info: { missingKey } });\n  }\n\n  return { covalentApiKey: covalentApiKey as string, ethplorerApiKey: ethplorerApiKey as string };\n}\n\nexport function getEIP6963Wallets() {\n  const providers: EIP6963Provider[] = [];\n\n  function onAnnouncement(event: EIP6963AnnounceProviderEvent) {\n    if (providers.map((p) => p.info.uuid).includes(event.detail.info.uuid)) return;\n    providers.push(event.detail);\n  }\n\n  window.addEventListener(\"eip6963:announceProvider\", onAnnouncement);\n  window.dispatchEvent(new Event(\"eip6963:requestProvider\"));\n\n  function removeEIP6963EventListener() {\n    window.removeEventListener(\"eip6963:announceProvider\", onAnnouncement);\n  }\n\n  return { providers, removeEIP6963EventListener };\n}\n\nexport const okxMobileEnabled = () => {\n  const ua = navigator.userAgent;\n  const isIOS = /iphone|ipad|ipod|ios/i.test(ua);\n  const isAndroid = /android|XiaoMi|MiuiBrowser/i.test(ua);\n  const isMobile = isIOS || isAndroid;\n  const isOKApp = /OKApp/i.test(ua);\n\n  return isMobile && isOKApp;\n};\n\nexport const isWeb3Detected = () => typeof window.ethereum !== \"undefined\";\n",
    "import { BigIntArithmetics, formatBigIntToSafeValue } from \"./bigIntArithmetics.ts\";\n\nexport type SwapKitValueType = BigIntArithmetics | string | number;\n\nexport class SwapKitNumber extends BigIntArithmetics {\n  eq(value: SwapKitValueType) {\n    return this.eqValue(value);\n  }\n\n  static fromBigInt(value: bigint, decimal?: number) {\n    return new SwapKitNumber({\n      decimal,\n      value: formatBigIntToSafeValue({ value, bigIntDecimal: decimal, decimal }),\n    });\n  }\n}\n"
  ],
  "mappings": "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",
  "debugId": "C5683FDAC75AC31F64756E2164756E21",
  "names": []
}
{
  "version": 3,
  "sources": ["../src/index.ts", "../src/api/covalentApi.ts", "../src/api/ethplorerApi.ts", "../src/helpers.ts", "../src/provider.ts", "../src/toolbox/BaseEVMToolbox.ts", "../src/types/clientTypes.ts", "../src/toolbox/arb.ts", "../src/toolbox/avax.ts", "../src/toolbox/bsc.ts", "../src/toolbox/eth.ts", "../src/toolbox/getToolboxByChain.ts", "../src/toolbox/matic.ts", "../src/toolbox/op.ts", "../src/contracts/op/gasOracle.ts", "../src/toolbox/sep.ts"],
  "sourcesContent": [
    "export {\n  AbstractSigner,\n  BrowserProvider,\n  HDNodeWallet,\n  JsonRpcProvider,\n  Signature,\n  Transaction,\n  type Eip1193Provider,\n  type Provider,\n  type TransactionRequest,\n} from \"ethers\";\n\n/**\n * Package\n */\nexport * from \"./api/covalentApi.ts\";\nexport * from \"./api/ethplorerApi.ts\";\nexport * from \"./helpers.ts\";\nexport * from \"./provider.ts\";\nexport * from \"./toolbox/BaseEVMToolbox.ts\";\nexport * from \"./types/clientTypes.ts\";\nexport * from \"./types/ethplorer-api-types.ts\";\n\n/**\n * Toolboxes\n */\nexport * from \"./toolbox/arb.ts\";\nexport * from \"./toolbox/avax.ts\";\nexport * from \"./toolbox/bsc.ts\";\nexport * from \"./toolbox/eth.ts\";\nexport * from \"./toolbox/getToolboxByChain.ts\";\nexport * from \"./toolbox/matic.ts\";\nexport * from \"./toolbox/op.ts\";\nexport * from \"./toolbox/sep.ts\";\n",
    "import {\n  type ChainId,\n  ChainIdToChain,\n  RequestClient,\n  formatBigIntToSafeValue,\n} from \"@swapkit/helpers\";\n\ntype CovalentBalanceResponse = {\n  address: string;\n  updated_at: string;\n  next_updated_at: string;\n  quote_currency: string;\n  items: {\n    contract_decimals: number;\n    contract_name: string;\n    contract_ticker_symbol: string;\n    contract_address: string;\n    logo_url: string;\n    last_transferred_at: string;\n    native_token: boolean;\n    type: string;\n    balance: number;\n    balance_24h: number;\n    quote_rate: number;\n    quote_rate_24h: number;\n    quote: number;\n    quote_24h: number;\n  }[];\n};\n\nexport const covalentApi = ({ apiKey, chainId }: { apiKey: string; chainId: ChainId }) => ({\n  getBalance: async (address: string) => {\n    const { data } = await RequestClient.get<{ data: CovalentBalanceResponse }>(\n      `https://api.covalenthq.com/v1/${chainId}/address/${address}/balances_v2/`,\n      { searchParams: { key: apiKey } },\n    );\n\n    return (data?.items || []).map(\n      ({ balance, contract_decimals, contract_ticker_symbol, contract_address, native_token }) => ({\n        value: formatBigIntToSafeValue({\n          value: BigInt(balance),\n          decimal: contract_decimals,\n          bigIntDecimal: contract_decimals,\n        }),\n        decimal: contract_decimals,\n        chain: ChainIdToChain[chainId],\n        symbol: `${contract_ticker_symbol}${native_token ? \"\" : `-${contract_address}`}`,\n      }),\n    );\n  },\n});\n\nexport type CovalentApiType = ReturnType<typeof covalentApi>;\n",
    "import { Chain, RequestClient, formatBigIntToSafeValue } from \"@swapkit/helpers\";\n\nimport type { AddressInfo } from \"../types/ethplorer-api-types.ts\";\n\nexport const ethplorerApi = (apiKey = \"freekey\", sepolia = false) => ({\n  getBalance: async (address: string) => {\n    const baseUrl = sepolia ? \"https://sepolia-api.ethplorer.io\" : \"https://api.ethplorer.io\";\n    const chain = sepolia ? Chain.Sepolia : Chain.Ethereum;\n\n    const { tokens = [] } = await RequestClient.get<AddressInfo>(\n      `${baseUrl}/getAddressInfo/${address}`,\n      { searchParams: { apiKey } },\n    );\n\n    return tokens\n      .filter(({ tokenInfo: { symbol }, rawBalance }) => symbol && rawBalance !== \"0\")\n      .map(({ tokenInfo: { symbol, decimals, address: tokenAddress }, rawBalance }) => ({\n        chain,\n        symbol: tokenAddress ? `${symbol}-${tokenAddress}` : symbol,\n        value: formatBigIntToSafeValue({\n          value: BigInt(rawBalance),\n          decimal: Number.parseInt(decimals),\n          bigIntDecimal: Number.parseInt(decimals),\n        }),\n        decimal: Number.parseInt(decimals),\n      }));\n  },\n});\n\nexport type EthplorerApiType = ReturnType<typeof ethplorerApi>;\n",
    "import {\n  AssetValue,\n  BaseDecimal,\n  type EVMChain,\n  FeeOption,\n  SwapKitNumber,\n  filterAssets,\n  formatBigIntToSafeValue,\n  isGasAsset,\n} from \"@swapkit/helpers\";\nimport type { BrowserProvider, JsonRpcProvider, Provider } from \"ethers\";\n\nimport {\n  type CovalentApiType,\n  type EIP1559TxParams,\n  type EVMMaxSendableAmountsParams,\n  type EthplorerApiType,\n  estimateGasPrices,\n} from \"./index.ts\";\n\nexport const estimateMaxSendableAmount = async ({\n  toolbox,\n  from,\n  memo = \"\",\n  feeOptionKey = FeeOption.Fastest,\n  assetValue,\n  abi,\n  funcName,\n  funcParams,\n  contractAddress,\n  txOverrides,\n}: EVMMaxSendableAmountsParams): Promise<AssetValue> => {\n  const balance = (await toolbox.getBalance(from)).find(({ symbol, chain }) =>\n    assetValue ? symbol === assetValue.symbol : symbol === AssetValue.from({ chain })?.symbol,\n  );\n\n  const gasRate = (await toolbox.estimateGasPrices())[feeOptionKey];\n\n  if (!balance) return AssetValue.from({ chain: assetValue.chain });\n\n  if (assetValue && (balance.chain !== assetValue.chain || balance.symbol !== assetValue?.symbol)) {\n    return balance;\n  }\n\n  const gasLimit =\n    abi && funcName && funcParams && contractAddress\n      ? await toolbox.estimateCall({\n          contractAddress,\n          abi,\n          funcName,\n          funcParams,\n          txOverrides,\n        })\n      : await toolbox.estimateGasLimit({\n          from,\n          recipient: from,\n          memo,\n          assetValue,\n        });\n\n  const isFeeEIP1559Compatible = \"maxFeePerGas\" in gasRate;\n  const isFeeEVMLegacyCompatible = \"gasPrice\" in gasRate;\n\n  if (!(isFeeEVMLegacyCompatible || isFeeEIP1559Compatible)) {\n    throw new Error(\"Could not fetch fee data\");\n  }\n\n  const fee =\n    gasLimit *\n    (isFeeEIP1559Compatible\n      ? (gasRate.maxFeePerGas || 1n) + (gasRate.maxPriorityFeePerGas || 1n)\n      : gasRate.gasPrice);\n  const maxSendableAmount = SwapKitNumber.fromBigInt(balance.getBaseValue(\"bigint\")).sub(\n    fee.toString(),\n  );\n\n  return AssetValue.from({ chain: balance.chain, value: maxSendableAmount.getValue(\"string\") });\n};\n\nexport const toHexString = (value: bigint) => (value > 0n ? `0x${value.toString(16)}` : \"0x0\");\n\nexport const getBalance = async ({\n  provider,\n  api,\n  address,\n  chain,\n  potentialScamFilter,\n}: {\n  provider: JsonRpcProvider | BrowserProvider;\n  api: CovalentApiType | EthplorerApiType;\n  address: string;\n  chain: EVMChain;\n  potentialScamFilter?: boolean;\n}) => {\n  const tokenBalances = await api.getBalance(address);\n  const evmGasTokenBalance = await provider.getBalance(address);\n  const balances = [\n    {\n      chain,\n      symbol: AssetValue.from({ chain }).symbol,\n      value: formatBigIntToSafeValue({\n        value: BigInt(evmGasTokenBalance),\n        decimal: 18,\n        bigIntDecimal: 18,\n      }),\n      decimal: BaseDecimal[chain],\n    },\n    ...tokenBalances.filter((token) => !isGasAsset(token)),\n  ];\n\n  const filteredBalances = potentialScamFilter ? filterAssets(balances) : balances;\n\n  return filteredBalances.map(\n    ({ symbol, value, decimal }) =>\n      new AssetValue({\n        decimal: decimal || BaseDecimal[chain],\n        value,\n        identifier: `${chain}.${symbol}`,\n      }),\n  );\n};\n\nexport const estimateTransactionFee = async (\n  txObject: EIP1559TxParams,\n  // biome-ignore lint/style/useDefaultParameterLast: Should only be used through wrapped toolboxes\n  feeOption: FeeOption = FeeOption.Fast,\n  chain: EVMChain,\n  provider: Provider | BrowserProvider,\n  isEIP1559Compatible = true,\n) => {\n  const gasPrices = (await estimateGasPrices(provider, isEIP1559Compatible))[feeOption];\n  const gasLimit = await provider.estimateGas(txObject);\n  const assetValue = AssetValue.from({ chain });\n\n  if (!isEIP1559Compatible && gasPrices.gasPrice) {\n    return assetValue.set(\n      SwapKitNumber.fromBigInt(gasPrices.gasPrice * gasLimit, assetValue.decimal),\n    );\n  }\n\n  if (gasPrices.maxFeePerGas && gasPrices.maxPriorityFeePerGas) {\n    return assetValue.set(\n      SwapKitNumber.fromBigInt(\n        (gasPrices.maxFeePerGas + gasPrices.maxPriorityFeePerGas) * gasLimit,\n        assetValue.decimal,\n      ),\n    );\n  }\n\n  // TODO:\n  throw new Error(\"No gas price found\");\n};\n",
    "import { ChainToRPC, type EVMChain } from \"@swapkit/helpers\";\nimport { JsonRpcProvider } from \"ethers/providers\";\n\nexport const getProvider = (chain: EVMChain, customUrl?: string) => {\n  return new JsonRpcProvider(customUrl || ChainToRPC[chain]);\n};\n",
    "import {\n  type Asset,\n  type AssetValue,\n  Chain,\n  ContractAddress,\n  type EVMChain,\n  FeeOption,\n  SwapKitError,\n  SwapKitNumber,\n  type WalletTxParams,\n  erc20ABI,\n  isGasAsset,\n} from \"@swapkit/helpers\";\nimport type {\n  ContractTransaction,\n  Fragment,\n  HDNodeWallet,\n  JsonFragment,\n  JsonRpcSigner,\n  Provider,\n  Signer,\n} from \"ethers\";\nimport { BrowserProvider, Contract, Interface, hexlify, toUtf8Bytes } from \"ethers\";\nimport { getAddress } from \"ethers/address\";\nimport { MaxInt256 } from \"ethers/constants\";\n\nimport {\n  type ARBToolbox,\n  type AVAXToolbox,\n  type BSCToolbox,\n  type ETHToolbox,\n  type MATICToolbox,\n  type OPToolbox,\n  type SEPToolbox,\n  toHexString,\n} from \"../index.ts\";\nimport type {\n  ApproveParams,\n  ApprovedParams,\n  CallParams,\n  EIP1559TxParams,\n  EVMTxParams,\n  EstimateCallParams,\n  IsApprovedParams,\n  LegacyEVMTxParams,\n  TransferParams,\n} from \"../types/clientTypes.ts\";\n\nexport const MAX_APPROVAL = MaxInt256;\n\nconst baseAssetAddress: Record<EVMChain, string> = {\n  [Chain.Arbitrum]: ContractAddress.ARB,\n  [Chain.Ethereum]: ContractAddress.ETH,\n  [Chain.Sepolia]: ContractAddress.SEP,\n  [Chain.Avalanche]: ContractAddress.AVAX,\n  [Chain.BinanceSmartChain]: ContractAddress.BSC,\n  [Chain.Polygon]: ContractAddress.MATIC,\n  [Chain.Optimism]: ContractAddress.OP,\n};\n\nconst stateMutable = [\"payable\", \"nonpayable\"];\n// const nonStateMutable = ['view', 'pure'];\n\nconst isEIP1559Transaction = (tx: EVMTxParams) =>\n  (tx as EIP1559TxParams).type === 2 ||\n  !!(tx as EIP1559TxParams).maxFeePerGas ||\n  !!(tx as EIP1559TxParams).maxPriorityFeePerGas;\n\nexport const isBrowserProvider = (provider: Todo) => provider instanceof BrowserProvider;\nexport const createContract = (\n  address: string,\n  abi: readonly (JsonFragment | Fragment)[],\n  provider: Provider,\n) => {\n  return new Contract(address, Interface.from(abi), provider);\n};\n\nconst validateAddress = (address: string) => {\n  try {\n    getAddress(address);\n    return true;\n  } catch (_error) {\n    return false;\n  }\n};\n\nexport const isStateChangingCall = (abi: readonly JsonFragment[], functionName: string) => {\n  const abiFragment = abi.find((fragment: Todo) => fragment.name === functionName) as Todo;\n  if (!abiFragment) throw new SwapKitError(\"toolbox_evm_no_abi_fragment\", { functionName });\n  return abiFragment.stateMutability && stateMutable.includes(abiFragment.stateMutability);\n};\n\nexport type WithSigner<T> = T & { signer?: Signer };\n\n/**\n * @info call contract function\n * When using this method to make a non state changing call to the blockchain, like a isApproved call,\n * the signer needs to be set to undefined\n */\nconst call = async <T>(\n  provider: Provider,\n  isEIP1559Compatible: boolean,\n  {\n    callProvider,\n    signer,\n    contractAddress,\n    abi,\n    funcName,\n    funcParams = [],\n    txOverrides,\n    feeOption = FeeOption.Fast,\n  }: WithSigner<CallParams>,\n): Promise<T> => {\n  const contractProvider = callProvider || provider;\n  if (!contractAddress) throw new Error(\"contractAddress must be provided\");\n\n  const isStateChanging = isStateChangingCall(abi, funcName);\n\n  if (isStateChanging && isBrowserProvider(contractProvider) && signer) {\n    const txObject = await createContractTxObject(contractProvider, {\n      contractAddress,\n      abi,\n      funcName,\n      funcParams,\n      txOverrides,\n    });\n\n    return EIP1193SendTransaction(contractProvider, txObject) as Promise<T>;\n  }\n  const contract = createContract(contractAddress, abi, contractProvider);\n\n  // only use signer if the contract function is state changing\n  if (isStateChanging) {\n    if (!signer) throw new SwapKitError(\"toolbox_evm_no_signer\");\n\n    const address = txOverrides?.from || (await signer.getAddress());\n\n    if (!address) throw new SwapKitError(\"toolbox_evm_no_signer_address\");\n\n    const connectedContract = contract.connect(signer);\n    const { maxFeePerGas, maxPriorityFeePerGas, gasPrice } = (\n      await estimateGasPrices(provider, isEIP1559Compatible)\n    )[feeOption];\n\n    const gasLimit = await contract.getFunction(funcName).estimateGas(...funcParams, txOverrides);\n\n    // @ts-expect-error\n    const result = await connectedContract[funcName](...funcParams, {\n      ...txOverrides,\n      gasLimit,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      gasPrice,\n      /**\n       * nonce must be set due to a possible bug with ethers.js,\n       * expecting a synchronous nonce while the JsonRpcProvider delivers Promise\n       */\n      nonce: txOverrides?.nonce || (await contractProvider.getTransactionCount(address)),\n    });\n\n    return typeof result?.hash === \"string\" ? result?.hash : result;\n  }\n\n  const result = await contract[funcName]?.(...funcParams);\n\n  return typeof result?.hash === \"string\" ? result?.hash : result;\n};\n\nexport const createContractTxObject = async (\n  provider: Provider,\n  { contractAddress, abi, funcName, funcParams = [], txOverrides }: CallParams,\n) =>\n  createContract(contractAddress, abi, provider)\n    .getFunction(funcName)\n    .populateTransaction(...funcParams.concat(txOverrides).filter((p) => typeof p !== \"undefined\"));\n\nconst approvedAmount = async (\n  provider: Provider,\n  { assetAddress, spenderAddress, from }: IsApprovedParams,\n) =>\n  await call<bigint>(provider, true, {\n    contractAddress: assetAddress,\n    abi: erc20ABI as Todo,\n    funcName: \"allowance\",\n    funcParams: [from, spenderAddress],\n  });\n\nconst isApproved = async (\n  provider: Provider,\n  { assetAddress, spenderAddress, from, amount = MAX_APPROVAL }: IsApprovedParams,\n) => {\n  return SwapKitNumber.fromBigInt(\n    await approvedAmount(provider, { assetAddress, spenderAddress, from }),\n  ).gte(SwapKitNumber.fromBigInt(BigInt(amount)));\n};\n\nconst approve = async (\n  provider: Provider,\n  {\n    assetAddress,\n    spenderAddress,\n    feeOptionKey = FeeOption.Fast,\n    amount,\n    gasLimitFallback,\n    from,\n    nonce,\n  }: ApproveParams,\n  signer?: Signer,\n  isEIP1559Compatible = true,\n) => {\n  const funcParams = [spenderAddress, BigInt(amount || MAX_APPROVAL)];\n  const txOverrides = { from };\n\n  const functionCallParams = {\n    contractAddress: assetAddress,\n    abi: erc20ABI,\n    funcName: \"approve\",\n    funcParams,\n    signer,\n    txOverrides,\n  };\n\n  if (isBrowserProvider(provider)) {\n    return EIP1193SendTransaction(\n      provider,\n      await createContractTxObject(provider, functionCallParams),\n    );\n  }\n\n  return call<string>(provider, isEIP1559Compatible, {\n    ...functionCallParams,\n    funcParams,\n    txOverrides: {\n      from,\n      nonce,\n      gasLimit: gasLimitFallback ? BigInt(gasLimitFallback.toString()) : undefined,\n    },\n    feeOption: feeOptionKey,\n  });\n};\n\nconst transfer = async (\n  provider: Provider | BrowserProvider,\n  {\n    assetValue,\n    memo,\n    recipient,\n    feeOptionKey = FeeOption.Fast,\n    data,\n    from: fromOverride,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    gasPrice,\n    ...tx\n  }: TransferParams,\n  signer?: Signer,\n  isEIP1559Compatible = true,\n) => {\n  const txAmount = assetValue.getBaseValue(\"bigint\");\n  const chain = assetValue.chain as EVMChain;\n\n  const from = fromOverride || (await signer?.getAddress());\n\n  if (!from) throw new SwapKitError(\"toolbox_evm_no_from_address\");\n\n  if (!assetValue.isGasAsset) {\n    const contractAddress = getTokenAddress(assetValue, chain);\n    if (!contractAddress) throw new SwapKitError(\"toolbox_evm_no_contract_address\");\n\n    // Transfer ERC20\n    return call<string>(provider, isEIP1559Compatible, {\n      signer,\n      contractAddress,\n      abi: erc20ABI,\n      funcName: \"transfer\",\n      funcParams: [recipient, txAmount],\n      txOverrides: { from, maxFeePerGas, maxPriorityFeePerGas, gasPrice },\n      feeOption: feeOptionKey,\n    });\n  }\n  // Transfer ETH\n  const txObject = {\n    ...tx,\n    from,\n    to: recipient,\n    value: txAmount,\n    data: data || hexlify(toUtf8Bytes(memo || \"\")),\n  };\n\n  return sendTransaction(provider, txObject, feeOptionKey, signer, isEIP1559Compatible);\n};\n\nexport const estimateGasPrices = async (provider: Provider, isEIP1559Compatible = true) => {\n  try {\n    const { maxFeePerGas, maxPriorityFeePerGas, gasPrice } = await provider.getFeeData();\n\n    if (isEIP1559Compatible) {\n      if (!(maxFeePerGas && maxPriorityFeePerGas))\n        throw new SwapKitError(\"toolbox_evm_no_fee_data\");\n\n      return {\n        [FeeOption.Average]: { maxFeePerGas, maxPriorityFeePerGas },\n        [FeeOption.Fast]: {\n          maxFeePerGas: (maxFeePerGas * 15n) / 10n,\n          maxPriorityFeePerGas: (maxPriorityFeePerGas * 15n) / 10n,\n        },\n        [FeeOption.Fastest]: {\n          maxFeePerGas: maxFeePerGas * 2n,\n          maxPriorityFeePerGas: maxPriorityFeePerGas * 2n,\n        },\n      };\n    }\n    if (!gasPrice) throw new SwapKitError(\"toolbox_evm_no_gas_price\");\n\n    return {\n      [FeeOption.Average]: { gasPrice },\n      [FeeOption.Fast]: { gasPrice: (gasPrice * 15n) / 10n },\n      [FeeOption.Fastest]: { gasPrice: gasPrice * 2n },\n    };\n  } catch (error) {\n    throw new Error(\n      `Failed to estimate gas price: ${(error as Todo).msg ?? (error as Todo).toString()}`,\n    );\n  }\n};\n\nconst estimateCall = (\n  provider: Provider,\n  {\n    signer,\n    contractAddress,\n    abi,\n    funcName,\n    funcParams = [],\n    txOverrides,\n  }: WithSigner<EstimateCallParams>,\n) => {\n  if (!contractAddress) throw new SwapKitError(\"toolbox_evm_no_contract_address\");\n\n  const contract = createContract(contractAddress, abi, provider);\n  return signer\n    ? contract\n        .connect(signer)\n        .getFunction(funcName)\n        .estimateGas(...funcParams, txOverrides)\n    : contract.getFunction(funcName).estimateGas(...funcParams, txOverrides);\n};\n\nconst estimateGasLimit = (\n  provider: Provider,\n  {\n    assetValue,\n    recipient,\n    memo,\n    from,\n    funcName,\n    funcParams,\n    txOverrides,\n    signer,\n  }: WalletTxParams & {\n    assetValue: AssetValue;\n    funcName?: string;\n    funcParams?: unknown[];\n    signer?: Signer;\n    txOverrides?: EVMTxParams;\n  },\n) => {\n  // const value = assetValue.getBaseValue(\"bigint\");\n  const value = assetValue.bigIntValue;\n\n  const assetAddress = assetValue.isGasAsset\n    ? null\n    : getTokenAddress(assetValue, assetValue.chain as EVMChain);\n\n  if (assetAddress && funcName) {\n    // ERC20 gas estimate\n    return estimateCall(provider, {\n      contractAddress: assetAddress,\n      abi: erc20ABI,\n      funcName,\n      funcParams,\n      txOverrides,\n      signer,\n    });\n  }\n\n  return provider.estimateGas({\n    from,\n    to: recipient,\n    value,\n    data: memo ? hexlify(toUtf8Bytes(memo)) : undefined,\n  });\n};\n\nconst sendTransaction = async (\n  provider: Provider | BrowserProvider,\n  tx: EVMTxParams,\n  feeOptionKey: FeeOption = FeeOption.Fast,\n  signer?: Signer,\n  isEIP1559Compatible = true,\n  // biome-ignore lint/complexity/noExcessiveCognitiveComplexity: TODO: refactor\n) => {\n  if (!signer) throw new SwapKitError(\"toolbox_evm_no_signer\");\n  const { from, to, data, value, ...transaction } = tx;\n  if (!to) throw new SwapKitError(\"toolbox_evm_no_to_address\");\n\n  const parsedTxObject = {\n    ...transaction,\n    data: data || \"0x\",\n    to,\n    from,\n    value: BigInt(value || 0),\n  };\n\n  // early return to skip gas estimation if provider is EIP-1193\n  if (isBrowserProvider(provider)) {\n    return EIP1193SendTransaction(provider, parsedTxObject);\n  }\n\n  const address = from || (await signer.getAddress());\n  const nonce = tx.nonce || (await provider.getTransactionCount(address));\n  const chainId = (await provider.getNetwork()).chainId;\n\n  const isEIP1559 = isEIP1559Transaction(parsedTxObject) || isEIP1559Compatible;\n\n  const feeData =\n    (isEIP1559 &&\n      !(\n        (parsedTxObject as EIP1559TxParams).maxFeePerGas &&\n        (parsedTxObject as EIP1559TxParams).maxPriorityFeePerGas\n      )) ||\n    !(parsedTxObject as LegacyEVMTxParams).gasPrice\n      ? Object.entries(\n          (await estimateGasPrices(provider, isEIP1559Compatible))[feeOptionKey],\n        ).reduce(\n          // biome-ignore lint/performance/noAccumulatingSpread: this is a small object\n          (acc, [k, v]) => ({ ...acc, [k]: toHexString(BigInt(v)) }),\n          {} as {\n            maxFeePerGas?: string;\n            maxPriorityFeePerGas?: string;\n            gasPrice?: string;\n          },\n        )\n      : {};\n  let gasLimit: string;\n  try {\n    gasLimit = toHexString(\n      parsedTxObject.gasLimit || ((await provider.estimateGas(parsedTxObject)) * 11n) / 10n,\n    );\n  } catch (error) {\n    throw new SwapKitError(\"toolbox_evm_error_estimating_gas_limit\", { error });\n  }\n\n  try {\n    const txObject = {\n      ...parsedTxObject,\n      chainId,\n      type: isEIP1559 ? 2 : 0,\n      gasLimit,\n      nonce,\n      ...feeData,\n    };\n\n    try {\n      const response = await signer.sendTransaction(txObject);\n      return response.hash;\n    } catch (_error) {\n      const txHex = await signer.signTransaction({\n        ...txObject,\n        from: address,\n      });\n      const response = await provider.broadcastTransaction(txHex);\n      return response.hash;\n    }\n  } catch (error) {\n    throw new SwapKitError(\"toolbox_evm_error_sending_transaction\", { error });\n  }\n};\n\n/**\n * Exported helper functions\n */\nexport const toChecksumAddress = (address: string) => getAddress(address);\n\nexport const EIP1193SendTransaction = (\n  provider: Provider | BrowserProvider,\n  { from, to, data, value }: EVMTxParams | ContractTransaction,\n): Promise<string> => {\n  if (!isBrowserProvider(provider))\n    throw new SwapKitError(\"toolbox_evm_provider_not_eip1193_compatible\");\n  return (provider as BrowserProvider).send(\"eth_sendTransaction\", [\n    { value: toHexString(BigInt(value || 0)), from, to, data } as Todo,\n  ]);\n};\n\nexport const getChecksumAddressFromAsset = (asset: Asset, chain: EVMChain) => {\n  const assetAddress = getTokenAddress(asset, chain);\n\n  if (assetAddress) {\n    return getAddress(assetAddress.toLowerCase());\n  }\n\n  throw new SwapKitError(\"toolbox_evm_invalid_gas_asset_address\");\n};\n\nexport const getTokenAddress = ({ chain, symbol, ticker }: Asset, baseAssetChain: EVMChain) => {\n  try {\n    if (\n      (chain === baseAssetChain && symbol === baseAssetChain && ticker === baseAssetChain) ||\n      (chain === Chain.BinanceSmartChain && symbol === \"BNB\" && ticker === \"BNB\") ||\n      (chain === Chain.Arbitrum && symbol === \"ETH\" && ticker === \"ETH\")\n    ) {\n      return baseAssetAddress[baseAssetChain];\n    }\n\n    // strip 0X only - 0x is still valid\n    return getAddress(symbol.slice(ticker.length + 1).replace(/^0X/, \"\"));\n  } catch (_error) {\n    return null;\n  }\n};\n\nconst createTransferTx = async (\n  provider: Provider | BrowserProvider,\n  {\n    assetValue,\n    memo,\n    recipient,\n    feeOptionKey = FeeOption.Fast,\n    data,\n    from: fromOverride,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    gasPrice,\n    ...tx\n  }: TransferParams,\n  signer?: Signer,\n) => {\n  const txAmount = assetValue.getBaseValue(\"bigint\");\n  const chain = assetValue.chain as EVMChain;\n\n  const from = fromOverride || (await signer?.getAddress());\n\n  if (!from) throw new SwapKitError(\"toolbox_evm_no_from_address\");\n\n  if (!isGasAsset(assetValue)) {\n    const contractAddress = getTokenAddress(assetValue, chain);\n    if (!contractAddress) throw new SwapKitError(\"toolbox_evm_no_contract_address\");\n\n    // Transfer ERC20\n    return createContractTxObject(provider, {\n      contractAddress,\n      abi: erc20ABI,\n      funcName: \"transfer\",\n      funcParams: [recipient, txAmount],\n      txOverrides: { from, maxFeePerGas, maxPriorityFeePerGas, gasPrice },\n    });\n  }\n  // Transfer ETH\n  const txObject = {\n    ...tx,\n    from,\n    to: recipient,\n    value: txAmount,\n    data: data || hexlify(toUtf8Bytes(memo || \"\")),\n  };\n\n  return txObject;\n};\n\nconst createApprovalTx = async (\n  provider: Provider,\n  { assetAddress, spenderAddress, amount, from }: ApproveParams,\n  signer?: Signer,\n) => {\n  const funcParams = [spenderAddress, BigInt(amount || MAX_APPROVAL)];\n  const txOverrides = { from };\n\n  const functionCallParams = {\n    contractAddress: assetAddress,\n    abi: erc20ABI,\n    funcName: \"approve\",\n    funcParams,\n    signer,\n    txOverrides,\n  };\n\n  const txObject = await createContractTxObject(provider, functionCallParams);\n\n  return txObject;\n};\n\nfunction signMessage(signer?: Signer | JsonRpcSigner | HDNodeWallet) {\n  if (!signer) throw new SwapKitError(\"toolbox_evm_no_signer\");\n\n  return signer.signMessage;\n}\n\nexport const BaseEVMToolbox = ({\n  provider,\n  signer,\n  isEIP1559Compatible = true,\n}: {\n  signer?: Signer | JsonRpcSigner | HDNodeWallet;\n  provider: Provider | BrowserProvider;\n  isEIP1559Compatible?: boolean;\n}) => ({\n  approve: (params: ApproveParams) => approve(provider, params, signer, isEIP1559Compatible),\n  approvedAmount: (params: ApprovedParams) => approvedAmount(provider, params),\n  broadcastTransaction: provider.broadcastTransaction,\n  call: <T>(params: CallParams) => call<T>(provider, isEIP1559Compatible, { ...params, signer }),\n  createContract: (\n    address: string,\n    abi: (JsonFragment | Fragment)[],\n    contractProvider?: Provider,\n  ) => createContract(address, abi, contractProvider || provider),\n  createContractTxObject: (params: CallParams) => createContractTxObject(provider, params),\n  EIP1193SendTransaction: (tx: EIP1559TxParams) => EIP1193SendTransaction(provider, tx),\n  estimateCall: (params: EstimateCallParams) => estimateCall(provider, { ...params, signer }),\n  estimateGasLimit: ({\n    assetValue,\n    recipient,\n    memo,\n  }: WalletTxParams & { assetValue: AssetValue }) =>\n    estimateGasLimit(provider, { assetValue, recipient, memo, signer }),\n  estimateGasPrices: () => estimateGasPrices(provider, isEIP1559Compatible),\n  isApproved: (params: IsApprovedParams) => isApproved(provider, params),\n  sendTransaction: (params: EIP1559TxParams, feeOption?: FeeOption) =>\n    sendTransaction(provider, params, feeOption, signer, isEIP1559Compatible),\n  transfer: (params: TransferParams) => transfer(provider, params, signer, isEIP1559Compatible),\n  validateAddress,\n  createTransferTx: (params: TransferParams) => createTransferTx(provider, params, signer),\n  createApprovalTx: (params: ApproveParams) => createApprovalTx(provider, params, signer),\n  signMessage: signMessage(signer),\n});\n\nexport const evmValidateAddress = ({ address }: { address: string }) => validateAddress(address);\n\nexport type BaseEVMWallet = ReturnType<typeof BaseEVMToolbox>;\nexport type EVMWalletType = {\n  [Chain.Arbitrum]: ReturnType<typeof ARBToolbox>;\n  [Chain.Avalanche]: ReturnType<typeof AVAXToolbox>;\n  [Chain.BinanceSmartChain]: ReturnType<typeof BSCToolbox>;\n  [Chain.Ethereum]: ReturnType<typeof ETHToolbox>;\n  [Chain.Sepolia]: ReturnType<typeof SEPToolbox>;\n  [Chain.Optimism]: ReturnType<typeof OPToolbox>;\n  [Chain.Polygon]: ReturnType<typeof MATICToolbox>;\n};\n\nexport type EVMWallets = {\n  [chain in EVMChain]: BaseEVMWallet & EVMWalletType[chain];\n};\n",
    "import type { AssetValue, FeeOption, WalletTxParams } from \"@swapkit/helpers\";\nimport type { BigNumberish, JsonFragment, Transaction } from \"ethers\";\n\nimport type {\n  ARBToolbox,\n  AVAXToolbox,\n  BSCToolbox,\n  ETHToolbox,\n  MATICToolbox,\n  OPToolbox,\n} from \"../index.ts\";\nimport type { getProvider } from \"../provider.ts\";\n\nexport enum EthNetwork {\n  Test = \"goerli\",\n  Main = \"homestead\",\n}\n\nexport type ApproveParams = {\n  assetAddress: string;\n  spenderAddress: string;\n  feeOptionKey?: FeeOption;\n  amount?: BigNumberish;\n  from: string;\n  // Optional fallback in case estimation for gas limit fails\n  gasLimitFallback?: BigNumberish;\n  nonce?: number;\n};\n\nexport type ApprovedParams = {\n  assetAddress: string;\n  spenderAddress: string;\n  from: string;\n};\n\nexport type IsApprovedParams = ApprovedParams & {\n  amount?: BigNumberish;\n};\n\nexport type CallParams = {\n  callProvider?: ReturnType<typeof getProvider>;\n  contractAddress: string;\n  abi: readonly JsonFragment[];\n  funcName: string;\n  funcParams?: unknown[];\n  txOverrides?: Partial<Transaction>;\n  feeOption?: FeeOption;\n};\n\nexport type EstimateCallParams = Pick<\n  CallParams,\n  \"contractAddress\" | \"abi\" | \"funcName\" | \"funcParams\" | \"txOverrides\"\n>;\n\nexport type TransferParams = WalletTxParams & {\n  gasLimit?: bigint;\n  gasPrice?: bigint;\n  maxFeePerGas?: bigint;\n  maxPriorityFeePerGas?: bigint;\n  data?: string;\n  from: string;\n  nonce?: number;\n  assetValue: AssetValue;\n};\n\nexport type EVMToolbox = ReturnType<\n  | typeof AVAXToolbox\n  | typeof ETHToolbox\n  | typeof BSCToolbox\n  | typeof OPToolbox\n  | typeof ARBToolbox\n  | typeof MATICToolbox\n>;\n\nexport type EVMMaxSendableAmountsParams = {\n  from: string;\n  toolbox: EVMToolbox;\n  assetValue: AssetValue;\n  feeOptionKey?: FeeOption;\n  memo?: string;\n  abi?: readonly JsonFragment[];\n  funcName?: string;\n  contractAddress?: string;\n  funcParams?: unknown[];\n  txOverrides?: Partial<Transaction>;\n};\n\nexport type EVMTxBaseParams<T = bigint> = {\n  to?: string;\n  from?: string;\n  nonce?: number;\n  gasLimit?: T;\n  data?: string;\n  value?: T;\n  chainId?: T;\n};\n\nexport type EIP1559TxParams<T = bigint> = EVMTxBaseParams<T> & {\n  type?: number;\n  maxFeePerGas?: T;\n  maxPriorityFeePerGas?: T;\n};\n\nexport type LegacyEVMTxParams<T = bigint> = EVMTxBaseParams<T> & {\n  gasPrice?: T;\n};\n\nexport type EVMTxParams = EIP1559TxParams | LegacyEVMTxParams;\n",
    "import {\n  BaseDecimal,\n  Chain,\n  ChainId,\n  ChainToExplorerUrl,\n  FeeOption,\n  RPCUrl,\n} from \"@swapkit/helpers\";\nimport type { BrowserProvider, JsonRpcProvider, Provider, Signer } from \"ethers\";\n\nimport type { CovalentApiType } from \"../api/covalentApi.ts\";\nimport { covalentApi } from \"../api/covalentApi.ts\";\nimport { type EVMTxBaseParams, estimateTransactionFee, getBalance } from \"../index.ts\";\n\nimport { BaseEVMToolbox } from \"./BaseEVMToolbox.ts\";\n\nconst getNetworkParams = () => ({\n  chainId: ChainId.ArbitrumHex,\n  chainName: \"Arbitrum One\",\n  nativeCurrency: { name: \"Ethereum\", symbol: Chain.Ethereum, decimals: BaseDecimal.ETH },\n  rpcUrls: [RPCUrl.Arbitrum],\n  blockExplorerUrls: [ChainToExplorerUrl[Chain.Arbitrum]],\n});\n\nconst estimateGasPrices = async (provider: Provider) => {\n  try {\n    const { gasPrice } = await provider.getFeeData();\n\n    if (!gasPrice) throw new Error(\"No fee data available\");\n\n    return {\n      [FeeOption.Average]: { gasPrice },\n      [FeeOption.Fast]: { gasPrice },\n      [FeeOption.Fastest]: { gasPrice },\n    };\n  } catch (error) {\n    throw new Error(\n      `Failed to estimate gas price: ${(error as Todo).msg ?? (error as Todo).toString()}`,\n    );\n  }\n};\n\nexport const ARBToolbox = ({\n  api,\n  provider,\n  signer,\n  covalentApiKey,\n}: {\n  api?: CovalentApiType;\n  covalentApiKey: string;\n  signer?: Signer;\n  provider: JsonRpcProvider | BrowserProvider;\n}) => {\n  const arbApi = api || covalentApi({ apiKey: covalentApiKey, chainId: ChainId.Arbitrum });\n  const baseToolbox = BaseEVMToolbox({ provider, signer, isEIP1559Compatible: false });\n  const chain = Chain.Arbitrum;\n\n  return {\n    ...baseToolbox,\n    getNetworkParams,\n    estimateGasPrices: () => estimateGasPrices(provider),\n    estimateTransactionFee: (txObject: EVMTxBaseParams) =>\n      estimateTransactionFee(txObject, FeeOption.Average, chain, provider, false),\n    getBalance: (\n      address: string,\n      potentialScamFilter = true,\n      overwriteProvider?: JsonRpcProvider | BrowserProvider,\n    ) =>\n      getBalance({\n        provider: overwriteProvider || provider,\n        api: arbApi,\n        address,\n        chain,\n        potentialScamFilter,\n      }),\n  };\n};\n",
    "import { BaseDecimal, Chain, ChainId, ChainToExplorerUrl, type FeeOption } from \"@swapkit/helpers\";\nimport type { BrowserProvider, JsonRpcProvider, Signer } from \"ethers\";\n\nimport type { CovalentApiType } from \"../api/covalentApi.ts\";\nimport { covalentApi } from \"../api/covalentApi.ts\";\nimport { type EVMTxBaseParams, estimateTransactionFee, getBalance } from \"../index.ts\";\n\nimport { BaseEVMToolbox } from \"./BaseEVMToolbox.ts\";\n\nconst getNetworkParams = () => ({\n  chainId: ChainId.AvalancheHex,\n  chainName: \"Avalanche Network\",\n  nativeCurrency: { name: \"Avalanche\", symbol: Chain.Avalanche, decimals: BaseDecimal.AVAX },\n  // Use external rpc URL so wallets don't throw warning to user\n  rpcUrls: [\"https://api.avax.network/ext/bc/C/rpc\"],\n  blockExplorerUrls: [ChainToExplorerUrl[Chain.Avalanche]],\n});\n\nexport const AVAXToolbox = ({\n  api,\n  provider,\n  signer,\n  covalentApiKey,\n}: {\n  api?: CovalentApiType;\n  covalentApiKey: string;\n  signer?: Signer;\n  provider: JsonRpcProvider | BrowserProvider;\n}) => {\n  const avaxApi = api || covalentApi({ apiKey: covalentApiKey, chainId: ChainId.Avalanche });\n  const baseToolbox = BaseEVMToolbox({ provider, signer });\n  const chain = Chain.Avalanche;\n\n  return {\n    ...baseToolbox,\n    getNetworkParams,\n    estimateTransactionFee: (txObject: EVMTxBaseParams, feeOptionKey: FeeOption) =>\n      estimateTransactionFee(txObject, feeOptionKey, chain, provider),\n    getBalance: (\n      address: string,\n      potentialScamFilter = true,\n      overwriteProvider?: JsonRpcProvider | BrowserProvider,\n    ) =>\n      getBalance({\n        provider: overwriteProvider || provider,\n        api: avaxApi,\n        address,\n        chain,\n        potentialScamFilter,\n      }),\n  };\n};\n",
    "import { BaseDecimal, Chain, ChainId, ChainToExplorerUrl, type FeeOption } from \"@swapkit/helpers\";\nimport type { BrowserProvider, JsonRpcProvider, Signer } from \"ethers\";\n\nimport type { CovalentApiType } from \"../api/covalentApi.ts\";\nimport { covalentApi } from \"../api/covalentApi.ts\";\nimport { type EVMTxBaseParams, estimateTransactionFee, getBalance } from \"../index.ts\";\nimport { BaseEVMToolbox } from \"./BaseEVMToolbox.ts\";\n\nconst getNetworkParams = () => ({\n  chainId: ChainId.BinanceSmartChainHex,\n  chainName: \"BNB Chain\",\n  nativeCurrency: { name: \"Binance Coin\", symbol: \"BNB\", decimals: BaseDecimal.BSC },\n  rpcUrls: [\"https://bsc-dataseed.binance.org\"],\n  blockExplorerUrls: [ChainToExplorerUrl[Chain.BinanceSmartChain]],\n});\n\nexport const BSCToolbox = ({\n  api,\n  provider,\n  signer,\n  covalentApiKey,\n}: {\n  api?: CovalentApiType;\n  covalentApiKey: string;\n  signer?: Signer;\n  provider: JsonRpcProvider | BrowserProvider;\n}) => {\n  const bscApi = api || covalentApi({ apiKey: covalentApiKey, chainId: ChainId.BinanceSmartChain });\n  const baseToolbox = BaseEVMToolbox({ provider, signer, isEIP1559Compatible: false });\n  const chain = Chain.BinanceSmartChain;\n\n  return {\n    ...baseToolbox,\n    getNetworkParams,\n    estimateTransactionFee: (txObject: EVMTxBaseParams, feeOptionKey: FeeOption) =>\n      estimateTransactionFee(txObject, feeOptionKey, chain, provider, false),\n    getBalance: (\n      address: string,\n      potentialScamFilter = true,\n      overwriteProvider?: JsonRpcProvider | BrowserProvider,\n    ) =>\n      getBalance({\n        provider: overwriteProvider || provider,\n        api: bscApi,\n        address,\n        chain,\n        potentialScamFilter,\n      }),\n  };\n};\n",
    "import { Chain, type FeeOption } from \"@swapkit/helpers\";\nimport type { BrowserProvider, JsonRpcProvider, JsonRpcSigner, Signer } from \"ethers\";\n\nimport type { EthplorerApiType } from \"../api/ethplorerApi.ts\";\nimport { ethplorerApi } from \"../api/ethplorerApi.ts\";\nimport { type EVMTxBaseParams, estimateTransactionFee, getBalance } from \"../index.ts\";\n\nimport { BaseEVMToolbox } from \"./BaseEVMToolbox.ts\";\n\nexport const ETHToolbox = ({\n  api,\n  ethplorerApiKey,\n  signer,\n  provider,\n}: {\n  api?: EthplorerApiType;\n  ethplorerApiKey?: string;\n  signer?: Signer | JsonRpcSigner;\n  provider: JsonRpcProvider | BrowserProvider;\n}) => {\n  const ethApi = api || ethplorerApi(ethplorerApiKey);\n  const baseToolbox = BaseEVMToolbox({ provider, signer });\n  const chain = Chain.Ethereum;\n\n  return {\n    ...baseToolbox,\n    estimateTransactionFee: (txObject: EVMTxBaseParams, feeOptionKey?: FeeOption) =>\n      estimateTransactionFee(txObject, feeOptionKey, chain, provider),\n    getBalance: (\n      address: string,\n      potentialScamFilter = true,\n      overwriteProvider?: JsonRpcProvider | BrowserProvider,\n    ) =>\n      getBalance({\n        provider: overwriteProvider || provider,\n        api: ethApi,\n        address,\n        chain,\n        potentialScamFilter,\n      }),\n  };\n};\n",
    "import { Chain } from \"@swapkit/helpers\";\n\nimport { ARBToolbox } from \"./arb.ts\";\nimport { AVAXToolbox } from \"./avax.ts\";\nimport { BSCToolbox } from \"./bsc.ts\";\nimport { ETHToolbox } from \"./eth.ts\";\nimport { MATICToolbox } from \"./matic.ts\";\nimport { OPToolbox } from \"./op.ts\";\nimport { SEPToolbox } from \"./sep.ts\";\n\ntype ToolboxType = {\n  ETH: typeof ETHToolbox;\n  SEP: typeof SEPToolbox;\n  AVAX: typeof AVAXToolbox;\n  BSC: typeof BSCToolbox;\n  MATIC: typeof MATICToolbox;\n  ARB: typeof ARBToolbox;\n  OP: typeof OPToolbox;\n};\n\nexport const getToolboxByChain = <T extends keyof ToolboxType>(chain: T): ToolboxType[T] => {\n  switch (chain) {\n    case Chain.Avalanche:\n      return AVAXToolbox as ToolboxType[T];\n    case Chain.Arbitrum:\n      return ARBToolbox as ToolboxType[T];\n    case Chain.Optimism:\n      return OPToolbox as ToolboxType[T];\n    case Chain.Polygon:\n      return MATICToolbox as ToolboxType[T];\n    case Chain.BinanceSmartChain:\n      return BSCToolbox as ToolboxType[T];\n    case Chain.Ethereum:\n      return ETHToolbox as ToolboxType[T];\n    case Chain.Sepolia:\n      return SEPToolbox as ToolboxType[T];\n    default:\n      throw new Error(`Chain ${chain} is not supported`);\n  }\n};\n\nexport { evmValidateAddress } from \"./BaseEVMToolbox.ts\";\n",
    "import {\n  BaseDecimal,\n  Chain,\n  ChainId,\n  ChainToExplorerUrl,\n  type FeeOption,\n  RPCUrl,\n} from \"@swapkit/helpers\";\nimport type { BrowserProvider, JsonRpcProvider, Signer } from \"ethers\";\n\nimport type { CovalentApiType } from \"../api/covalentApi.ts\";\nimport { covalentApi } from \"../api/covalentApi.ts\";\nimport { type EVMTxBaseParams, estimateTransactionFee, getBalance } from \"../index.ts\";\n\nimport { BaseEVMToolbox } from \"./BaseEVMToolbox.ts\";\n\nconst getNetworkParams = () => ({\n  chainId: ChainId.PolygonHex,\n  chainName: \"Polygon Mainnet\",\n  nativeCurrency: { name: \"Polygon\", symbol: Chain.Polygon, decimals: BaseDecimal.MATIC },\n  rpcUrls: [RPCUrl.Polygon],\n  blockExplorerUrls: [ChainToExplorerUrl[Chain.Polygon]],\n});\n\nexport const MATICToolbox = ({\n  api,\n  provider,\n  signer,\n  covalentApiKey,\n}: {\n  api?: CovalentApiType;\n  covalentApiKey: string;\n  signer?: Signer;\n  provider: JsonRpcProvider | BrowserProvider;\n}) => {\n  const maticApi = api || covalentApi({ apiKey: covalentApiKey, chainId: ChainId.Polygon });\n  const baseToolbox = BaseEVMToolbox({ provider, signer });\n  const chain = Chain.Polygon;\n\n  return {\n    ...baseToolbox,\n    getNetworkParams,\n    estimateTransactionFee: (txObject: EVMTxBaseParams, feeOptionKey: FeeOption) =>\n      estimateTransactionFee(txObject, feeOptionKey, chain, provider),\n    getBalance: (\n      address: string,\n      potentialScamFilter = true,\n      overwriteProvider?: JsonRpcProvider | BrowserProvider,\n    ) =>\n      getBalance({\n        provider: overwriteProvider || provider,\n        api: maticApi,\n        address,\n        chain,\n        potentialScamFilter,\n      }),\n  };\n};\n",
    "import {\n  BaseDecimal,\n  Chain,\n  ChainId,\n  ChainToExplorerUrl,\n  FeeOption,\n  RPCUrl,\n} from \"@swapkit/helpers\";\nimport type { BrowserProvider, JsonRpcProvider, Signer, TransactionRequest } from \"ethers\";\n\nimport type { CovalentApiType } from \"../api/covalentApi.ts\";\nimport { covalentApi } from \"../api/covalentApi.ts\";\nimport { gasOracleAbi } from \"../contracts/op/gasOracle.ts\";\nimport { getBalance } from \"../index.ts\";\n\nimport { Contract, Transaction } from \"ethers\";\nimport { BaseEVMToolbox } from \"./BaseEVMToolbox.ts\";\n\nconst GAS_PRICE_ORACLE_ADDRESS = \"0x420000000000000000000000000000000000000f\";\n\nexport const connectGasPriceOracle = (provider: JsonRpcProvider | BrowserProvider) => {\n  return new Contract(GAS_PRICE_ORACLE_ADDRESS, gasOracleAbi, provider);\n};\n\nexport const getL1GasPrice = (provider: JsonRpcProvider | BrowserProvider) => {\n  const gasPriceOracle = connectGasPriceOracle(provider);\n\n  if (gasPriceOracle && \"l1BaseFee\" in gasPriceOracle) {\n    return gasPriceOracle?.l1BaseFee() as unknown as bigint;\n  }\n\n  return undefined;\n};\n\nconst _serializeTx = async (\n  provider: JsonRpcProvider | BrowserProvider,\n  { data, from, to, gasPrice, type, gasLimit, nonce }: TransactionRequest,\n) => {\n  if (!to) throw new Error(\"Missing to address\");\n\n  return Transaction.from({\n    data,\n    to: to as string,\n    gasPrice,\n    type,\n    gasLimit,\n    nonce: nonce ? nonce : from ? await provider.getTransactionCount(from) : 0,\n  }).serialized;\n};\n\nexport const estimateL1GasCost = async (\n  provider: JsonRpcProvider | BrowserProvider,\n  tx: TransactionRequest,\n) => {\n  const gasPriceOracle = await connectGasPriceOracle(provider);\n  const serializedTx = await _serializeTx(provider, tx);\n\n  if (gasPriceOracle && \"getL1Fee\" in gasPriceOracle) {\n    return gasPriceOracle.getL1Fee(serializedTx);\n  }\n};\n\nexport const estimateL2GasCost = async (\n  provider: JsonRpcProvider | BrowserProvider,\n  tx: TransactionRequest,\n) => {\n  const l2GasPrice = await provider.send(\"eth_gasPrice\", []);\n  const l2GasCost = await provider.estimateGas(tx);\n  return l2GasPrice.mul(l2GasCost);\n};\n\nexport const estimateTotalGasCost = async (\n  provider: JsonRpcProvider | BrowserProvider,\n  tx: TransactionRequest,\n) => {\n  const l1GasCost = await estimateL1GasCost(provider, tx);\n  const l2GasCost = await estimateL2GasCost(provider, tx);\n  return l1GasCost.add(l2GasCost);\n};\n\nexport const estimateL1Gas = async (\n  provider: JsonRpcProvider | BrowserProvider,\n  tx: TransactionRequest,\n) => {\n  const gasPriceOracle = connectGasPriceOracle(provider);\n  const serializedTx = await _serializeTx(provider, tx);\n\n  if (gasPriceOracle && \"getL1GasUsed\" in gasPriceOracle) {\n    return gasPriceOracle.getL1GasUsed(serializedTx);\n  }\n};\n\nconst getNetworkParams = () => ({\n  chainId: ChainId.OptimismHex,\n  chainName: \"Optimism\",\n  nativeCurrency: { name: \"Ethereum\", symbol: Chain.Ethereum, decimals: BaseDecimal.ETH },\n  rpcUrls: [RPCUrl.Optimism],\n  blockExplorerUrls: [ChainToExplorerUrl[Chain.Optimism]],\n});\n\nconst estimateGasPrices = async (provider: JsonRpcProvider | BrowserProvider) => {\n  try {\n    const { maxFeePerGas, maxPriorityFeePerGas, gasPrice } = await provider.getFeeData();\n    const l1GasPrice = await getL1GasPrice(provider);\n    const price = gasPrice as bigint;\n\n    if (!(maxFeePerGas && maxPriorityFeePerGas)) {\n      throw new Error(\"No fee data available\");\n    }\n\n    return {\n      [FeeOption.Average]: {\n        l1GasPrice,\n        gasPrice,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n      },\n      [FeeOption.Fast]: {\n        l1GasPrice: ((l1GasPrice || 0n) * 15n) / 10n,\n        gasPrice: (price * 15n) / 10n,\n        maxFeePerGas,\n        maxPriorityFeePerGas: (maxPriorityFeePerGas * 15n) / 10n,\n      },\n      [FeeOption.Fastest]: {\n        l1GasPrice: (l1GasPrice || 0n) * 2n,\n        gasPrice: price * 2n,\n        maxFeePerGas,\n        maxPriorityFeePerGas: maxPriorityFeePerGas * 2n,\n      },\n    };\n  } catch (error) {\n    throw new Error(\n      `Failed to estimate gas price: ${(error as Todo).msg ?? (error as Todo).toString()}`,\n    );\n  }\n};\n\nexport const OPToolbox = ({\n  api,\n  provider,\n  signer,\n  covalentApiKey,\n}: {\n  api?: CovalentApiType;\n  covalentApiKey: string;\n  signer?: Signer;\n  provider: JsonRpcProvider | BrowserProvider;\n}) => {\n  const opApi = api || covalentApi({ apiKey: covalentApiKey, chainId: ChainId.Optimism });\n  const baseToolbox = BaseEVMToolbox({ provider, signer });\n\n  return {\n    ...baseToolbox,\n    estimateTotalGasCost: (tx: TransactionRequest) => estimateTotalGasCost(provider, tx),\n    estimateL1GasCost: (tx: TransactionRequest) => estimateL1GasCost(provider, tx),\n    estimateL2GasCost: (tx: TransactionRequest) => estimateL2GasCost(provider, tx),\n    getL1GasPrice: () => getL1GasPrice(provider),\n    estimateL1Gas: (tx: TransactionRequest) => estimateL1Gas(provider, tx),\n    getNetworkParams,\n    estimateGasPrices: () => estimateGasPrices(provider),\n    getBalance: (\n      address: string,\n      potentialScamFilter = true,\n      overwriteProvider?: JsonRpcProvider | BrowserProvider,\n    ) =>\n      getBalance({\n        provider: overwriteProvider || provider,\n        api: opApi,\n        address,\n        chain: Chain.Optimism,\n        potentialScamFilter,\n      }),\n  };\n};\n",
    "export const gasOracleAbi = [\n  {\n    inputs: [{ internalType: \"address\", name: \"_owner\", type: \"address\" }],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: false, internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    name: \"DecimalsUpdated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: false, internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    name: \"GasPriceUpdated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: false, internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    name: \"L1BaseFeeUpdated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: false, internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    name: \"OverheadUpdated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: \"address\", name: \"previousOwner\", type: \"address\" },\n      { indexed: true, internalType: \"address\", name: \"newOwner\", type: \"address\" },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: false, internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    name: \"ScalarUpdated\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"gasPrice\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"_data\", type: \"bytes\" }],\n    name: \"getL1Fee\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"_data\", type: \"bytes\" }],\n    name: \"getL1GasUsed\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"l1BaseFee\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"overhead\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"scalar\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"_decimals\", type: \"uint256\" }],\n    name: \"setDecimals\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"_gasPrice\", type: \"uint256\" }],\n    name: \"setGasPrice\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"_baseFee\", type: \"uint256\" }],\n    name: \"setL1BaseFee\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"_overhead\", type: \"uint256\" }],\n    name: \"setOverhead\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"_scalar\", type: \"uint256\" }],\n    name: \"setScalar\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"newOwner\", type: \"address\" }],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n",
    "import { BaseDecimal, Chain, type FeeOption } from \"@swapkit/helpers\";\nimport type { BrowserProvider, JsonRpcProvider, JsonRpcSigner, Signer } from \"ethers\";\n\nimport type { EthplorerApiType } from \"../api/ethplorerApi.ts\";\nimport { ethplorerApi } from \"../api/ethplorerApi.ts\";\nimport { type EVMTxBaseParams, estimateTransactionFee, getBalance } from \"../index.ts\";\n\nimport { BaseEVMToolbox } from \"./BaseEVMToolbox.ts\";\n\nconst getNetworkParams = () => ({\n  chainId: \"0xaa36a7\",\n  chainName: \"Sepolia test network\",\n  nativeCurrency: { name: \"SepoliaETH\", symbol: \"ETH\", decimals: BaseDecimal.SEP },\n  // Use external rpc URL so wallets don't throw warning to user\n  rpcUrls: [\"https://sepolia.infura.io/v3/\"],\n  blockExplorerUrls: [\"https://sepolia.etherscan.io\"],\n});\n\nexport const SEPToolbox = ({\n  api,\n  ethplorerApiKey,\n  signer,\n  provider,\n}: {\n  api?: EthplorerApiType;\n  ethplorerApiKey?: string;\n  signer?: Signer | JsonRpcSigner;\n  provider: JsonRpcProvider | BrowserProvider;\n}) => {\n  const sepoliaApi = api || ethplorerApi(ethplorerApiKey, true);\n  const baseToolbox = BaseEVMToolbox({ provider, signer });\n  const chain = Chain.Sepolia;\n\n  return {\n    ...baseToolbox,\n    estimateTransactionFee: (txObject: EVMTxBaseParams, feeOptionKey?: FeeOption) =>\n      estimateTransactionFee(txObject, feeOptionKey, chain, provider),\n    getBalance: (\n      address: string,\n      potentialScamFilter = true,\n      overwriteProvider?: JsonRpcProvider | BrowserProvider,\n    ) =>\n      getBalance({\n        provider: overwriteProvider || provider,\n        api: sepoliaApi,\n        address,\n        chain,\n        potentialScamFilter,\n      }),\n    getNetworkParams,\n  };\n};\n"
  ],
  "mappings": "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",
  "debugId": "A32F400F60CAC78E64756E2164756E21",
  "names": []
}
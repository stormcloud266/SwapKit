import{AbstractSigner as Ao,BrowserProvider as Vo,HDNodeWallet as Oo,JsonRpcProvider as vo,Signature as ro,Transaction as so}from"ethers";import{ChainIdToChain as zn,RequestClient as cn,formatBigIntToSafeValue as Cn}from"@swapkit/helpers";var D=({apiKey:n,chainId:t})=>({getBalance:async(y)=>{const{data:o}=await cn.get(`https://api.covalenthq.com/v1/${t}/address/${y}/balances_v2/`,{searchParams:{key:n}});return(o?.items||[]).map(({balance:T,contract_decimals:l,contract_ticker_symbol:p,contract_address:u,native_token:m})=>({value:Cn({value:BigInt(T),decimal:l,bigIntDecimal:l}),decimal:l,chain:zn[t],symbol:`${p}${m?"":`-${u}`}`}))}});import{Chain as d,RequestClient as Wn,formatBigIntToSafeValue as In}from"@swapkit/helpers";var Z=(n="freekey",t=!1)=>({getBalance:async(y)=>{const o=t?"https://sepolia-api.ethplorer.io":"https://api.ethplorer.io",T=t?d.Sepolia:d.Ethereum,{tokens:l=[]}=await Wn.get(`${o}/getAddressInfo/${y}`,{searchParams:{apiKey:n}});return l.filter(({tokenInfo:{symbol:p},rawBalance:u})=>p&&u!=="0").map(({tokenInfo:{symbol:p,decimals:u,address:m},rawBalance:e})=>({chain:T,symbol:m?`${p}-${m}`:p,value:In({value:BigInt(e),decimal:Number.parseInt(u),bigIntDecimal:Number.parseInt(u)}),decimal:Number.parseInt(u)}))}});import{AssetValue as C,BaseDecimal as nn,FeeOption as tn,SwapKitNumber as N,filterAssets as Ln,formatBigIntToSafeValue as Qn,isGasAsset as Yn}from"@swapkit/helpers";var St=async({toolbox:n,from:t,memo:y="",feeOptionKey:o=tn.Fastest,assetValue:T,abi:l,funcName:p,funcParams:u,contractAddress:m,txOverrides:e})=>{const B=(await n.getBalance(t)).find(({symbol:f,chain:G})=>T?f===T.symbol:f===C.from({chain:G})?.symbol),R=(await n.estimateGasPrices())[o];if(!B)return C.from({chain:T.chain});if(T&&(B.chain!==T.chain||B.symbol!==T?.symbol))return B;const i=l&&p&&u&&m?await n.estimateCall({contractAddress:m,abi:l,funcName:p,funcParams:u,txOverrides:e}):await n.estimateGasLimit({from:t,recipient:t,memo:y,assetValue:T}),q="maxFeePerGas"in R;if(!(("gasPrice"in R)||q))throw new Error("Could not fetch fee data");const $=i*(q?(R.maxFeePerGas||1n)+(R.maxPriorityFeePerGas||1n):R.gasPrice),b=N.fromBigInt(B.getBaseValue("bigint")).sub($.toString());return C.from({chain:B.chain,value:b.getValue("string")})},S=(n)=>n>0n?`0x${n.toString(16)}`:"0x0",J=async({provider:n,api:t,address:y,chain:o,potentialScamFilter:T})=>{const l=await t.getBalance(y),p=await n.getBalance(y),u=[{chain:o,symbol:C.from({chain:o}).symbol,value:Qn({value:BigInt(p),decimal:18,bigIntDecimal:18}),decimal:nn[o]},...l.filter((e)=>!Yn(e))];return(T?Ln(u):u).map(({symbol:e,value:B,decimal:R})=>new C({decimal:R||nn[o],value:B,identifier:`${o}.${e}`}))},U=async(n,t=tn.Fast,y,o,T=!0)=>{const l=(await L(o,T))[t],p=await o.estimateGas(n),u=C.from({chain:y});if(!T&&l.gasPrice)return u.set(N.fromBigInt(l.gasPrice*p,u.decimal));if(l.maxFeePerGas&&l.maxPriorityFeePerGas)return u.set(N.fromBigInt((l.maxFeePerGas+l.maxPriorityFeePerGas)*p,u.decimal));throw new Error("No gas price found")};import{ChainToRPC as Zn}from"@swapkit/helpers";import{JsonRpcProvider as Sn}from"ethers/providers";var Et=(n,t)=>{return new Sn(t||Zn[n])};import{Chain as H,ContractAddress as z,FeeOption as g,SwapKitError as w,SwapKitNumber as on,erc20ABI as W,isGasAsset as Xn}from"@swapkit/helpers";import{BrowserProvider as xn,Contract as kn,Interface as En,hexlify as j,toUtf8Bytes as a}from"ethers";import{getAddress as X}from"ethers/address";import{MaxInt256 as _n}from"ethers/constants";function rn(n){if(!n)throw new w("toolbox_evm_no_signer");return n.signMessage}var K=_n,Fn={[H.Arbitrum]:z.ARB,[H.Ethereum]:z.ETH,[H.Sepolia]:z.SEP,[H.Avalanche]:z.AVAX,[H.BinanceSmartChain]:z.BSC,[H.Polygon]:z.MATIC,[H.Optimism]:z.OP},Pn=["payable","nonpayable"],Nn=(n)=>n.type===2||!!n.maxFeePerGas||!!n.maxPriorityFeePerGas,x=(n)=>n instanceof xn,k=(n,t,y)=>{return new kn(n,En.from(t),y)},yn=(n)=>{try{return X(n),!0}catch(t){return!1}},jn=(n,t)=>{const y=n.find((o)=>o.name===t);if(!y)throw new w("toolbox_evm_no_abi_fragment",{functionName:t});return y.stateMutability&&Pn.includes(y.stateMutability)},E=async(n,t,{callProvider:y,signer:o,contractAddress:T,abi:l,funcName:p,funcParams:u=[],txOverrides:m,feeOption:e=g.Fast})=>{const B=y||n;if(!T)throw new Error("contractAddress must be provided");const R=jn(l,p);if(R&&x(B)&&o){const M=await Q(B,{contractAddress:T,abi:l,funcName:p,funcParams:u,txOverrides:m});return _(B,M)}const i=k(T,l,B);if(R){if(!o)throw new w("toolbox_evm_no_signer");const M=m?.from||await o.getAddress();if(!M)throw new w("toolbox_evm_no_signer_address");const $=i.connect(o),{maxFeePerGas:b,maxPriorityFeePerGas:f,gasPrice:G}=(await L(n,t))[e],I=await i.getFunction(p).estimateGas(...u,m),Y=await $[p](...u,{...m,gasLimit:I,maxFeePerGas:b,maxPriorityFeePerGas:f,gasPrice:G,nonce:m?.nonce||await B.getTransactionCount(M)});return typeof Y?.hash==="string"?Y?.hash:Y}const q=await i[p]?.(...u);return typeof q?.hash==="string"?q?.hash:q},Q=async(n,{contractAddress:t,abi:y,funcName:o,funcParams:T=[],txOverrides:l})=>k(t,y,n).getFunction(o).populateTransaction(...T.concat(l).filter((p)=>typeof p!=="undefined")),Tn=async(n,{assetAddress:t,spenderAddress:y,from:o})=>await E(n,!0,{contractAddress:t,abi:W,funcName:"allowance",funcParams:[o,y]}),an=async(n,{assetAddress:t,spenderAddress:y,from:o,amount:T=K})=>{return on.fromBigInt(await Tn(n,{assetAddress:t,spenderAddress:y,from:o})).gte(on.fromBigInt(BigInt(T)))},Kn=async(n,{assetAddress:t,spenderAddress:y,feeOptionKey:o=g.Fast,amount:T,gasLimitFallback:l,from:p,nonce:u},m,e=!0)=>{const B=[y,BigInt(T||K)],i={contractAddress:t,abi:W,funcName:"approve",funcParams:B,signer:m,txOverrides:{from:p}};if(x(n))return _(n,await Q(n,i));return E(n,e,{...i,funcParams:B,txOverrides:{from:p,nonce:u,gasLimit:l?BigInt(l.toString()):void 0},feeOption:o})},An=async(n,{assetValue:t,memo:y,recipient:o,feeOptionKey:T=g.Fast,data:l,from:p,maxFeePerGas:u,maxPriorityFeePerGas:m,gasPrice:e,...B},R,i=!0)=>{const q=t.getBaseValue("bigint"),M=t.chain,$=p||await R?.getAddress();if(!$)throw new w("toolbox_evm_no_from_address");if(!t.isGasAsset){const f=F(t,M);if(!f)throw new w("toolbox_evm_no_contract_address");return E(n,i,{signer:R,contractAddress:f,abi:W,funcName:"transfer",funcParams:[o,q],txOverrides:{from:$,maxFeePerGas:u,maxPriorityFeePerGas:m,gasPrice:e},feeOption:T})}const b={...B,from:$,to:o,value:q,data:l||j(a(y||""))};return un(n,b,T,R,i)},L=async(n,t=!0)=>{try{const{maxFeePerGas:y,maxPriorityFeePerGas:o,gasPrice:T}=await n.getFeeData();if(t){if(!(y&&o))throw new w("toolbox_evm_no_fee_data");return{[g.Average]:{maxFeePerGas:y,maxPriorityFeePerGas:o},[g.Fast]:{maxFeePerGas:y*15n/10n,maxPriorityFeePerGas:o*15n/10n},[g.Fastest]:{maxFeePerGas:y*2n,maxPriorityFeePerGas:o*2n}}}if(!T)throw new w("toolbox_evm_no_gas_price");return{[g.Average]:{gasPrice:T},[g.Fast]:{gasPrice:T*15n/10n},[g.Fastest]:{gasPrice:T*2n}}}catch(y){throw new Error(`Failed to estimate gas price: ${y.msg??y.toString()}`)}},pn=(n,{signer:t,contractAddress:y,abi:o,funcName:T,funcParams:l=[],txOverrides:p})=>{if(!y)throw new w("toolbox_evm_no_contract_address");const u=k(y,o,n);return t?u.connect(t).getFunction(T).estimateGas(...l,p):u.getFunction(T).estimateGas(...l,p)},Vn=(n,{assetValue:t,recipient:y,memo:o,from:T,funcName:l,funcParams:p,txOverrides:u,signer:m})=>{const e=t.bigIntValue,B=t.isGasAsset?null:F(t,t.chain);if(B&&l)return pn(n,{contractAddress:B,abi:W,funcName:l,funcParams:p,txOverrides:u,signer:m});return n.estimateGas({from:T,to:y,value:e,data:o?j(a(o)):void 0})},un=async(n,t,y=g.Fast,o,T=!0)=>{if(!o)throw new w("toolbox_evm_no_signer");const{from:l,to:p,data:u,value:m,...e}=t;if(!p)throw new w("toolbox_evm_no_to_address");const B={...e,data:u||"0x",to:p,from:l,value:BigInt(m||0)};if(x(n))return _(n,B);const R=l||await o.getAddress(),i=t.nonce||await n.getTransactionCount(R),q=(await n.getNetwork()).chainId,M=Nn(B)||T,$=M&&!(B.maxFeePerGas&&B.maxPriorityFeePerGas)||!B.gasPrice?Object.entries((await L(n,T))[y]).reduce((f,[G,I])=>({...f,[G]:S(BigInt(I))}),{}):{};let b;try{b=S(B.gasLimit||await n.estimateGas(B)*11n/10n)}catch(f){throw new w("toolbox_evm_error_estimating_gas_limit",{error:f})}try{const f={...B,chainId:q,type:M?2:0,gasLimit:b,nonce:i,...$};try{return(await o.sendTransaction(f)).hash}catch(G){const I=await o.signTransaction({...f,from:R});return(await n.broadcastTransaction(I)).hash}}catch(f){throw new w("toolbox_evm_error_sending_transaction",{error:f})}},Kt=(n)=>X(n),_=(n,{from:t,to:y,data:o,value:T})=>{if(!x(n))throw new w("toolbox_evm_provider_not_eip1193_compatible");return n.send("eth_sendTransaction",[{value:S(BigInt(T||0)),from:t,to:y,data:o}])},At=(n,t)=>{const y=F(n,t);if(y)return X(y.toLowerCase());throw new w("toolbox_evm_invalid_gas_asset_address")},F=({chain:n,symbol:t,ticker:y},o)=>{try{if(n===o&&t===o&&y===o||n===H.BinanceSmartChain&&t==="BNB"&&y==="BNB"||n===H.Arbitrum&&t==="ETH"&&y==="ETH")return Fn[o];return X(t.slice(y.length+1).replace(/^0X/,""))}catch(T){return null}},On=async(n,{assetValue:t,memo:y,recipient:o,feeOptionKey:T=g.Fast,data:l,from:p,maxFeePerGas:u,maxPriorityFeePerGas:m,gasPrice:e,...B},R)=>{const i=t.getBaseValue("bigint"),q=t.chain,M=p||await R?.getAddress();if(!M)throw new w("toolbox_evm_no_from_address");if(!Xn(t)){const b=F(t,q);if(!b)throw new w("toolbox_evm_no_contract_address");return Q(n,{contractAddress:b,abi:W,funcName:"transfer",funcParams:[o,i],txOverrides:{from:M,maxFeePerGas:u,maxPriorityFeePerGas:m,gasPrice:e}})}return{...B,from:M,to:o,value:i,data:l||j(a(y||""))}},vn=async(n,{assetAddress:t,spenderAddress:y,amount:o,from:T},l)=>{const p=[y,BigInt(o||K)];return await Q(n,{contractAddress:t,abi:W,funcName:"approve",funcParams:p,signer:l,txOverrides:{from:T}})},h=({provider:n,signer:t,isEIP1559Compatible:y=!0})=>({approve:(o)=>Kn(n,o,t,y),approvedAmount:(o)=>Tn(n,o),broadcastTransaction:n.broadcastTransaction,call:(o)=>E(n,y,{...o,signer:t}),createContract:(o,T,l)=>k(o,T,l||n),createContractTxObject:(o)=>Q(n,o),EIP1193SendTransaction:(o)=>_(n,o),estimateCall:(o)=>pn(n,{...o,signer:t}),estimateGasLimit:({assetValue:o,recipient:T,memo:l})=>Vn(n,{assetValue:o,recipient:T,memo:l,signer:t}),estimateGasPrices:()=>L(n,y),isApproved:(o)=>an(n,o),sendTransaction:(o,T)=>un(n,o,T,t,y),transfer:(o)=>An(n,o,t,y),validateAddress:yn,createTransferTx:(o)=>On(n,o,t),createApprovalTx:(o)=>vn(n,o,t),signMessage:rn(t)}),sn=({address:n})=>yn(n);var dn;((y)=>{y.Test="goerli";y.Main="homestead"})(dn||={});import{BaseDecimal as nt,Chain as A,ChainId as ln,ChainToExplorerUrl as tt,FeeOption as P,RPCUrl as ot}from"@swapkit/helpers";var yt=()=>({chainId:ln.ArbitrumHex,chainName:"Arbitrum One",nativeCurrency:{name:"Ethereum",symbol:A.Ethereum,decimals:nt.ETH},rpcUrls:[ot.Arbitrum],blockExplorerUrls:[tt[A.Arbitrum]]}),Tt=async(n)=>{try{const{gasPrice:t}=await n.getFeeData();if(!t)throw new Error("No fee data available");return{[P.Average]:{gasPrice:t},[P.Fast]:{gasPrice:t},[P.Fastest]:{gasPrice:t}}}catch(t){throw new Error(`Failed to estimate gas price: ${t.msg??t.toString()}`)}},mn=({api:n,provider:t,signer:y,covalentApiKey:o})=>{const T=n||D({apiKey:o,chainId:ln.Arbitrum}),l=h({provider:t,signer:y,isEIP1559Compatible:!1}),p=A.Arbitrum;return{...l,getNetworkParams:yt,estimateGasPrices:()=>Tt(t),estimateTransactionFee:(u)=>U(u,P.Average,p,t,!1),getBalance:(u,m=!0,e)=>J({provider:e||t,api:T,address:u,chain:p,potentialScamFilter:m})}};import{BaseDecimal as pt,Chain as V,ChainId as Bn,ChainToExplorerUrl as ut}from"@swapkit/helpers";var lt=()=>({chainId:Bn.AvalancheHex,chainName:"Avalanche Network",nativeCurrency:{name:"Avalanche",symbol:V.Avalanche,decimals:pt.AVAX},rpcUrls:["https://api.avax.network/ext/bc/C/rpc"],blockExplorerUrls:[ut[V.Avalanche]]}),en=({api:n,provider:t,signer:y,covalentApiKey:o})=>{const T=n||D({apiKey:o,chainId:Bn.Avalanche}),l=h({provider:t,signer:y}),p=V.Avalanche;return{...l,getNetworkParams:lt,estimateTransactionFee:(u,m)=>U(u,m,p,t),getBalance:(u,m=!0,e)=>J({provider:e||t,api:T,address:u,chain:p,potentialScamFilter:m})}};import{BaseDecimal as mt,Chain as Rn,ChainId as wn,ChainToExplorerUrl as Bt}from"@swapkit/helpers";var et=()=>({chainId:wn.BinanceSmartChainHex,chainName:"BNB Chain",nativeCurrency:{name:"Binance Coin",symbol:"BNB",decimals:mt.BSC},rpcUrls:["https://bsc-dataseed.binance.org"],blockExplorerUrls:[Bt[Rn.BinanceSmartChain]]}),fn=({api:n,provider:t,signer:y,covalentApiKey:o})=>{const T=n||D({apiKey:o,chainId:wn.BinanceSmartChain}),l=h({provider:t,signer:y,isEIP1559Compatible:!1}),p=Rn.BinanceSmartChain;return{...l,getNetworkParams:et,estimateTransactionFee:(u,m)=>U(u,m,p,t,!1),getBalance:(u,m=!0,e)=>J({provider:e||t,api:T,address:u,chain:p,potentialScamFilter:m})}};import{Chain as Rt}from"@swapkit/helpers";var Mn=({api:n,ethplorerApiKey:t,signer:y,provider:o})=>{const T=n||Z(t),l=h({provider:o,signer:y}),p=Rt.Ethereum;return{...l,estimateTransactionFee:(u,m)=>U(u,m,p,o),getBalance:(u,m=!0,e)=>J({provider:e||o,api:T,address:u,chain:p,potentialScamFilter:m})}};import{Chain as c}from"@swapkit/helpers";import{BaseDecimal as wt,Chain as O,ChainId as Jn,ChainToExplorerUrl as it,RPCUrl as ft}from"@swapkit/helpers";var Mt=()=>({chainId:Jn.PolygonHex,chainName:"Polygon Mainnet",nativeCurrency:{name:"Polygon",symbol:O.Polygon,decimals:wt.MATIC},rpcUrls:[ft.Polygon],blockExplorerUrls:[it[O.Polygon]]}),hn=({api:n,provider:t,signer:y,covalentApiKey:o})=>{const T=n||D({apiKey:o,chainId:Jn.Polygon}),l=h({provider:t,signer:y}),p=O.Polygon;return{...l,getNetworkParams:Mt,estimateTransactionFee:(u,m)=>U(u,m,p,t),getBalance:(u,m=!0,e)=>J({provider:e||t,api:T,address:u,chain:p,potentialScamFilter:m})}};import{BaseDecimal as Jt,Chain as r,ChainId as Un,ChainToExplorerUrl as ht,FeeOption as v,RPCUrl as qt}from"@swapkit/helpers";var qn=[{inputs:[{internalType:"address",name:"_owner",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"",type:"uint256"}],name:"DecimalsUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"",type:"uint256"}],name:"GasPriceUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"",type:"uint256"}],name:"L1BaseFeeUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"",type:"uint256"}],name:"OverheadUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"",type:"uint256"}],name:"ScalarUpdated",type:"event"},{inputs:[],name:"decimals",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"gasPrice",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes",name:"_data",type:"bytes"}],name:"getL1Fee",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes",name:"_data",type:"bytes"}],name:"getL1GasUsed",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"l1BaseFee",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"overhead",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"scalar",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"_decimals",type:"uint256"}],name:"setDecimals",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_gasPrice",type:"uint256"}],name:"setGasPrice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_baseFee",type:"uint256"}],name:"setL1BaseFee",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_overhead",type:"uint256"}],name:"setOverhead",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_scalar",type:"uint256"}],name:"setScalar",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"}];import{Contract as Ut,Transaction as bt}from"ethers";var gt="0x420000000000000000000000000000000000000f",s=(n)=>{return new Ut(gt,qn,n)},bn=(n)=>{const t=s(n);if(t&&"l1BaseFee"in t)return t?.l1BaseFee();return},gn=async(n,{data:t,from:y,to:o,gasPrice:T,type:l,gasLimit:p,nonce:u})=>{if(!o)throw new Error("Missing to address");return bt.from({data:t,to:o,gasPrice:T,type:l,gasLimit:p,nonce:u?u:y?await n.getTransactionCount(y):0}).serialized},$n=async(n,t)=>{const y=await s(n),o=await gn(n,t);if(y&&"getL1Fee"in y)return y.getL1Fee(o)},Dn=async(n,t)=>{const y=await n.send("eth_gasPrice",[]),o=await n.estimateGas(t);return y.mul(o)},$t=async(n,t)=>{const y=await $n(n,t),o=await Dn(n,t);return y.add(o)},Dt=async(n,t)=>{const y=s(n),o=await gn(n,t);if(y&&"getL1GasUsed"in y)return y.getL1GasUsed(o)},Ht=()=>({chainId:Un.OptimismHex,chainName:"Optimism",nativeCurrency:{name:"Ethereum",symbol:r.Ethereum,decimals:Jt.ETH},rpcUrls:[qt.Optimism],blockExplorerUrls:[ht[r.Optimism]]}),Gt=async(n)=>{try{const{maxFeePerGas:t,maxPriorityFeePerGas:y,gasPrice:o}=await n.getFeeData(),T=await bn(n),l=o;if(!(t&&y))throw new Error("No fee data available");return{[v.Average]:{l1GasPrice:T,gasPrice:o,maxFeePerGas:t,maxPriorityFeePerGas:y},[v.Fast]:{l1GasPrice:(T||0n)*15n/10n,gasPrice:l*15n/10n,maxFeePerGas:t,maxPriorityFeePerGas:y*15n/10n},[v.Fastest]:{l1GasPrice:(T||0n)*2n,gasPrice:l*2n,maxFeePerGas:t,maxPriorityFeePerGas:y*2n}}}catch(t){throw new Error(`Failed to estimate gas price: ${t.msg??t.toString()}`)}},Hn=({api:n,provider:t,signer:y,covalentApiKey:o})=>{const T=n||D({apiKey:o,chainId:Un.Optimism});return{...h({provider:t,signer:y}),estimateTotalGasCost:(p)=>$t(t,p),estimateL1GasCost:(p)=>$n(t,p),estimateL2GasCost:(p)=>Dn(t,p),getL1GasPrice:()=>bn(t),estimateL1Gas:(p)=>Dt(t,p),getNetworkParams:Ht,estimateGasPrices:()=>Gt(t),getBalance:(p,u=!0,m)=>J({provider:m||t,api:T,address:p,chain:r.Optimism,potentialScamFilter:u})}};import{BaseDecimal as zt,Chain as ct}from"@swapkit/helpers";var Ct=()=>({chainId:"0xaa36a7",chainName:"Sepolia test network",nativeCurrency:{name:"SepoliaETH",symbol:"ETH",decimals:zt.SEP},rpcUrls:["https://sepolia.infura.io/v3/"],blockExplorerUrls:["https://sepolia.etherscan.io"]}),Gn=({api:n,ethplorerApiKey:t,signer:y,provider:o})=>{const T=n||Z(t,!0),l=h({provider:o,signer:y}),p=ct.Sepolia;return{...l,estimateTransactionFee:(u,m)=>U(u,m,p,o),getBalance:(u,m=!0,e)=>J({provider:e||o,api:T,address:u,chain:p,potentialScamFilter:m}),getNetworkParams:Ct}};var Po=(n)=>{switch(n){case c.Avalanche:return en;case c.Arbitrum:return mn;case c.Optimism:return Hn;case c.Polygon:return hn;case c.BinanceSmartChain:return fn;case c.Ethereum:return Mn;case c.Sepolia:return Gn;default:throw new Error(`Chain ${n} is not supported`)}};export{S as toHexString,Kt as toChecksumAddress,jn as isStateChangingCall,x as isBrowserProvider,Po as getToolboxByChain,F as getTokenAddress,Et as getProvider,bn as getL1GasPrice,At as getChecksumAddressFromAsset,J as getBalance,sn as evmValidateAddress,Z as ethplorerApi,U as estimateTransactionFee,$t as estimateTotalGasCost,St as estimateMaxSendableAmount,Dn as estimateL2GasCost,$n as estimateL1GasCost,Dt as estimateL1Gas,L as estimateGasPrices,Q as createContractTxObject,k as createContract,D as covalentApi,s as connectGasPriceOracle,so as Transaction,ro as Signature,Gn as SEPToolbox,Hn as OPToolbox,K as MAX_APPROVAL,hn as MATICToolbox,vo as JsonRpcProvider,Oo as HDNodeWallet,dn as EthNetwork,Mn as ETHToolbox,_ as EIP1193SendTransaction,Vo as BrowserProvider,h as BaseEVMToolbox,fn as BSCToolbox,Ao as AbstractSigner,en as AVAXToolbox,mn as ARBToolbox};

//# debugId=A32F400F60CAC78E64756E2164756E21

{
  "version": 3,
  "sources": ["../src/toolbox.ts", "../../../../node_modules/@noble/hashes/esm/_assert.js", "../../../../node_modules/@noble/hashes/esm/crypto.js", "../../../../node_modules/@noble/hashes/esm/utils.js", "../../../../node_modules/@noble/hashes/esm/_md.js", "../../../../node_modules/@noble/hashes/esm/_u64.js", "../../../../node_modules/@noble/hashes/esm/sha512.js", "../../../../node_modules/micro-key-producer/node_modules/@noble/curves/esm/abstract/utils.js", "../../../../node_modules/micro-key-producer/node_modules/@noble/curves/esm/abstract/modular.js", "../../../../node_modules/micro-key-producer/node_modules/@noble/curves/esm/abstract/curve.js", "../../../../node_modules/micro-key-producer/node_modules/@noble/curves/esm/abstract/edwards.js", "../../../../node_modules/micro-key-producer/node_modules/@noble/curves/esm/ed25519.js", "../../../../node_modules/@noble/hashes/esm/hmac.js", "../../../../node_modules/@noble/hashes/esm/ripemd160.js", "../../../../node_modules/@noble/hashes/esm/sha256.js", "../../../../node_modules/micro-key-producer/lib/esm/slip10.js"],
  "sourcesContent": [
    "import { mnemonicToSeedSync } from \"@scure/bip39\";\nimport {\n  AccountLayout,\n  TOKEN_PROGRAM_ID,\n  createAssociatedTokenAccountInstruction,\n  createTransferCheckedInstruction,\n  getAccount,\n  getAssociatedTokenAddress,\n  getMint,\n} from \"@solana/spl-token\";\nimport {\n  Connection,\n  Keypair,\n  PublicKey,\n  SystemProgram,\n  Transaction,\n  sendAndConfirmTransaction,\n} from \"@solana/web3.js\";\nimport {\n  AssetValue,\n  Chain,\n  DerivationPath,\n  RPCUrl,\n  SwapKitError,\n  SwapKitNumber,\n  type WalletTxParams,\n} from \"@swapkit/helpers\";\nimport { HDKey } from \"micro-key-producer/slip10.js\";\n\nfunction validateAddress(address: string) {\n  try {\n    const pubkey = new PublicKey(address);\n    return PublicKey.isOnCurve(pubkey.toBuffer());\n  } catch (_) {\n    return false;\n  }\n}\n\nfunction createKeysForPath({\n  phrase,\n  derivationPath = DerivationPath.SOL,\n}: { phrase: string; derivationPath?: string }) {\n  const seed = mnemonicToSeedSync(phrase);\n  const hdKey = HDKey.fromMasterSeed(seed);\n\n  return Keypair.fromSeed(hdKey.derive(derivationPath, true).privateKey);\n}\n\nfunction getAddressFromKeys(keypair: Keypair) {\n  return keypair.publicKey.toString();\n}\n\nasync function getTokenBalances({\n  connection,\n  address,\n}: { connection: Connection; address: string }) {\n  const tokenAccounts = await connection.getTokenAccountsByOwner(new PublicKey(address), {\n    programId: TOKEN_PROGRAM_ID,\n  });\n\n  const tokenBalances: AssetValue[] = [];\n\n  for await (const ta of tokenAccounts.value) {\n    const accData = AccountLayout.decode(ta.account.data);\n    const { decimals: decimal, address } = await getMint(connection, accData.mint);\n\n    if (accData.amount > BigInt(0)) {\n      tokenBalances.push(\n        new AssetValue({\n          value: SwapKitNumber.fromBigInt(accData.amount, decimal),\n          decimal,\n          identifier: `${Chain.Solana}.TOKEN-${address.toString()}`,\n        }),\n      );\n    }\n  }\n\n  return tokenBalances;\n}\n\nfunction getBalance(connection: Connection) {\n  return async (address: string) => {\n    const SOLBalance = await connection.getBalance(new PublicKey(address));\n    const tokenBalances = await getTokenBalances({ connection, address });\n\n    return [AssetValue.from({ chain: Chain.Solana, value: BigInt(SOLBalance) }), ...tokenBalances];\n  };\n}\n\nasync function createSolanaTokenTransaction({\n  tokenAddress,\n  recipient,\n  from,\n  connection,\n  amount,\n  decimals,\n}: {\n  tokenAddress: string;\n  recipient: string;\n  from: PublicKey;\n  connection: Connection;\n  amount: number;\n  decimals: number;\n}) {\n  const transaction = new Transaction();\n  const tokenPublicKey = new PublicKey(tokenAddress);\n  const fromSPLAddress = await getAssociatedTokenAddress(tokenPublicKey, from);\n\n  const recipientPublicKey = new PublicKey(recipient);\n  const recipientSPLAddress = await getAssociatedTokenAddress(tokenPublicKey, recipientPublicKey);\n\n  try {\n    await getAccount(connection, recipientSPLAddress);\n    return transaction.add(\n      createTransferCheckedInstruction(\n        fromSPLAddress,\n        tokenPublicKey,\n        recipientSPLAddress,\n        from,\n        amount,\n        decimals,\n      ),\n    );\n  } catch (_) {\n    return transaction.add(\n      createAssociatedTokenAccountInstruction(\n        from,\n        recipientSPLAddress,\n        recipientPublicKey,\n        tokenPublicKey,\n      ),\n    );\n  }\n}\n\nfunction transfer(connection: Connection) {\n  return async ({\n    recipient,\n    assetValue,\n    fromKeypair,\n  }: WalletTxParams & {\n    assetValue: AssetValue;\n    fromKeypair: Keypair;\n  }) => {\n    if (!validateAddress(recipient)) {\n      throw new SwapKitError(\"core_transaction_invalid_sender_address\");\n    }\n\n    const transaction = assetValue.isGasAsset\n      ? new Transaction().add(\n          SystemProgram.transfer({\n            fromPubkey: fromKeypair.publicKey,\n            lamports: assetValue.getValue(\"number\"),\n            toPubkey: new PublicKey(recipient),\n          }),\n        )\n      : assetValue.address\n        ? await createSolanaTokenTransaction({\n            amount: assetValue.getValue(\"number\"),\n            connection,\n            decimals: assetValue.decimal as number,\n            from: fromKeypair.publicKey,\n            recipient,\n            tokenAddress: assetValue.address,\n          })\n        : undefined;\n\n    if (!transaction) {\n      throw new SwapKitError(\"core_transaction_invalid_sender_address\");\n    }\n\n    const blockHash = await connection.getLatestBlockhash();\n    transaction.recentBlockhash = blockHash.blockhash;\n    transaction.feePayer = fromKeypair.publicKey;\n\n    return sendAndConfirmTransaction(connection, transaction, [fromKeypair]);\n  };\n}\n\nexport const SOLToolbox = ({ rpcUrl = RPCUrl.Solana }: { rpcUrl?: string } = {}) => {\n  const connection = new Connection(rpcUrl, \"confirmed\");\n\n  return {\n    createKeysForPath,\n    getAddressFromKeys,\n    getBalance: getBalance(connection),\n    transfer: transfer(connection),\n    validateAddress,\n  };\n};\n",
    "function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`positive integer expected, not ${n}`);\n}\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`boolean expected, not ${b}`);\n}\n// copied from utils\nexport function isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nfunction bytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(h.outputLen);\n    number(h.blockLen);\n}\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexport { number, bool, bytes, hash, exists, output };\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n//# sourceMappingURL=_assert.js.map",
    "export const crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n//# sourceMappingURL=crypto.js.map",
    "/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nimport { bytes as abytes } from './_assert.js';\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nexport function isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// The rotate left (circular left shift) operation for uint32\nexport const rotl = (word, shift) => (word << shift) | ((word >>> (32 - shift)) >>> 0);\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// The byte swap operation for uint32\nexport const byteSwap = (word) => ((word << 24) & 0xff000000) |\n    ((word << 8) & 0xff0000) |\n    ((word >>> 8) & 0xff00) |\n    ((word >>> 24) & 0xff);\n// Conditionally byte swap if on a big-endian platform\nexport const byteSwapIfBE = isLE ? (n) => n : (n) => byteSwap(n);\n// In place byte swap for Uint32Array\nexport function byteSwap32(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = byteSwap(arr[i]);\n    }\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nconst toStr = {}.toString;\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport function wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto && typeof crypto.getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map",
    "import { exists, output } from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Choice: a ? b : c\nexport const Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nexport const Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport class HashMD extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        exists(this);\n        output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n//# sourceMappingURL=_md.js.map",
    "const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nconst rotr32L = (h, _l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nexport { fromBig, split, toBig, shrSH, shrSL, rotrSH, rotrSL, rotrBH, rotrBL, rotr32H, rotr32L, rotlSH, rotlSL, rotlBH, rotlBL, add, add3L, add3H, add4L, add4H, add5H, add5L, };\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n//# sourceMappingURL=_u64.js.map",
    "import { HashMD } from './_md.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nexport class SHA512 extends HashMD {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nclass SHA512_224 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x8c3d37c8 | 0;\n        this.Al = 0x19544da2 | 0;\n        this.Bh = 0x73e19966 | 0;\n        this.Bl = 0x89dcd4d6 | 0;\n        this.Ch = 0x1dfab7ae | 0;\n        this.Cl = 0x32ff9c82 | 0;\n        this.Dh = 0x679dd514 | 0;\n        this.Dl = 0x582f9fcf | 0;\n        this.Eh = 0x0f6d2b69 | 0;\n        this.El = 0x7bd44da8 | 0;\n        this.Fh = 0x77e36f73 | 0;\n        this.Fl = 0x04c48942 | 0;\n        this.Gh = 0x3f9d85a8 | 0;\n        this.Gl = 0x6a1d36c8 | 0;\n        this.Hh = 0x1112e6ad | 0;\n        this.Hl = 0x91d692a1 | 0;\n        this.outputLen = 28;\n    }\n}\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexport const sha512 = /* @__PURE__ */ wrapConstructor(() => new SHA512());\nexport const sha512_224 = /* @__PURE__ */ wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = /* @__PURE__ */ wrapConstructor(() => new SHA512_256());\nexport const sha384 = /* @__PURE__ */ wrapConstructor(() => new SHA384());\n//# sourceMappingURL=sha512.js.map",
    "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nexport function isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nexport function abytes(item) {\n    if (!isBytes(item))\n        throw new Error('Uint8Array expected');\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nexport function numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nexport function hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // Big Endian\n    return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes) {\n    abytes(bytes);\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nexport function numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n        }\n    }\n    else if (isBytes(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(`${title} must be hex string or Uint8Array`);\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n, pos, value) {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\n// DRBG\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n()) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || isBytes(val),\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nexport function validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error(`Invalid validator \"${type}\", expected function`);\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n//# sourceMappingURL=utils.js.map",
    "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport { bitMask, bytesToNumberBE, bytesToNumberLE, ensureBytes, numberToBytesBE, numberToBytesLE, validateObject, } from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n// Calculates a modulo b\nexport function mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num, power, modulo) {\n    if (modulo <= _0n || power < _0n)\n        throw new Error('Expected power/modulo > 0');\n    if (modulo === _1n)\n        return _0n;\n    let res = _1n;\n    while (power > _0n) {\n        if (power & _1n)\n            res = (res * num) % modulo;\n        num = (num * num) % modulo;\n        power >>= _1n;\n    }\n    return res;\n}\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n// Inverses number over modulo\nexport function invert(number, modulo) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n) / _2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)\n        ;\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++)\n        ;\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n) / _4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\n            throw new Error('Cannot find square root');\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while (!Fp.eql(b, Fp.ONE)) {\n            if (Fp.eql(b, Fp.ZERO))\n                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for (let t2 = Fp.sqr(b); m < r; m++) {\n                if (Fp.eql(t2, Fp.ONE))\n                    break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\nexport function FpSqrt(P) {\n    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n === _3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n) / _4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    if (P % _16n === _9n) {\n        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n        // Means we cannot use sqrt for constants at all!\n        //\n        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n        // sqrt = (x) => {\n        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n        // }\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nexport function validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return validateObject(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n)\n        throw new Error('Expected power > 0');\n    if (power === _0n)\n        return f.ONE;\n    if (power === _1n)\n        return num;\n    let p = f.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\nexport function FpDiv(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare(f) {\n    const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n    return (x) => {\n        const p = f.pow(x, legendreConst);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\n// CURVE.n lengths\nexport function nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n)\n        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('Field lengths over 2048 bytes are not supported');\n    const sqrtP = FpSqrt(ORDER);\n    const f = Object.freeze({\n        ORDER,\n        BITS,\n        BYTES,\n        MASK: bitMask(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c) => (c ? b : a),\n        toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n            return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n        },\n    });\n    return Object.freeze(f);\n}\nexport function FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexport function FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = ensureBytes('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n    const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n    const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n//# sourceMappingURL=modular.js.map",
    "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF(c, bits) {\n    const constTimeNegate = (condition, item) => {\n        const neg = item.negate();\n        return condition ? neg : item;\n    };\n    const opts = (W) => {\n        const windows = Math.ceil(bits / W) + 1; // +1, because\n        const windowSize = 2 ** (W - 1); // -1 because we skip zero\n        return { windows, windowSize };\n    };\n    return {\n        constTimeNegate,\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n) {\n            let p = c.ZERO;\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = opts(W);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = opts(W);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                }\n                else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        wNAFCached(P, precomputesMap, n, transform) {\n            // @ts-ignore\n            const W = P._WINDOW_SIZE || 1;\n            // Calculate precomputes on a first run, reuse them after\n            let comp = precomputesMap.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1) {\n                    precomputesMap.set(P, transform(comp));\n                }\n            }\n            return this.wNAF(W, comp, n);\n        },\n    };\n}\nexport function validateBasic(curve) {\n    validateField(curve.Fp);\n    validateObject(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...nLength(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\n//# sourceMappingURL=curve.js.map",
    "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y²\nimport { validateBasic, wNAF } from './curve.js';\nimport { mod } from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes } from './utils.js';\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _8n = BigInt(8);\n// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\nconst VERIFY_DEFAULT = { zip215: true };\nfunction validateOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(curve, {\n        hash: 'function',\n        a: 'bigint',\n        d: 'bigint',\n        randomBytes: 'function',\n    }, {\n        adjustScalarBytes: 'function',\n        domain: 'function',\n        uvRatio: 'function',\n        mapToCurve: 'function',\n    });\n    // Set defaults\n    return Object.freeze({ ...opts });\n}\n// It is not generic twisted curve for now, but ed25519/ed448 generic implementation\nexport function twistedEdwards(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER, prehash: prehash, hash: cHash, randomBytes, nByteLength, h: cofactor, } = CURVE;\n    const MASK = _2n << (BigInt(nByteLength * 8) - _1n);\n    const modP = Fp.create; // Function overrides\n    // sqrt(u/v)\n    const uvRatio = CURVE.uvRatio ||\n        ((u, v) => {\n            try {\n                return { isValid: true, value: Fp.sqrt(u * Fp.inv(v)) };\n            }\n            catch (e) {\n                return { isValid: false, value: _0n };\n            }\n        });\n    const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes) => bytes); // NOOP\n    const domain = CURVE.domain ||\n        ((data, ctx, phflag) => {\n            if (ctx.length || phflag)\n                throw new Error('Contexts/pre-hash are not supported');\n            return data;\n        }); // NOOP\n    const inBig = (n) => typeof n === 'bigint' && _0n < n; // n in [1..]\n    const inRange = (n, max) => inBig(n) && inBig(max) && n < max; // n in [1..max-1]\n    const in0MaskRange = (n) => n === _0n || inRange(n, MASK); // n in [0..MASK-1]\n    function assertInRange(n, max) {\n        // n in [1..max-1]\n        if (inRange(n, max))\n            return n;\n        throw new Error(`Expected valid scalar < ${max}, got ${typeof n} ${n}`);\n    }\n    function assertGE0(n) {\n        // n in [0..CURVE_ORDER-1]\n        return n === _0n ? n : assertInRange(n, CURVE_ORDER); // GE = prime subgroup, not full group\n    }\n    const pointPrecomputes = new Map();\n    function isPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ExtendedPoint expected');\n    }\n    // Extended Point works in extended coordinates: (x, y, z, t) ∋ (x=x/z, y=y/z, t=xy).\n    // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n    class Point {\n        constructor(ex, ey, ez, et) {\n            this.ex = ex;\n            this.ey = ey;\n            this.ez = ez;\n            this.et = et;\n            if (!in0MaskRange(ex))\n                throw new Error('x required');\n            if (!in0MaskRange(ey))\n                throw new Error('y required');\n            if (!in0MaskRange(ez))\n                throw new Error('z required');\n            if (!in0MaskRange(et))\n                throw new Error('t required');\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        static fromAffine(p) {\n            if (p instanceof Point)\n                throw new Error('extended point not allowed');\n            const { x, y } = p || {};\n            if (!in0MaskRange(x) || !in0MaskRange(y))\n                throw new Error('invalid affine point');\n            return new Point(x, y, _1n, modP(x * y));\n        }\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.ez));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this._WINDOW_SIZE = windowSize;\n            pointPrecomputes.delete(this);\n        }\n        // Not required for fromHex(), which always creates valid points.\n        // Could be useful for fromAffine().\n        assertValidity() {\n            const { a, d } = CURVE;\n            if (this.is0())\n                throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n            // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n            // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n            const { ex: X, ey: Y, ez: Z, et: T } = this;\n            const X2 = modP(X * X); // X²\n            const Y2 = modP(Y * Y); // Y²\n            const Z2 = modP(Z * Z); // Z²\n            const Z4 = modP(Z2 * Z2); // Z⁴\n            const aX2 = modP(X2 * a); // aX²\n            const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n            const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n            if (left !== right)\n                throw new Error('bad point: equation left != right (1)');\n            // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n            const XY = modP(X * Y);\n            const ZT = modP(Z * T);\n            if (XY !== ZT)\n                throw new Error('bad point: equation left != right (2)');\n        }\n        // Compare one point to another.\n        equals(other) {\n            isPoint(other);\n            const { ex: X1, ey: Y1, ez: Z1 } = this;\n            const { ex: X2, ey: Y2, ez: Z2 } = other;\n            const X1Z2 = modP(X1 * Z2);\n            const X2Z1 = modP(X2 * Z1);\n            const Y1Z2 = modP(Y1 * Z2);\n            const Y2Z1 = modP(Y2 * Z1);\n            return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        negate() {\n            // Flips point sign to a negative one (-x, y in affine coords)\n            return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));\n        }\n        // Fast algo for doubling Extended Point.\n        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n        // Cost: 4M + 4S + 1*a + 6add + 1*2.\n        double() {\n            const { a } = CURVE;\n            const { ex: X1, ey: Y1, ez: Z1 } = this;\n            const A = modP(X1 * X1); // A = X12\n            const B = modP(Y1 * Y1); // B = Y12\n            const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n            const D = modP(a * A); // D = a*A\n            const x1y1 = X1 + Y1;\n            const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n            const G = D + B; // G = D+B\n            const F = G - C; // F = G-C\n            const H = D - B; // H = D-B\n            const X3 = modP(E * F); // X3 = E*F\n            const Y3 = modP(G * H); // Y3 = G*H\n            const T3 = modP(E * H); // T3 = E*H\n            const Z3 = modP(F * G); // Z3 = F*G\n            return new Point(X3, Y3, Z3, T3);\n        }\n        // Fast algo for adding 2 Extended Points.\n        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n        // Cost: 9M + 1*a + 1*d + 7add.\n        add(other) {\n            isPoint(other);\n            const { a, d } = CURVE;\n            const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;\n            const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;\n            // Faster algo for adding 2 Extended Points when curve's a=-1.\n            // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-4\n            // Cost: 8M + 8add + 2*2.\n            // Note: It does not check whether the `other` point is valid.\n            if (a === BigInt(-1)) {\n                const A = modP((Y1 - X1) * (Y2 + X2));\n                const B = modP((Y1 + X1) * (Y2 - X2));\n                const F = modP(B - A);\n                if (F === _0n)\n                    return this.double(); // Same point. Tests say it doesn't affect timing\n                const C = modP(Z1 * _2n * T2);\n                const D = modP(T1 * _2n * Z2);\n                const E = D + C;\n                const G = B + A;\n                const H = D - C;\n                const X3 = modP(E * F);\n                const Y3 = modP(G * H);\n                const T3 = modP(E * H);\n                const Z3 = modP(F * G);\n                return new Point(X3, Y3, Z3, T3);\n            }\n            const A = modP(X1 * X2); // A = X1*X2\n            const B = modP(Y1 * Y2); // B = Y1*Y2\n            const C = modP(T1 * d * T2); // C = T1*d*T2\n            const D = modP(Z1 * Z2); // D = Z1*Z2\n            const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n            const F = D - C; // F = D-C\n            const G = D + C; // G = D+C\n            const H = modP(B - a * A); // H = B-a*A\n            const X3 = modP(E * F); // X3 = E*F\n            const Y3 = modP(G * H); // Y3 = G*H\n            const T3 = modP(E * H); // T3 = E*H\n            const Z3 = modP(F * G); // Z3 = F*G\n            return new Point(X3, Y3, Z3, T3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, pointPrecomputes, n, Point.normalizeZ);\n        }\n        // Constant-time multiplication.\n        multiply(scalar) {\n            const { p, f } = this.wNAF(assertInRange(scalar, CURVE_ORDER));\n            return Point.normalizeZ([p, f])[0];\n        }\n        // Non-constant-time multiplication. Uses double-and-add algorithm.\n        // It's faster, but should only be used when you don't care about\n        // an exposed private key e.g. sig verification.\n        // Does NOT allow scalars higher than CURVE.n.\n        multiplyUnsafe(scalar) {\n            let n = assertGE0(scalar); // 0 <= scalar < CURVE.n\n            if (n === _0n)\n                return I;\n            if (this.equals(I) || n === _1n)\n                return this;\n            if (this.equals(G))\n                return this.wNAF(n).p;\n            return wnaf.unsafeLadder(this, n);\n        }\n        // Checks if point is of small order.\n        // If you add something to small order point, you will have \"dirty\"\n        // point with torsion component.\n        // Multiplies point by cofactor and checks if the result is 0.\n        isSmallOrder() {\n            return this.multiplyUnsafe(cofactor).is0();\n        }\n        // Multiplies point by curve order and checks if the result is 0.\n        // Returns `false` is the point is dirty.\n        isTorsionFree() {\n            return wnaf.unsafeLadder(this, CURVE_ORDER).is0();\n        }\n        // Converts Extended point to default (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        toAffine(iz) {\n            const { ex: x, ey: y, ez: z } = this;\n            const is0 = this.is0();\n            if (iz == null)\n                iz = is0 ? _8n : Fp.inv(z); // 8 was chosen arbitrarily\n            const ax = modP(x * iz);\n            const ay = modP(y * iz);\n            const zz = modP(z * iz);\n            if (is0)\n                return { x: _0n, y: _1n };\n            if (zz !== _1n)\n                throw new Error('invZ was invalid');\n            return { x: ax, y: ay };\n        }\n        clearCofactor() {\n            const { h: cofactor } = CURVE;\n            if (cofactor === _1n)\n                return this;\n            return this.multiplyUnsafe(cofactor);\n        }\n        // Converts hash string or Uint8Array to Point.\n        // Uses algo from RFC8032 5.1.3.\n        static fromHex(hex, zip215 = false) {\n            const { d, a } = CURVE;\n            const len = Fp.BYTES;\n            hex = ensureBytes('pointHex', hex, len); // copy hex to a new array\n            const normed = hex.slice(); // copy again, we'll manipulate it\n            const lastByte = hex[len - 1]; // select last byte\n            normed[len - 1] = lastByte & ~0x80; // clear last bit\n            const y = ut.bytesToNumberLE(normed);\n            if (y === _0n) {\n                // y=0 is allowed\n            }\n            else {\n                // RFC8032 prohibits >= p, but ZIP215 doesn't\n                if (zip215)\n                    assertInRange(y, MASK); // zip215=true [1..P-1] (2^255-19-1 for ed25519)\n                else\n                    assertInRange(y, Fp.ORDER); // zip215=false [1..MASK-1] (2^256-1 for ed25519)\n            }\n            // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n            // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n            const y2 = modP(y * y); // denominator is always non-0 mod p.\n            const u = modP(y2 - _1n); // u = y² - 1\n            const v = modP(d * y2 - a); // v = d y² + 1.\n            let { isValid, value: x } = uvRatio(u, v); // √(u/v)\n            if (!isValid)\n                throw new Error('Point.fromHex: invalid y coordinate');\n            const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n            const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n            if (!zip215 && x === _0n && isLastByteOdd)\n                // if x=0 and x_0 = 1, fail\n                throw new Error('Point.fromHex: x=0 and x_0=1');\n            if (isLastByteOdd !== isXOdd)\n                x = modP(-x); // if x_0 != x mod 2, set x = p-x\n            return Point.fromAffine({ x, y });\n        }\n        static fromPrivateKey(privKey) {\n            return getExtendedPublicKey(privKey).point;\n        }\n        toRawBytes() {\n            const { x, y } = this.toAffine();\n            const bytes = ut.numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)\n            bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n            return bytes; // and use the last byte to encode sign of x\n        }\n        toHex() {\n            return ut.bytesToHex(this.toRawBytes()); // Same as toRawBytes, but returns string.\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n    Point.ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n    const { BASE: G, ZERO: I } = Point;\n    const wnaf = wNAF(Point, nByteLength * 8);\n    function modN(a) {\n        return mod(a, CURVE_ORDER);\n    }\n    // Little-endian SHA512 with modulo n\n    function modN_LE(hash) {\n        return modN(ut.bytesToNumberLE(hash));\n    }\n    /** Convenience method that creates public key and other stuff. RFC8032 5.1.5 */\n    function getExtendedPublicKey(key) {\n        const len = nByteLength;\n        key = ensureBytes('private key', key, len);\n        // Hash private key with curve's hash function to produce uniformingly random input\n        // Check byte lengths: ensure(64, h(ensure(32, key)))\n        const hashed = ensureBytes('hashed private key', cHash(key), 2 * len);\n        const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n        const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n        const scalar = modN_LE(head); // The actual private scalar\n        const point = G.multiply(scalar); // Point on Edwards curve aka public key\n        const pointBytes = point.toRawBytes(); // Uint8Array representation\n        return { head, prefix, scalar, point, pointBytes };\n    }\n    // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared\n    function getPublicKey(privKey) {\n        return getExtendedPublicKey(privKey).pointBytes;\n    }\n    // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n    function hashDomainToScalar(context = new Uint8Array(), ...msgs) {\n        const msg = ut.concatBytes(...msgs);\n        return modN_LE(cHash(domain(msg, ensureBytes('context', context), !!prehash)));\n    }\n    /** Signs message with privateKey. RFC8032 5.1.6 */\n    function sign(msg, privKey, options = {}) {\n        msg = ensureBytes('message', msg);\n        if (prehash)\n            msg = prehash(msg); // for ed25519ph etc.\n        const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);\n        const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n        const R = G.multiply(r).toRawBytes(); // R = rG\n        const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n        const s = modN(r + k * scalar); // S = (r + k * s) mod L\n        assertGE0(s); // 0 <= s < l\n        const res = ut.concatBytes(R, ut.numberToBytesLE(s, Fp.BYTES));\n        return ensureBytes('result', res, nByteLength * 2); // 64-byte signature\n    }\n    const verifyOpts = VERIFY_DEFAULT;\n    function verify(sig, msg, publicKey, options = verifyOpts) {\n        const { context, zip215 } = options;\n        const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n        sig = ensureBytes('signature', sig, 2 * len); // An extended group equation is checked.\n        msg = ensureBytes('message', msg);\n        if (prehash)\n            msg = prehash(msg); // for ed25519ph, etc\n        const s = ut.bytesToNumberLE(sig.slice(len, 2 * len));\n        // zip215: true is good for consensus-critical apps and allows points < 2^256\n        // zip215: false follows RFC8032 / NIST186-5 and restricts points to CURVE.p\n        let A, R, SB;\n        try {\n            A = Point.fromHex(publicKey, zip215);\n            R = Point.fromHex(sig.slice(0, len), zip215);\n            SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n        }\n        catch (error) {\n            return false;\n        }\n        if (!zip215 && A.isSmallOrder())\n            return false;\n        const k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);\n        const RkA = R.add(A.multiplyUnsafe(k));\n        // [8][S]B = [8]R + [8][k]A'\n        return RkA.subtract(SB).clearCofactor().equals(Point.ZERO);\n    }\n    G._setWindowSize(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n    const utils = {\n        getExtendedPublicKey,\n        // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.\n        randomPrivateKey: () => randomBytes(Fp.BYTES),\n        /**\n         * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n         * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n         * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n         * @param windowSize 2, 4, 8, 16\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3));\n            return point;\n        },\n    };\n    return {\n        CURVE,\n        getPublicKey,\n        sign,\n        verify,\n        ExtendedPoint: Point,\n        utils,\n    };\n}\n//# sourceMappingURL=edwards.js.map",
    "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha512 } from '@noble/hashes/sha512';\nimport { concatBytes, randomBytes, utf8ToBytes } from '@noble/hashes/utils';\nimport { twistedEdwards } from './abstract/edwards.js';\nimport { createHasher, expand_message_xmd } from './abstract/hash-to-curve.js';\nimport { Field, FpSqrtEven, isNegativeLE, mod, pow2 } from './abstract/modular.js';\nimport { montgomery } from './abstract/montgomery.js';\nimport { bytesToHex, bytesToNumberLE, ensureBytes, equalBytes, numberToBytesLE, } from './abstract/utils.js';\n/**\n * ed25519 Twisted Edwards curve with following addons:\n * - X25519 ECDH\n * - Ristretto cofactor elimination\n * - Elligator hash-to-group / point indistinguishability\n */\nconst ED25519_P = BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949');\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst ED25519_SQRT_M1 = /* @__PURE__ */ BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _5n = BigInt(5), _8n = BigInt(8);\nfunction ed25519_pow_2_252_3(x) {\n    // prettier-ignore\n    const _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);\n    const P = ED25519_P;\n    const x2 = (x * x) % P;\n    const b2 = (x2 * x) % P; // x^3, 11\n    const b4 = (pow2(b2, _2n, P) * b2) % P; // x^15, 1111\n    const b5 = (pow2(b4, _1n, P) * x) % P; // x^31\n    const b10 = (pow2(b5, _5n, P) * b5) % P;\n    const b20 = (pow2(b10, _10n, P) * b10) % P;\n    const b40 = (pow2(b20, _20n, P) * b20) % P;\n    const b80 = (pow2(b40, _40n, P) * b40) % P;\n    const b160 = (pow2(b80, _80n, P) * b80) % P;\n    const b240 = (pow2(b160, _80n, P) * b80) % P;\n    const b250 = (pow2(b240, _10n, P) * b10) % P;\n    const pow_p_5_8 = (pow2(b250, _2n, P) * x) % P;\n    // ^ To pow to (p+3)/8, multiply it by x.\n    return { pow_p_5_8, b2 };\n}\nfunction adjustScalarBytes(bytes) {\n    // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,\n    // set the three least significant bits of the first byte\n    bytes[0] &= 248; // 0b1111_1000\n    // and the most significant bit of the last to zero,\n    bytes[31] &= 127; // 0b0111_1111\n    // set the second most significant bit of the last byte to 1\n    bytes[31] |= 64; // 0b0100_0000\n    return bytes;\n}\n// sqrt(u/v)\nfunction uvRatio(u, v) {\n    const P = ED25519_P;\n    const v3 = mod(v * v * v, P); // v³\n    const v7 = mod(v3 * v3 * v, P); // v⁷\n    // (p+3)/8 and (p-5)/8\n    const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;\n    let x = mod(u * v3 * pow, P); // (uv³)(uv⁷)^(p-5)/8\n    const vx2 = mod(v * x * x, P); // vx²\n    const root1 = x; // First root candidate\n    const root2 = mod(x * ED25519_SQRT_M1, P); // Second root candidate\n    const useRoot1 = vx2 === u; // If vx² = u (mod p), x is a square root\n    const useRoot2 = vx2 === mod(-u, P); // If vx² = -u, set x <-- x * 2^((p-1)/4)\n    const noRoot = vx2 === mod(-u * ED25519_SQRT_M1, P); // There is no valid root, vx² = -u√(-1)\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2; // We return root2 anyway, for const-time\n    if (isNegativeLE(x, P))\n        x = mod(-x, P);\n    return { isValid: useRoot1 || useRoot2, value: x };\n}\n// Just in case\nexport const ED25519_TORSION_SUBGROUP = [\n    '0100000000000000000000000000000000000000000000000000000000000000',\n    'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n    '0000000000000000000000000000000000000000000000000000000000000080',\n    '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n    'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n    '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n    '0000000000000000000000000000000000000000000000000000000000000000',\n    'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n];\nconst Fp = /* @__PURE__ */ (() => Field(ED25519_P, undefined, true))();\nconst ed25519Defaults = /* @__PURE__ */ (() => ({\n    // Param: a\n    a: BigInt(-1), // Fp.create(-1) is proper; our way still works and is faster\n    // d is equal to -121665/121666 over finite field.\n    // Negative number is P - number, and division is invert(number, P)\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    // Finite field 𝔽p over which we'll do calculations; 2n**255n - 19n\n    Fp,\n    // Subgroup order: how many points curve has\n    // 2n**252n + 27742317777372353535851937790883648493n;\n    n: BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989'),\n    // Cofactor\n    h: _8n,\n    // Base point (x, y) aka generator point\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n    hash: sha512,\n    randomBytes,\n    adjustScalarBytes,\n    // dom2\n    // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n    // Constant-time, u/√v\n    uvRatio,\n}))();\nexport const ed25519 = /* @__PURE__ */ (() => twistedEdwards(ed25519Defaults))();\nfunction ed25519_domain(data, ctx, phflag) {\n    if (ctx.length > 255)\n        throw new Error('Context is too big');\n    return concatBytes(utf8ToBytes('SigEd25519 no Ed25519 collisions'), new Uint8Array([phflag ? 1 : 0, ctx.length]), ctx, data);\n}\nexport const ed25519ctx = /* @__PURE__ */ (() => twistedEdwards({\n    ...ed25519Defaults,\n    domain: ed25519_domain,\n}))();\nexport const ed25519ph = /* @__PURE__ */ (() => twistedEdwards(Object.assign({}, ed25519Defaults, {\n    domain: ed25519_domain,\n    prehash: sha512,\n})))();\nexport const x25519 = /* @__PURE__ */ (() => montgomery({\n    P: ED25519_P,\n    a: BigInt(486662),\n    montgomeryBits: 255, // n is 253 bits\n    nByteLength: 32,\n    Gu: BigInt(9),\n    powPminus2: (x) => {\n        const P = ED25519_P;\n        // x^(p-2) aka x^(2^255-21)\n        const { pow_p_5_8, b2 } = ed25519_pow_2_252_3(x);\n        return mod(pow2(pow_p_5_8, _3n, P) * b2, P);\n    },\n    adjustScalarBytes,\n    randomBytes,\n}))();\n/**\n * Converts ed25519 public key to x25519 public key. Uses formula:\n * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n * @example\n *   const someonesPub = ed25519.getPublicKey(ed25519.utils.randomPrivateKey());\n *   const aPriv = x25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(aPriv, edwardsToMontgomeryPub(someonesPub))\n */\nexport function edwardsToMontgomeryPub(edwardsPub) {\n    const { y } = ed25519.ExtendedPoint.fromHex(edwardsPub);\n    const _1n = BigInt(1);\n    return Fp.toBytes(Fp.create((_1n + y) * Fp.inv(_1n - y)));\n}\nexport const edwardsToMontgomery = edwardsToMontgomeryPub; // deprecated\n/**\n * Converts ed25519 secret key to x25519 secret key.\n * @example\n *   const someonesPub = x25519.getPublicKey(x25519.utils.randomPrivateKey());\n *   const aPriv = ed25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(edwardsToMontgomeryPriv(aPriv), someonesPub)\n */\nexport function edwardsToMontgomeryPriv(edwardsPriv) {\n    const hashed = ed25519Defaults.hash(edwardsPriv.subarray(0, 32));\n    return ed25519Defaults.adjustScalarBytes(hashed).subarray(0, 32);\n}\n// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)\n// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since\n// SageMath returns different root first and everything falls apart\nconst ELL2_C1 = /* @__PURE__ */ (() => (Fp.ORDER + _3n) / _8n)(); // 1. c1 = (q + 3) / 8       # Integer arithmetic\nconst ELL2_C2 = /* @__PURE__ */ (() => Fp.pow(_2n, ELL2_C1))(); // 2. c2 = 2^c1\nconst ELL2_C3 = /* @__PURE__ */ (() => Fp.sqrt(Fp.neg(Fp.ONE)))(); // 3. c3 = sqrt(-1)\n// prettier-ignore\nfunction map_to_curve_elligator2_curve25519(u) {\n    const ELL2_C4 = (Fp.ORDER - _5n) / _8n; // 4. c4 = (q - 5) / 8       # Integer arithmetic\n    const ELL2_J = BigInt(486662);\n    let tv1 = Fp.sqr(u); //  1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, _2n); //  2.  tv1 = 2 * tv1\n    let xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not\n    let x1n = Fp.neg(ELL2_J); //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)\n    let tv2 = Fp.sqr(xd); //  5.  tv2 = xd^2\n    let gxd = Fp.mul(tv2, xd); //  6.  gxd = tv2 * xd        # gxd = xd^3\n    let gx1 = Fp.mul(tv1, ELL2_J); //  7.  gx1 = J * tv1         # x1n + J * xd\n    gx1 = Fp.mul(gx1, x1n); //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd\n    gx1 = Fp.add(gx1, tv2); //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2\n    gx1 = Fp.mul(gx1, x1n); //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n    let tv3 = Fp.sqr(gxd); //  11. tv3 = gxd^2\n    tv2 = Fp.sqr(tv3); //  12. tv2 = tv3^2           # gxd^4\n    tv3 = Fp.mul(tv3, gxd); //  13. tv3 = tv3 * gxd       # gxd^3\n    tv3 = Fp.mul(tv3, gx1); //  14. tv3 = tv3 * gx1       # gx1 * gxd^3\n    tv2 = Fp.mul(tv2, tv3); //  15. tv2 = tv2 * tv3       # gx1 * gxd^7\n    let y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)\n    y11 = Fp.mul(y11, tv3); //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)\n    let y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3\n    tv2 = Fp.sqr(y11); //  19. tv2 = y11^2\n    tv2 = Fp.mul(tv2, gxd); //  20. tv2 = tv2 * gxd\n    let e1 = Fp.eql(tv2, gx1); //  21.  e1 = tv2 == gx1\n    let y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt\n    let x2n = Fp.mul(x1n, tv1); //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd\n    let y21 = Fp.mul(y11, u); //  24. y21 = y11 * u\n    y21 = Fp.mul(y21, ELL2_C2); //  25. y21 = y21 * c2\n    let y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3\n    let gx2 = Fp.mul(gx1, tv1); //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)\n    tv2 = Fp.sqr(y21); //  28. tv2 = y21^2\n    tv2 = Fp.mul(tv2, gxd); //  29. tv2 = tv2 * gxd\n    let e2 = Fp.eql(tv2, gx2); //  30.  e2 = tv2 == gx2\n    let y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt\n    tv2 = Fp.sqr(y1); //  32. tv2 = y1^2\n    tv2 = Fp.mul(tv2, gxd); //  33. tv2 = tv2 * gxd\n    let e3 = Fp.eql(tv2, gx1); //  34.  e3 = tv2 == gx1\n    let xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2\n    let y = Fp.cmov(y2, y1, e3); //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2\n    let e4 = Fp.isOdd(y); //  37.  e4 = sgn0(y) == 1        # Fix sign of y\n    y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)\n    return { xMn: xn, xMd: xd, yMn: y, yMd: _1n }; //  39. return (xn, xd, y, 1)\n}\nconst ELL2_C1_EDWARDS = /* @__PURE__ */ (() => FpSqrtEven(Fp, Fp.neg(BigInt(486664))))(); // sgn0(c1) MUST equal 0\nfunction map_to_curve_elligator2_edwards25519(u) {\n    const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve25519(u); //  1.  (xMn, xMd, yMn, yMd) =\n    // map_to_curve_elligator2_curve25519(u)\n    let xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd\n    xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1\n    let xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM\n    let yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd\n    let yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)\n    let tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd\n    let e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0\n    xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)\n    xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)\n    yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)\n    yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)\n    const inv = Fp.invertBatch([xd, yd]); // batch division\n    return { x: Fp.mul(xn, inv[0]), y: Fp.mul(yn, inv[1]) }; //  13. return (xn, xd, yn, yd)\n}\nconst htf = /* @__PURE__ */ (() => createHasher(ed25519.ExtendedPoint, (scalars) => map_to_curve_elligator2_edwards25519(scalars[0]), {\n    DST: 'edwards25519_XMD:SHA-512_ELL2_RO_',\n    encodeDST: 'edwards25519_XMD:SHA-512_ELL2_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha512,\n}))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\nfunction assertRstPoint(other) {\n    if (!(other instanceof RistPoint))\n        throw new Error('RistrettoPoint expected');\n}\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst SQRT_M1 = ED25519_SQRT_M1;\n// √(ad - 1)\nconst SQRT_AD_MINUS_ONE = /* @__PURE__ */ BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\n// 1 / √(a-d)\nconst INVSQRT_A_MINUS_D = /* @__PURE__ */ BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\n// 1-d²\nconst ONE_MINUS_D_SQ = /* @__PURE__ */ BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\n// (d-1)²\nconst D_MINUS_ONE_SQ = /* @__PURE__ */ BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\n// Calculates 1/√(number)\nconst invertSqrt = (number) => uvRatio(_1n, number);\nconst MAX_255B = /* @__PURE__ */ BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nconst bytes255ToNumberLE = (bytes) => ed25519.CURVE.Fp.create(bytesToNumberLE(bytes) & MAX_255B);\n// Computes Elligator map for Ristretto\n// https://ristretto.group/formulas/elligator.html\nfunction calcElligatorRistrettoMap(r0) {\n    const { d } = ed25519.CURVE;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const r = mod(SQRT_M1 * r0 * r0); // 1\n    const Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2\n    let c = BigInt(-1); // 3\n    const D = mod((c - d * r) * mod(r + d)); // 4\n    let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D); // 5\n    let s_ = mod(s * r0); // 6\n    if (!isNegativeLE(s_, P))\n        s_ = mod(-s_);\n    if (!Ns_D_is_sq)\n        s = s_; // 7\n    if (!Ns_D_is_sq)\n        c = r; // 8\n    const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9\n    const s2 = s * s;\n    const W0 = mod((s + s) * D); // 10\n    const W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11\n    const W2 = mod(_1n - s2); // 12\n    const W3 = mod(_1n + s2); // 13\n    return new ed25519.ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n}\n/**\n * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be\n * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.\n * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n * but it should work in its own namespace: do not combine those two.\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-ristretto255-decaf448\n */\nclass RistPoint {\n    // Private property to discourage combining ExtendedPoint + RistrettoPoint\n    // Always use Ristretto encoding/decoding instead.\n    constructor(ep) {\n        this.ep = ep;\n    }\n    static fromAffine(ap) {\n        return new RistPoint(ed25519.ExtendedPoint.fromAffine(ap));\n    }\n    /**\n     * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.\n     * The hash-to-group operation applies Elligator twice and adds the results.\n     * **Note:** this is one-way map, there is no conversion from point to hash.\n     * https://ristretto.group/formulas/elligator.html\n     * @param hex 64-byte output of a hash function\n     */\n    static hashToCurve(hex) {\n        hex = ensureBytes('ristrettoHash', hex, 64);\n        const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n        const R1 = calcElligatorRistrettoMap(r1);\n        const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n        const R2 = calcElligatorRistrettoMap(r2);\n        return new RistPoint(R1.add(R2));\n    }\n    /**\n     * Converts ristretto-encoded string to ristretto point.\n     * https://ristretto.group/formulas/decoding.html\n     * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding\n     */\n    static fromHex(hex) {\n        hex = ensureBytes('ristrettoHex', hex, 32);\n        const { a, d } = ed25519.CURVE;\n        const P = ed25519.CURVE.Fp.ORDER;\n        const mod = ed25519.CURVE.Fp.create;\n        const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n        const s = bytes255ToNumberLE(hex);\n        // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n        // 3. Check that s is non-negative, or else abort\n        if (!equalBytes(numberToBytesLE(s, 32), hex) || isNegativeLE(s, P))\n            throw new Error(emsg);\n        const s2 = mod(s * s);\n        const u1 = mod(_1n + a * s2); // 4 (a is -1)\n        const u2 = mod(_1n - a * s2); // 5\n        const u1_2 = mod(u1 * u1);\n        const u2_2 = mod(u2 * u2);\n        const v = mod(a * d * u1_2 - u2_2); // 6\n        const { isValid, value: I } = invertSqrt(mod(v * u2_2)); // 7\n        const Dx = mod(I * u2); // 8\n        const Dy = mod(I * Dx * v); // 9\n        let x = mod((s + s) * Dx); // 10\n        if (isNegativeLE(x, P))\n            x = mod(-x); // 10\n        const y = mod(u1 * Dy); // 11\n        const t = mod(x * y); // 12\n        if (!isValid || isNegativeLE(t, P) || y === _0n)\n            throw new Error(emsg);\n        return new RistPoint(new ed25519.ExtendedPoint(x, y, _1n, t));\n    }\n    /**\n     * Encodes ristretto point to Uint8Array.\n     * https://ristretto.group/formulas/encoding.html\n     */\n    toRawBytes() {\n        let { ex: x, ey: y, ez: z, et: t } = this.ep;\n        const P = ed25519.CURVE.Fp.ORDER;\n        const mod = ed25519.CURVE.Fp.create;\n        const u1 = mod(mod(z + y) * mod(z - y)); // 1\n        const u2 = mod(x * y); // 2\n        // Square root always exists\n        const u2sq = mod(u2 * u2);\n        const { value: invsqrt } = invertSqrt(mod(u1 * u2sq)); // 3\n        const D1 = mod(invsqrt * u1); // 4\n        const D2 = mod(invsqrt * u2); // 5\n        const zInv = mod(D1 * D2 * t); // 6\n        let D; // 7\n        if (isNegativeLE(t * zInv, P)) {\n            let _x = mod(y * SQRT_M1);\n            let _y = mod(x * SQRT_M1);\n            x = _x;\n            y = _y;\n            D = mod(D1 * INVSQRT_A_MINUS_D);\n        }\n        else {\n            D = D2; // 8\n        }\n        if (isNegativeLE(x * zInv, P))\n            y = mod(-y); // 9\n        let s = mod((z - y) * D); // 10 (check footer's note, no sqrt(-a))\n        if (isNegativeLE(s, P))\n            s = mod(-s);\n        return numberToBytesLE(s, 32); // 11\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toString() {\n        return this.toHex();\n    }\n    // Compare one point to another.\n    equals(other) {\n        assertRstPoint(other);\n        const { ex: X1, ey: Y1 } = this.ep;\n        const { ex: X2, ey: Y2 } = other.ep;\n        const mod = ed25519.CURVE.Fp.create;\n        // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)\n        const one = mod(X1 * Y2) === mod(Y1 * X2);\n        const two = mod(Y1 * Y2) === mod(X1 * X2);\n        return one || two;\n    }\n    add(other) {\n        assertRstPoint(other);\n        return new RistPoint(this.ep.add(other.ep));\n    }\n    subtract(other) {\n        assertRstPoint(other);\n        return new RistPoint(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n        return new RistPoint(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n        return new RistPoint(this.ep.multiplyUnsafe(scalar));\n    }\n    double() {\n        return new RistPoint(this.ep.double());\n    }\n    negate() {\n        return new RistPoint(this.ep.negate());\n    }\n}\nexport const RistrettoPoint = /* @__PURE__ */ (() => {\n    if (!RistPoint.BASE)\n        RistPoint.BASE = new RistPoint(ed25519.ExtendedPoint.BASE);\n    if (!RistPoint.ZERO)\n        RistPoint.ZERO = new RistPoint(ed25519.ExtendedPoint.ZERO);\n    return RistPoint;\n})();\n// Hashing to ristretto255. https://www.rfc-editor.org/rfc/rfc9380#appendix-B\nexport const hashToRistretto255 = (msg, options) => {\n    const d = options.DST;\n    const DST = typeof d === 'string' ? utf8ToBytes(d) : d;\n    const uniform_bytes = expand_message_xmd(msg, DST, 64, sha512);\n    const P = RistPoint.hashToCurve(uniform_bytes);\n    return P;\n};\nexport const hash_to_ristretto255 = hashToRistretto255; // legacy\n//# sourceMappingURL=ed25519.js.map",
    "import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assertHash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assertExists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assertExists(this);\n        assertBytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map",
    "import { HashMD } from './_md.js';\nimport { rotl, wrapConstructor } from './utils.js';\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\nconst Rho = /* @__PURE__ */ new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);\nconst Id = /* @__PURE__ */ new Uint8Array(new Array(16).fill(0).map((_, i) => i));\nconst Pi = /* @__PURE__ */ Id.map((i) => (9 * i + 5) % 16);\nlet idxL = [Id];\nlet idxR = [Pi];\nfor (let i = 0; i < 4; i++)\n    for (let j of [idxL, idxR])\n        j.push(j[i].map((k) => Rho[k]));\nconst shifts = /* @__PURE__ */ [\n    [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\n    [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\n    [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\n    [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\n    [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\n].map((i) => new Uint8Array(i));\nconst shiftsL = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst shiftsR = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst Kl = /* @__PURE__ */ new Uint32Array([\n    0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e,\n]);\nconst Kr = /* @__PURE__ */ new Uint32Array([\n    0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000,\n]);\n// It's called f() in spec.\nfunction f(group, x, y, z) {\n    if (group === 0)\n        return x ^ y ^ z;\n    else if (group === 1)\n        return (x & y) | (~x & z);\n    else if (group === 2)\n        return (x | ~y) ^ z;\n    else if (group === 3)\n        return (x & z) | (y & ~z);\n    else\n        return x ^ (y | ~z);\n}\n// Temporary buffer, not used to store anything between runs\nconst R_BUF = /* @__PURE__ */ new Uint32Array(16);\nexport class RIPEMD160 extends HashMD {\n    constructor() {\n        super(64, 20, 8, true);\n        this.h0 = 0x67452301 | 0;\n        this.h1 = 0xefcdab89 | 0;\n        this.h2 = 0x98badcfe | 0;\n        this.h3 = 0x10325476 | 0;\n        this.h4 = 0xc3d2e1f0 | 0;\n    }\n    get() {\n        const { h0, h1, h2, h3, h4 } = this;\n        return [h0, h1, h2, h3, h4];\n    }\n    set(h0, h1, h2, h3, h4) {\n        this.h0 = h0 | 0;\n        this.h1 = h1 | 0;\n        this.h2 = h2 | 0;\n        this.h3 = h3 | 0;\n        this.h4 = h4 | 0;\n    }\n    process(view, offset) {\n        for (let i = 0; i < 16; i++, offset += 4)\n            R_BUF[i] = view.getUint32(offset, true);\n        // prettier-ignore\n        let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;\n        // Instead of iterating 0 to 80, we split it into 5 groups\n        // And use the groups in constants, functions, etc. Much simpler\n        for (let group = 0; group < 5; group++) {\n            const rGroup = 4 - group;\n            const hbl = Kl[group], hbr = Kr[group]; // prettier-ignore\n            const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n            const sl = shiftsL[group], sr = shiftsR[group]; // prettier-ignore\n            for (let i = 0; i < 16; i++) {\n                const tl = (rotl(al + f(group, bl, cl, dl) + R_BUF[rl[i]] + hbl, sl[i]) + el) | 0;\n                al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n            }\n            // 2 loops are 10% faster\n            for (let i = 0; i < 16; i++) {\n                const tr = (rotl(ar + f(rGroup, br, cr, dr) + R_BUF[rr[i]] + hbr, sr[i]) + er) | 0;\n                ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n            }\n        }\n        // Add the compressed chunk to the current hash value\n        this.set((this.h1 + cl + dr) | 0, (this.h2 + dl + er) | 0, (this.h3 + el + ar) | 0, (this.h4 + al + br) | 0, (this.h0 + bl + cr) | 0);\n    }\n    roundClean() {\n        R_BUF.fill(0);\n    }\n    destroy() {\n        this.destroyed = true;\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0);\n    }\n}\n/**\n * RIPEMD-160 - a hash function from 1990s.\n * @param message - msg that would be hashed\n */\nexport const ripemd160 = /* @__PURE__ */ wrapConstructor(() => new RIPEMD160());\n//# sourceMappingURL=ripemd160.js.map",
    "import { HashMD, Chi, Maj } from './_md.js';\nimport { rotr, wrapConstructor } from './utils.js';\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state:\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends HashMD {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = SHA256_IV[0] | 0;\n        this.B = SHA256_IV[1] | 0;\n        this.C = SHA256_IV[2] | 0;\n        this.D = SHA256_IV[3] | 0;\n        this.E = SHA256_IV[4] | 0;\n        this.F = SHA256_IV[5] | 0;\n        this.G = SHA256_IV[6] | 0;\n        this.H = SHA256_IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n//# sourceMappingURL=sha256.js.map",
    "/*! micro-key-producer - MIT License (c) 2024 Paul Miller (paulmillr.com) */\nimport { ed25519 } from '@noble/curves/ed25519';\nimport { bytes as assertBytes } from '@noble/hashes/_assert';\nimport { hmac } from '@noble/hashes/hmac';\nimport { ripemd160 } from '@noble/hashes/ripemd160';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { sha512 } from '@noble/hashes/sha512';\nimport { bytesToHex, concatBytes, createView, hexToBytes, utf8ToBytes } from '@noble/hashes/utils';\nexport const MASTER_SECRET = utf8ToBytes('ed25519 seed');\nexport const HARDENED_OFFSET = 0x80000000;\nconst ZERO = new Uint8Array([0]);\nfunction ensureBytes(b, ...lengths) {\n    if (typeof b === 'string')\n        b = hexToBytes(b);\n    assertBytes(b, ...lengths);\n    return b;\n}\nconst hash160 = (data) => ripemd160(sha256(data));\nconst fromU32 = (data) => createView(data).getUint32(0, false);\nconst toU32 = (n) => {\n    if (!Number.isSafeInteger(n) || n < 0 || n > 2 ** 32 - 1) {\n        throw new Error(`Invalid number=${n}. Should be from 0 to 2 ** 32 - 1`);\n    }\n    const buf = new Uint8Array(4);\n    createView(buf).setUint32(0, n, false);\n    return buf;\n};\nexport class HDKey {\n    get publicKeyRaw() {\n        return ed25519.getPublicKey(this.privateKey);\n    }\n    get publicKey() {\n        return concatBytes(ZERO, this.publicKeyRaw);\n    }\n    get pubHash() {\n        return hash160(this.publicKey);\n    }\n    get fingerprint() {\n        return fromU32(this.pubHash);\n    }\n    get fingerprintHex() {\n        return bytesToHex(toU32(this.fingerprint));\n    }\n    get parentFingerprintHex() {\n        return bytesToHex(toU32(this.parentFingerprint));\n    }\n    static fromMasterSeed(seed) {\n        seed = ensureBytes(seed);\n        if (8 * seed.length < 128 || 8 * seed.length > 512) {\n            throw new Error(`HDKey: wrong seed length=${seed.length}. Should be between 128 and 512 bits; 256 bits is advised)`);\n        }\n        const I = hmac(sha512, MASTER_SECRET, seed);\n        return new HDKey({\n            privateKey: I.slice(0, 32),\n            chainCode: I.slice(32),\n        });\n    }\n    constructor(opt) {\n        this.depth = 0;\n        this.index = 0;\n        this.parentFingerprint = 0;\n        if (!opt || typeof opt !== 'object')\n            throw new Error('HDKey.constructor must not be called directly');\n        assertBytes(opt.privateKey, 32);\n        assertBytes(opt.chainCode, 32);\n        this.depth = opt.depth || 0;\n        this.index = opt.index || 0;\n        this.parentFingerprint = opt.parentFingerprint || 0;\n        if (!this.depth) {\n            if (this.parentFingerprint || this.index)\n                throw new Error('HDKey: zero depth with non-zero index/parent fingerprint');\n        }\n        this.chainCode = opt.chainCode;\n        this.privateKey = opt.privateKey;\n    }\n    derive(path, forceHardened = false) {\n        if (!/^[mM]'?/.test(path))\n            throw new Error('Path must start with \"m\" or \"M\"');\n        if (/^[mM]'?$/.test(path))\n            return this;\n        const parts = path.replace(/^[mM]'?\\//, '').split('/');\n        // tslint:disable-next-line\n        let child = this;\n        for (const c of parts) {\n            const m = /^(\\d+)('?)$/.exec(c);\n            if (!m || m.length !== 3)\n                throw new Error(`Invalid child index: ${c}`);\n            let idx = +m[1];\n            if (!Number.isSafeInteger(idx) || idx >= HARDENED_OFFSET)\n                throw new Error('Invalid index');\n            // hardened key\n            if (forceHardened || m[2] === \"'\")\n                idx += HARDENED_OFFSET;\n            child = child.deriveChild(idx);\n        }\n        return child;\n    }\n    deriveChild(index) {\n        if (index < HARDENED_OFFSET)\n            throw new Error(`Non-hardened child derivation not possible for Ed25519 (index=${index})`);\n        // Hardened child: 0x00 || ser256(kpar) || ser32(index)\n        const data = concatBytes(ZERO, this.privateKey, toU32(index));\n        const I = hmac(sha512, this.chainCode, data);\n        return new HDKey({\n            chainCode: I.slice(32),\n            depth: this.depth + 1,\n            parentFingerprint: this.fingerprint,\n            index,\n            privateKey: I.slice(0, 32),\n        });\n    }\n    sign(message) {\n        return ed25519.sign(message, this.privateKey);\n    }\n    verify(message, signature) {\n        signature = ensureBytes(signature, 64);\n        return ed25519.verify(signature, message, this.publicKeyRaw);\n    }\n}\nexport default HDKey;\n//# sourceMappingURL=slip10.js.map"
  ],
  "mappings": "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",
  "debugId": "B5506F08CB1FB66664756E2164756E21",
  "names": []
}
{
  "version": 3,
  "sources": ["../src/toolbox/baseSubstrateToolbox.ts", "../src/types/network.ts", "../src/toolbox/toolboxFactory.ts"],
  "sourcesContent": [
    "import { type ApiPromise, Keyring } from \"@polkadot/api\";\nimport type { SubmittableExtrinsic } from \"@polkadot/api/types\";\nimport type { Callback, IKeyringPair, ISubmittableResult, Signer } from \"@polkadot/types/types\";\nimport { hexToU8a, isHex, u8aToHex } from \"@polkadot/util\";\nimport {\n  cryptoWaitReady,\n  decodeAddress as decodePolkadotAddress,\n  encodeAddress as encodePolkadotAddress,\n} from \"@polkadot/util-crypto\";\nimport {\n  type AssetValue,\n  Chain,\n  type SubstrateChain,\n  SwapKitError,\n  SwapKitNumber,\n} from \"@swapkit/helpers\";\n\nimport { Network, type SubstrateNetwork } from \"../types/network.ts\";\n\n// TODO combine this type with the more general SK type\ntype SubstrateTransferParams = {\n  recipient: string;\n  assetValue: AssetValue;\n  from?: string;\n};\n\nexport const isKeyringPair = (account: IKeyringPair | Signer): account is IKeyringPair => {\n  return \"address\" in account;\n};\n\nexport const createKeyring = async (phrase: string, networkPrefix: number) => {\n  await cryptoWaitReady();\n\n  return new Keyring({ type: \"sr25519\", ss58Format: networkPrefix }).addFromUri(phrase);\n};\n\nconst getNonce = (api: ApiPromise, address: string) => api.rpc.system.accountNextIndex(address);\n\nconst getBalance = async (api: ApiPromise, gasAsset: AssetValue, address: string) => {\n  const data = await api.query.system?.account?.(address);\n\n  // @ts-expect-error @Towan some parts of data missing?\n  if (!data?.data?.free || data?.data?.isEmpty) {\n    return [gasAsset.set(0)];\n  }\n\n  return [\n    gasAsset.set(\n      // @ts-expect-error @Towan some parts of data missing?\n      SwapKitNumber.fromBigInt(BigInt(data.data.free.toString()), gasAsset.decimal).getValue(\n        \"string\",\n      ),\n    ),\n  ];\n};\n\nconst validateAddress = (address: string, networkPrefix: number) => {\n  try {\n    const decodedAddress = decodeAddress(address, networkPrefix);\n\n    encodeAddress(decodedAddress, \"ss58\", networkPrefix);\n\n    return true;\n  } catch (_error) {\n    return false;\n  }\n};\n\nconst createTransfer = (\n  api: ApiPromise,\n  { recipient, amount }: { recipient: string; amount: number },\n) => api.tx.balances?.transferAllowDeath?.(recipient, amount);\n\nconst transfer = async (\n  api: ApiPromise,\n  signer: IKeyringPair | Signer,\n  { recipient, assetValue, from }: SubstrateTransferParams,\n) => {\n  const transfer = createTransfer(api, {\n    recipient,\n    amount: assetValue.getBaseValue(\"number\"),\n  });\n\n  const isKeyring = isKeyringPair(signer);\n\n  if (!transfer) return;\n\n  const address = from || (isKeyring ? (signer as IKeyringPair).address : undefined);\n  if (!address) throw new SwapKitError(\"core_transaction_invalid_sender_address\");\n\n  const nonce = await getNonce(api, address);\n\n  const tx = await transfer.signAndSend(isKeyring ? signer : address, {\n    signer: isKeyring ? undefined : signer,\n    nonce,\n  });\n\n  return tx?.toString();\n};\n\nconst estimateTransactionFee = async (\n  api: ApiPromise,\n  signer: IKeyringPair | Signer,\n  gasAsset: AssetValue,\n  { recipient, assetValue, from }: SubstrateTransferParams,\n) => {\n  const transfer = createTransfer(api, { recipient, amount: assetValue.getBaseValue(\"number\") });\n\n  const address = from || (isKeyringPair(signer) && signer.address);\n  if (!address) return;\n\n  const paymentInfo = (await transfer?.paymentInfo(address, {\n    nonce: await getNonce(api, address),\n  })) || { partialFee: 0 };\n  return gasAsset.set(\n    SwapKitNumber.fromBigInt(BigInt(paymentInfo.partialFee.toString()), gasAsset.decimal).getValue(\n      \"string\",\n    ),\n  );\n};\n\nconst broadcast = async (\n  tx: SubmittableExtrinsic<\"promise\">,\n  callback?: Callback<ISubmittableResult>,\n) => {\n  if (callback) return tx.send(callback);\n  const hash = await tx.send();\n  return hash.toString();\n};\n\nconst sign = async (signer: IKeyringPair, tx: SubmittableExtrinsic<\"promise\">) => {\n  const signedTx = await tx.signAsync(signer);\n  return signedTx;\n};\n\nconst signAndBroadcast = (\n  signer: IKeyringPair,\n  tx: SubmittableExtrinsic<\"promise\">,\n  callback?: Callback<ISubmittableResult>,\n) => {\n  if (callback) return tx.signAndSend(signer, callback);\n  const hash = tx.signAndSend(signer);\n  return hash.toString();\n};\n\nfunction decodeAddress(address: string, networkPrefix?: number) {\n  return isHex(address)\n    ? hexToU8a(address)\n    : decodePolkadotAddress(address, undefined, networkPrefix);\n}\n\nfunction encodeAddress(\n  address: Uint8Array,\n  encoding: \"ss58\" | \"hex\" = \"ss58\",\n  networkPrefix?: number,\n) {\n  if (encoding === \"hex\") {\n    return u8aToHex(address);\n  }\n  return encodePolkadotAddress(address, networkPrefix);\n}\n\nexport const BaseSubstrateToolbox = ({\n  api,\n  network,\n  gasAsset,\n  signer,\n}: {\n  api: ApiPromise;\n  network: SubstrateNetwork;\n  gasAsset: AssetValue;\n  signer: IKeyringPair | Signer;\n}) => ({\n  api,\n  network,\n  decodeAddress,\n  encodeAddress,\n  createKeyring: (phrase: string) => createKeyring(phrase, network.prefix),\n  getAddress: (keyring: IKeyringPair | Signer = signer) =>\n    isKeyringPair(keyring) ? keyring.address : undefined,\n  createTransfer: ({ recipient, assetValue }: { recipient: string; assetValue: AssetValue }) =>\n    createTransfer(api, { recipient, amount: assetValue.getBaseValue(\"number\") }),\n  getBalance: (address: string) => getBalance(api, gasAsset, address),\n  validateAddress: (address: string) => validateAddress(address, network.prefix),\n  transfer: (params: SubstrateTransferParams) => transfer(api, signer, params),\n  estimateTransactionFee: (params: SubstrateTransferParams) =>\n    estimateTransactionFee(api, signer, gasAsset, params),\n  sign: (tx: SubmittableExtrinsic<\"promise\">) => {\n    if (isKeyringPair(signer)) {\n      return sign(signer, tx);\n    }\n    throw new SwapKitError(\n      \"core_wallet_not_keypair_wallet\",\n      \"Signer does not have keyring pair capabilities required for signing.\",\n    );\n  },\n  broadcast: (tx: SubmittableExtrinsic<\"promise\">, callback?: Callback<ISubmittableResult>) =>\n    broadcast(tx, callback),\n  signAndBroadcast: (\n    tx: SubmittableExtrinsic<\"promise\">,\n    callback?: Callback<ISubmittableResult>,\n  ) => {\n    if (isKeyringPair(signer)) {\n      return signAndBroadcast(signer, tx, callback);\n    }\n\n    throw new SwapKitError(\n      \"core_wallet_not_keypair_wallet\",\n      \"Signer does not have keyring pair capabilities required for signing.\",\n    );\n  },\n});\n\nexport const substrateValidateAddress = ({\n  address,\n  chain,\n}: { address: string; chain: Chain.Polkadot | Chain.Chainflip }) => {\n  switch (chain) {\n    case Chain.Polkadot: {\n      return validateAddress(address, Network.DOT.prefix || Network.GENERIC.prefix);\n    }\n    case Chain.Chainflip: {\n      return validateAddress(address, Network.FLIP.prefix || Network.GENERIC.prefix);\n    }\n  }\n  return false;\n};\n\nexport type BaseSubstrateWallet = ReturnType<typeof BaseSubstrateToolbox>;\nexport type SubstrateWallets = {\n  [chain in SubstrateChain]: BaseSubstrateWallet;\n};\n",
    "import type { SubstrateChain } from \"@swapkit/helpers\";\n\nexport const polkadotNetwork = {\n  prefix: 0,\n  network: \"polkadot\",\n  displayName: \"Polkadot Relay Chain\",\n  symbols: [\"DOT\"],\n  decimals: [10],\n  standardAccount: \"*25519\",\n  website: \"https://polkadot.network\",\n};\n\nexport const chainflipNetwork = {\n  prefix: 2112,\n  network: \"chainflip\",\n  displayName: \"Chainflip\",\n  symbols: [\"FLIP\"],\n  decimals: [18],\n  standardAccount: \"*25519\",\n  website: \"https://chainflip.io/\",\n};\n\nexport const subtrateNetwork = {\n  prefix: 42,\n  network: \"substrate\",\n  displayName: \"Substrate\",\n  symbols: [],\n  decimals: [],\n  standardAccount: \"*25519\",\n  website: \"https://substrate.io/\",\n};\n\nexport const Network: Record<SubstrateChain | \"GENERIC\", SubstrateNetwork> = {\n  DOT: polkadotNetwork,\n  FLIP: chainflipNetwork,\n  GENERIC: subtrateNetwork,\n};\n\nexport type SubstrateNetwork =\n  | typeof polkadotNetwork\n  | typeof chainflipNetwork\n  | typeof subtrateNetwork;\n",
    "import { ApiPromise, WsProvider } from \"@polkadot/api\";\nimport type { KeyringPair } from \"@polkadot/keyring/types\";\nimport { AssetValue, Chain, RPCUrl, type SubstrateChain, SwapKitNumber } from \"@swapkit/helpers\";\n\nimport { Network } from \"../types/network.ts\";\n\nimport type { Signer } from \"@polkadot/types/types\";\nimport { BaseSubstrateToolbox } from \"./baseSubstrateToolbox.ts\";\n\ntype ToolboxParams = {\n  providerUrl?: RPCUrl;\n  generic?: boolean;\n  signer: KeyringPair | Signer;\n};\n\nexport const ToolboxFactory = async ({\n  providerUrl,\n  generic,\n  chain,\n  signer,\n}: ToolboxParams & { chain: SubstrateChain }) => {\n  const provider = new WsProvider(providerUrl);\n  const api = await ApiPromise.create({ provider });\n  const gasAsset = AssetValue.from({ chain });\n\n  return BaseSubstrateToolbox({\n    api,\n    signer,\n    gasAsset,\n    network: generic ? Network.GENERIC : Network[chain],\n  });\n};\n\nexport const PolkadotToolbox = ({ providerUrl, signer, generic = false }: ToolboxParams) => {\n  return ToolboxFactory({\n    providerUrl: providerUrl || RPCUrl.Polkadot,\n    chain: Chain.Polkadot,\n    generic,\n    signer,\n  });\n};\n\nexport const ChainflipToolbox = async ({ providerUrl, signer, generic = false }: ToolboxParams) => {\n  const provider = new WsProvider(providerUrl);\n  const api = await ApiPromise.create({ provider });\n  const gasAsset = AssetValue.from({ chain: Chain.Chainflip });\n\n  async function getBalance(api: ApiPromise, address: string) {\n    // @ts-expect-error @Towan some parts of data missing?\n    // biome-ignore lint/correctness/noUnsafeOptionalChaining: @Towan some parts of data missing?\n    const { balance } = await api.query.flip?.account?.(address);\n\n    return [\n      gasAsset.set(\n        SwapKitNumber.fromBigInt(BigInt(balance.toString()), gasAsset.decimal).getValue(\"string\"),\n      ),\n    ];\n  }\n\n  const baseToolbox = await ToolboxFactory({\n    chain: Chain.Chainflip,\n    signer,\n    providerUrl,\n    generic,\n  });\n\n  return {\n    ...baseToolbox,\n    getBalance: async (address: string) => getBalance(api, address),\n  };\n};\n\ntype ToolboxType = {\n  DOT: ReturnType<typeof PolkadotToolbox>;\n  FLIP: ReturnType<typeof ChainflipToolbox>;\n};\n\nexport const getToolboxByChain = <T extends keyof ToolboxType>(\n  chain: T,\n  params: { providerUrl?: RPCUrl; signer: KeyringPair | Signer; generic?: boolean },\n): ToolboxType[T] => {\n  switch (chain) {\n    case Chain.Chainflip:\n      return ChainflipToolbox(params);\n    case Chain.Polkadot:\n      return PolkadotToolbox(params);\n    default:\n      throw new Error(`Chain ${chain} is not supported`);\n  }\n};\n"
  ],
  "mappings": "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",
  "debugId": "664DCC04991243FF64756E2164756E21",
  "names": []
}
import{Keyring as Z}from"@polkadot/api";import{hexToU8a as _,isHex as $,u8aToHex as e}from"@polkadot/util";import{cryptoWaitReady as F,decodeAddress as b,encodeAddress as B}from"@polkadot/util-crypto";import{Chain as P,SwapKitError as D,SwapKitNumber as N}from"@swapkit/helpers";var S={prefix:0,network:"polkadot",displayName:"Polkadot Relay Chain",symbols:["DOT"],decimals:[10],standardAccount:"*25519",website:"https://polkadot.network"},X={prefix:2112,network:"chainflip",displayName:"Chainflip",symbols:["FLIP"],decimals:[18],standardAccount:"*25519",website:"https://chainflip.io/"},Y={prefix:42,network:"substrate",displayName:"Substrate",symbols:[],decimals:[],standardAccount:"*25519",website:"https://substrate.io/"},c={DOT:S,FLIP:X,GENERIC:Y};function G(t,o){return $(t)?_(t):b(t,void 0,o)}function W(t,o="ss58",I){if(o==="hex")return e(t);return B(t,I)}var u=(t)=>{return"address"in t},h=async(t,o)=>{return await F(),new Z({type:"sr25519",ss58Format:o}).addFromUri(t)},p=(t,o)=>t.rpc.system.accountNextIndex(o),x=async(t,o,I)=>{const f=await t.query.system?.account?.(I);if(!f?.data?.free||f?.data?.isEmpty)return[o.set(0)];return[o.set(N.fromBigInt(BigInt(f.data.free.toString()),o.decimal).getValue("string"))]},E=(t,o)=>{try{const I=G(t,o);return W(I,"ss58",o),!0}catch(I){return!1}},R=(t,{recipient:o,amount:I})=>t.tx.balances?.transferAllowDeath?.(o,I),C=async(t,o,{recipient:I,assetValue:f,from:j})=>{const m=R(t,{recipient:I,amount:f.getBaseValue("number")}),y=u(o);if(!m)return;const M=j||(y?o.address:void 0);if(!M)throw new D("core_transaction_invalid_sender_address");const n=await p(t,M);return(await m.signAndSend(y?o:M,{signer:y?void 0:o,nonce:n}))?.toString()},T=async(t,o,I,{recipient:f,assetValue:j,from:m})=>{const y=R(t,{recipient:f,amount:j.getBaseValue("number")}),M=m||u(o)&&o.address;if(!M)return;const n=await y?.paymentInfo(M,{nonce:await p(t,M)})||{partialFee:0};return I.set(N.fromBigInt(BigInt(n.partialFee.toString()),I.decimal).getValue("string"))},V=async(t,o)=>{if(o)return t.send(o);return(await t.send()).toString()},U=async(t,o)=>{return await o.signAsync(t)},w=(t,o,I)=>{if(I)return o.signAndSend(t,I);return o.signAndSend(t).toString()},H=({api:t,network:o,gasAsset:I,signer:f})=>({api:t,network:o,decodeAddress:G,encodeAddress:W,createKeyring:(j)=>h(j,o.prefix),getAddress:(j=f)=>u(j)?j.address:void 0,createTransfer:({recipient:j,assetValue:m})=>R(t,{recipient:j,amount:m.getBaseValue("number")}),getBalance:(j)=>x(t,I,j),validateAddress:(j)=>E(j,o.prefix),transfer:(j)=>C(t,f,j),estimateTransactionFee:(j)=>T(t,f,I,j),sign:(j)=>{if(u(f))return U(f,j);throw new D("core_wallet_not_keypair_wallet","Signer does not have keyring pair capabilities required for signing.")},broadcast:(j,m)=>V(j,m),signAndBroadcast:(j,m)=>{if(u(f))return w(f,j,m);throw new D("core_wallet_not_keypair_wallet","Signer does not have keyring pair capabilities required for signing.")}}),tt=({address:t,chain:o})=>{switch(o){case P.Polkadot:return E(t,c.DOT.prefix||c.GENERIC.prefix);case P.Chainflip:return E(t,c.FLIP.prefix||c.GENERIC.prefix)}return!1};import{ApiPromise as O,WsProvider as q}from"@polkadot/api";import{AssetValue as z,Chain as v,RPCUrl as K,SwapKitNumber as k}from"@swapkit/helpers";var J=async({providerUrl:t,generic:o,chain:I,signer:f})=>{const j=new q(t),m=await O.create({provider:j}),y=z.from({chain:I});return H({api:m,signer:f,gasAsset:y,network:o?c.GENERIC:c[I]})},A=({providerUrl:t,signer:o,generic:I=!1})=>{return J({providerUrl:t||K.Polkadot,chain:v.Polkadot,generic:I,signer:o})},l=async({providerUrl:t,signer:o,generic:I=!1})=>{const f=new q(t),j=await O.create({provider:f}),m=z.from({chain:v.Chainflip});async function y(n,L){const{balance:Q}=await n.query.flip?.account?.(L);return[m.set(k.fromBigInt(BigInt(Q.toString()),m.decimal).getValue("string"))]}return{...await J({chain:v.Chainflip,signer:o,providerUrl:t,generic:I}),getBalance:async(n)=>y(j,n)}},yt=(t,o)=>{switch(t){case v.Chainflip:return l(o);case v.Polkadot:return A(o);default:throw new Error(`Chain ${t} is not supported`)}};export{Y as subtrateNetwork,tt as substrateValidateAddress,S as polkadotNetwork,u as isKeyringPair,yt as getToolboxByChain,h as createKeyring,X as chainflipNetwork,J as ToolboxFactory,A as PolkadotToolbox,c as Network,l as ChainflipToolbox,H as BaseSubstrateToolbox};

//# debugId=664DCC04991243FF64756E2164756E21

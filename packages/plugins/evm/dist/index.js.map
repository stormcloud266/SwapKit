{
  "version": 3,
  "sources": ["../src/plugin.ts"],
  "sourcesContent": [
    "import type { QuoteResponseRoute } from \"@swapkit/api\";\nimport {\n  ApproveMode,\n  type ApproveReturnType,\n  AssetValue,\n  type EVMChain,\n  EVMChains,\n  ProviderName,\n  SwapKitError,\n  type SwapKitPluginParams,\n  type SwapParams,\n} from \"@swapkit/helpers\";\n\ntype ApproveParams = {\n  assetValue: AssetValue;\n  spenderAddress: string;\n};\n\nfunction plugin({ getWallet }: SwapKitPluginParams) {\n  async function swap({ route, feeOptionKey }: SwapParams<\"evm\", QuoteResponseRoute>) {\n    const { tx, sellAsset } = route;\n\n    const assetValue = await AssetValue.from({\n      asset: sellAsset,\n      asyncTokenLookup: true,\n    });\n\n    const evmChain = assetValue.chain as EVMChain;\n    const wallet = getWallet(evmChain);\n\n    if (!(EVMChains.includes(evmChain) && tx)) throw new SwapKitError(\"core_swap_invalid_params\");\n\n    const { from, to, data } = tx;\n    return wallet.sendTransaction({ from, to, data, value: BigInt(tx.value) }, feeOptionKey);\n  }\n\n  /**\n   * @Private\n   * Wallet interaction helpers\n   */\n  function approve<T extends ApproveMode>({\n    assetValue,\n    spenderAddress,\n    type = \"checkOnly\" as T,\n  }: { type: T; spenderAddress: string; assetValue: AssetValue }) {\n    const { address, chain, isGasAsset, isSynthetic } = assetValue;\n    const isEVMChain = EVMChains.includes(chain as EVMChain);\n    const isNativeEVM = isEVMChain && isGasAsset;\n\n    if (isNativeEVM || !isEVMChain || isSynthetic) {\n      return Promise.resolve(type === \"checkOnly\" ? true : \"approved\") as ApproveReturnType<T>;\n    }\n\n    const wallet = getWallet(chain as EVMChain);\n\n    if (!wallet) {\n      throw new SwapKitError(\"core_wallet_connection_not_found\");\n    }\n\n    const walletAction = type === \"checkOnly\" ? wallet.isApproved : wallet.approve;\n    const from = wallet.address;\n\n    if (!(address && from)) {\n      throw new SwapKitError(\"core_approve_asset_address_or_from_not_found\");\n    }\n\n    return walletAction({\n      amount: assetValue.getBaseValue(\"bigint\"),\n      assetAddress: address,\n      from,\n      spenderAddress,\n    });\n  }\n\n  function approveAssetValue(params: ApproveParams) {\n    return approve({ ...params, type: ApproveMode.Approve });\n  }\n\n  function isAssetValueApproved(params: ApproveParams) {\n    return approve({ ...params, type: ApproveMode.CheckOnly });\n  }\n\n  return {\n    swap,\n    approveAssetValue,\n    isAssetValueApproved,\n    supportedSwapkitProviders: [\n      ProviderName.ONEINCH,\n      ProviderName.PANCAKESWAP,\n      ProviderName.PANGOLIN_V1,\n      ProviderName.SUSHISWAP_V2,\n      ProviderName.TRADERJOE_V2,\n      ProviderName.UNISWAP_V2,\n      ProviderName.UNISWAP_V3,\n    ],\n  };\n}\n\nexport const EVMPlugin = { evm: { plugin } } as const;\n"
  ],
  "mappings": "AACA,sBACE,gBAEA,eAEA,kBACA,kBACA,yBAUF,SAAS,CAAM,EAAG,aAAkC,CAClD,eAAe,CAAI,EAAG,QAAO,gBAAuD,CAClF,MAAQ,KAAI,aAAc,EAOpB,GALa,MAAM,EAAW,KAAK,CACvC,MAAO,EACP,iBAAkB,EACpB,CAAC,GAE2B,MACtB,EAAS,EAAU,CAAQ,EAEjC,KAAM,EAAU,SAAS,CAAQ,GAAK,GAAK,MAAM,IAAI,EAAa,0BAA0B,EAE5F,MAAQ,OAAM,KAAI,QAAS,EAC3B,OAAO,EAAO,gBAAgB,CAAE,OAAM,KAAI,OAAM,MAAO,OAAO,EAAG,KAAK,CAAE,EAAG,CAAY,EAOzF,SAAS,CAA8B,EACrC,aACA,iBACA,OAAO,aACuD,CAC9D,MAAQ,UAAS,QAAO,aAAY,eAAgB,EAC9C,EAAa,EAAU,SAAS,CAAiB,EAGvD,GAFoB,GAAc,IAEd,GAAc,EAChC,OAAO,QAAQ,QAAQ,IAAS,YAAc,GAAO,UAAU,EAGjE,MAAM,EAAS,EAAU,CAAiB,EAE1C,IAAK,EACH,MAAM,IAAI,EAAa,kCAAkC,EAG3D,MAAM,EAAe,IAAS,YAAc,EAAO,WAAa,EAAO,QACjE,EAAO,EAAO,QAEpB,KAAM,GAAW,GACf,MAAM,IAAI,EAAa,8CAA8C,EAGvE,OAAO,EAAa,CAClB,OAAQ,EAAW,aAAa,QAAQ,EACxC,aAAc,EACd,OACA,gBACF,CAAC,EAGH,SAAS,CAAiB,CAAC,EAAuB,CAChD,OAAO,EAAQ,IAAK,EAAQ,KAAM,EAAY,OAAQ,CAAC,EAGzD,SAAS,CAAoB,CAAC,EAAuB,CACnD,OAAO,EAAQ,IAAK,EAAQ,KAAM,EAAY,SAAU,CAAC,EAG3D,MAAO,CACL,OACA,oBACA,uBACA,0BAA2B,CACzB,EAAa,QACb,EAAa,YACb,EAAa,YACb,EAAa,aACb,EAAa,aACb,EAAa,WACb,EAAa,UACf,CACF,EAGK,IAAM,EAAY,CAAE,IAAK,CAAE,QAAO,CAAE",
  "debugId": "815442AFA752C6BF64756E2164756E21",
  "names": []
}
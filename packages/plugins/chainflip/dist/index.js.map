{
  "version": 3,
  "sources": ["../src/assets.ts", "../src/broker.ts", "../src/chainflipGatewayABI.ts", "../src/plugin.ts"],
  "sourcesContent": [
    "import { type AssetValue, SwapKitError } from \"@swapkit/helpers\";\n\nexport const cfTickers = {\n  \"ARB.ETH\": \"ArbEth\",\n  \"ARB.USDC-0XAF88D065E77C8CC2239327C5EDB3A432268E5831\": \"ArbUsdc\",\n  \"BTC.BTC\": \"Btc\",\n  \"DOT.DOT\": \"Dot\",\n  \"ETH.ETH\": \"Eth\",\n  \"ETH.FLIP-0X826180541412D574CF1336D22C0C0A287822678A\": \"Flip\",\n  \"ETH.USDC-0XA0B86991C6218B36C1D19D4A2E9EB0CE3606EB48\": \"Usdc\",\n  \"ETH.USDT-0XDAC17F958D2EE523A2206206994597C13D831EC7\": \"Usdt\",\n};\n\nexport const toCFTicker = (asset: AssetValue) => {\n  const identifier = asset.toString().toUpperCase() as keyof typeof cfTickers;\n  const ticker = cfTickers[identifier];\n\n  if (!ticker) {\n    throw new SwapKitError(\"chainflip_unknown_asset\");\n  }\n\n  return ticker;\n};\n",
    "import { Chains } from \"@chainflip/sdk/swap\";\nimport { AssetValue, SwapKitError, SwapKitNumber, wrapWithThrow } from \"@swapkit/helpers\";\nimport { Chain } from \"@swapkit/helpers\";\nimport type { ETHToolbox } from \"@swapkit/toolbox-evm\";\nimport type { ChainflipToolbox } from \"@swapkit/toolbox-substrate\";\n\nimport { decodeAddress } from \"@polkadot/keyring\";\nimport { isHex, u8aToHex } from \"@polkadot/util\";\nimport { toCFTicker } from \"./assets.ts\";\nimport { chainflipGateway } from \"./chainflipGatewayABI.ts\";\nimport type {\n  RequestSwapDepositAddressParams,\n  SwapDepositResponse,\n  WithdrawFeeResponse,\n} from \"./types.ts\";\n\nconst chainToChainflipChain = new Map<Chain, keyof typeof Chains>([\n  [Chain.Arbitrum, Chains.Arbitrum],\n  [Chain.Bitcoin, Chains.Bitcoin],\n  [Chain.Ethereum, Chains.Ethereum],\n  [Chain.Polkadot, Chains.Polkadot],\n]);\n\nconst registerAsBroker =\n  (toolbox: Awaited<ReturnType<typeof ChainflipToolbox>>) => (address: string) => {\n    const extrinsic = toolbox.api.tx.swapping?.registerAsBroker?.(address);\n\n    if (!extrinsic) {\n      throw new SwapKitError(\"chainflip_broker_register\");\n    }\n\n    return toolbox.signAndBroadcast(extrinsic);\n  };\n\nconst requestSwapDepositAddress =\n  (toolbox: Awaited<ReturnType<typeof ChainflipToolbox>>) =>\n  async ({\n    route,\n    sellAsset,\n    buyAsset,\n    recipient: _recipient,\n    brokerCommissionBPS = 0,\n    ccmMetadata,\n    maxBoostFeeBps,\n  }: RequestSwapDepositAddressParams) => {\n    const sellAssetValue = sellAsset || (route && AssetValue.from({ asset: route.sellAsset }));\n    const buyAssetValue = buyAsset || (route && AssetValue.from({ asset: route.buyAsset }));\n    const recipient = _recipient || route?.destinationAddress;\n\n    if (!(sellAssetValue && buyAssetValue && recipient)) {\n      throw new SwapKitError(\"chainflip_broker_invalid_params\");\n    }\n\n    const isBuyChainPolkadot =\n      buyAsset?.chain === Chain.Polkadot || buyAssetValue.chain === Chain.Polkadot;\n\n    const _ccmMetadata = ccmMetadata ?? null;\n    const _maxBoostFeeBps = maxBoostFeeBps ?? 0;\n\n    const recipientAddress = wrapWithThrow(() => {\n      return isBuyChainPolkadot\n        ? toolbox.encodeAddress(toolbox.decodeAddress(recipient), \"hex\")\n        : recipient;\n    }, \"chainflip_broker_recipient_error\");\n\n    return new Promise<SwapDepositResponse>((resolve) => {\n      const tx = toolbox.api.tx.swapping?.requestSwapDepositAddress?.(\n        toCFTicker(sellAssetValue),\n        toCFTicker(buyAssetValue),\n        { [buyAssetValue.chain.toLowerCase()]: recipientAddress },\n        SwapKitNumber.fromBigInt(BigInt(brokerCommissionBPS)).getBaseValue(\"number\"),\n        _ccmMetadata,\n        _maxBoostFeeBps,\n      );\n\n      if (!tx) {\n        throw new SwapKitError(\"chainflip_broker_tx_error\");\n      }\n\n      toolbox.signAndBroadcast(tx, async (result) => {\n        if (!result.status?.isFinalized) {\n          return;\n        }\n\n        const depositChannelEvent = result.events.find(\n          (event) => event.event.method === \"SwapDepositAddressReady\",\n        );\n\n        if (!depositChannelEvent) {\n          throw new SwapKitError(\n            \"chainflip_channel_error\",\n            \"Could not find 'SwapDepositAddressReady' event\",\n          );\n        }\n\n        const {\n          event: {\n            data: { depositAddress, sourceChainExpiryBlock, destinationAddress, channelId },\n          },\n        } = depositChannelEvent.toHuman() as Todo;\n\n        const hash = result.status?.toJSON?.() as { finalized: string };\n        const header = await toolbox.api.rpc.chain.getHeader(hash?.finalized);\n        const depositChannelId = `${header.number}-${chainToChainflipChain.get(\n          sellAssetValue.chain,\n        )}-${channelId.replaceAll(\",\", \"\")}`;\n\n        resolve({\n          brokerCommissionBPS,\n          buyAsset: buyAssetValue,\n          depositAddress: Object.values(depositAddress)[0] as string,\n          depositChannelId,\n          recipient: Object.values(destinationAddress)[0] as string,\n          sellAsset: sellAssetValue,\n          srcChainExpiryBlock: Number((sourceChainExpiryBlock as string).replaceAll(\",\", \"\")),\n        });\n      });\n    });\n  };\n\nconst withdrawFee =\n  (toolbox: Awaited<ReturnType<typeof ChainflipToolbox>>) =>\n  ({ feeAsset, recipient }: { feeAsset: AssetValue; recipient: string }) => {\n    const isFeeChainPolkadot = feeAsset.chain === Chain.Polkadot;\n\n    const recipientAddress = wrapWithThrow(() => {\n      return isFeeChainPolkadot\n        ? toolbox.encodeAddress(toolbox.decodeAddress(recipient), \"hex\")\n        : recipient;\n    }, \"chainflip_broker_recipient_error\");\n\n    return new Promise<WithdrawFeeResponse>((resolve) => {\n      const extrinsic = toolbox.api.tx?.swapping?.withdraw?.(feeAsset.ticker.toLowerCase(), {\n        [feeAsset.chain.toLowerCase()]: recipientAddress,\n      });\n\n      if (!extrinsic) {\n        throw new SwapKitError(\"chainflip_broker_withdraw\");\n      }\n\n      toolbox.signAndBroadcast(extrinsic, async (result) => {\n        if (!result.status?.isFinalized) {\n          return;\n        }\n\n        const withdrawEvent = result.events.find(\n          (event) => event.event.method === \"WithdrawalRequested\",\n        );\n\n        if (!withdrawEvent) {\n          throw new SwapKitError(\n            \"chainflip_channel_error\",\n            \"Could not find 'WithdrawalRequested' event\",\n          );\n        }\n\n        const {\n          event: {\n            data: { egressId, egressAsset, egressAmount, egressFee, destinationAddress },\n          },\n        } = withdrawEvent.toHuman() as Todo;\n\n        resolve({\n          egressId,\n          egressAsset,\n          egressAmount,\n          egressFee,\n          destinationAddress,\n        });\n      });\n    });\n  };\n\nconst fundStateChainAccount =\n  (chainflipToolbox: Awaited<ReturnType<typeof ChainflipToolbox>>) =>\n  ({\n    evmToolbox,\n    stateChainAccount,\n    amount,\n  }: {\n    evmToolbox: ReturnType<typeof ETHToolbox>;\n    stateChainAccount: string;\n    amount: AssetValue;\n  }) => {\n    if (amount.symbol !== \"FLIP\") {\n      throw new SwapKitError(\"chainflip_broker_fund_only_flip_supported\");\n    }\n\n    if (!chainflipToolbox.validateAddress(stateChainAccount)) {\n      throw new SwapKitError(\"chainflip_broker_fund_invalid_address\");\n    }\n\n    const hexAddress = isHex(stateChainAccount)\n      ? stateChainAccount\n      : u8aToHex(decodeAddress(stateChainAccount));\n\n    return evmToolbox.call<string>({\n      abi: chainflipGateway,\n      contractAddress: \"0x6995ab7c4d7f4b03f467cf4c8e920427d9621dbd\",\n      funcName: \"fundStateChainAccount\",\n      funcParams: [hexAddress, amount],\n    });\n  };\n\nexport const ChainflipBroker = (\n  chainflipToolbox: Awaited<ReturnType<typeof ChainflipToolbox>>,\n) => ({\n  registerAsBroker: registerAsBroker(chainflipToolbox),\n  requestSwapDepositAddress: requestSwapDepositAddress(chainflipToolbox),\n  fundStateChainAccount: fundStateChainAccount(chainflipToolbox),\n  withdrawFee: withdrawFee(chainflipToolbox),\n});\n",
    "export const chainflipGateway = [\n  {\n    inputs: [\n      { internalType: \"contract IKeyManager\", name: \"keyManager\", type: \"address\" },\n      { internalType: \"uint256\", name: \"minFunding\", type: \"uint256\" },\n      { internalType: \"uint48\", name: \"redemptionDelay\", type: \"uint48\" },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: false, internalType: \"bool\", name: \"communityGuardDisabled\", type: \"bool\" },\n    ],\n    name: \"CommunityGuardDisabled\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: false, internalType: \"address\", name: \"flip\", type: \"address\" }],\n    name: \"FLIPSet\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: false, internalType: \"uint256\", name: \"oldSupply\", type: \"uint256\" },\n      { indexed: false, internalType: \"uint256\", name: \"newSupply\", type: \"uint256\" },\n      { indexed: false, internalType: \"uint256\", name: \"stateChainBlockNumber\", type: \"uint256\" },\n    ],\n    name: \"FlipSupplyUpdated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: \"bytes32\", name: \"nodeID\", type: \"bytes32\" },\n      { indexed: false, internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { indexed: false, internalType: \"address\", name: \"funder\", type: \"address\" },\n    ],\n    name: \"Funded\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: false, internalType: \"address\", name: \"to\", type: \"address\" },\n      { indexed: false, internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n    ],\n    name: \"GovernanceWithdrawal\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: false, internalType: \"uint256\", name: \"oldMinFunding\", type: \"uint256\" },\n      { indexed: false, internalType: \"uint256\", name: \"newMinFunding\", type: \"uint256\" },\n    ],\n    name: \"MinFundingChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: \"bytes32\", name: \"nodeID\", type: \"bytes32\" },\n      { indexed: false, internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n    ],\n    name: \"RedemptionExecuted\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: \"bytes32\", name: \"nodeID\", type: \"bytes32\" },\n      { indexed: false, internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n    ],\n    name: \"RedemptionExpired\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: \"bytes32\", name: \"nodeID\", type: \"bytes32\" },\n      { indexed: false, internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { indexed: true, internalType: \"address\", name: \"redeemAddress\", type: \"address\" },\n      { indexed: false, internalType: \"uint48\", name: \"startTime\", type: \"uint48\" },\n      { indexed: false, internalType: \"uint48\", name: \"expiryTime\", type: \"uint48\" },\n      { indexed: false, internalType: \"address\", name: \"executor\", type: \"address\" },\n    ],\n    name: \"RedemptionRegistered\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: false, internalType: \"bool\", name: \"suspended\", type: \"bool\" }],\n    name: \"Suspended\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: false, internalType: \"address\", name: \"keyManager\", type: \"address\" }],\n    name: \"UpdatedKeyManager\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"REDEMPTION_DELAY\",\n    outputs: [{ internalType: \"uint48\", name: \"\", type: \"uint48\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"disableCommunityGuard\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"enableCommunityGuard\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes32\", name: \"nodeID\", type: \"bytes32\" }],\n    name: \"executeRedemption\",\n    outputs: [\n      { internalType: \"address\", name: \"\", type: \"address\" },\n      { internalType: \"uint256\", name: \"\", type: \"uint256\" },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"bytes32\", name: \"nodeID\", type: \"bytes32\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n    ],\n    name: \"fundStateChainAccount\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCommunityGuardDisabled\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCommunityKey\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getFLIP\",\n    outputs: [{ internalType: \"contract IFLIP\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getGovernor\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getKeyManager\",\n    outputs: [{ internalType: \"contract IKeyManager\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getLastSupplyUpdateBlockNumber\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getMinimumFunding\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes32\", name: \"nodeID\", type: \"bytes32\" }],\n    name: \"getPendingRedemption\",\n    outputs: [\n      {\n        components: [\n          { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n          { internalType: \"address\", name: \"redeemAddress\", type: \"address\" },\n          { internalType: \"uint48\", name: \"startTime\", type: \"uint48\" },\n          { internalType: \"uint48\", name: \"expiryTime\", type: \"uint48\" },\n          { internalType: \"address\", name: \"executor\", type: \"address\" },\n        ],\n        internalType: \"struct IStateChainGateway.Redemption\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getSuspendedState\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"govUpdateFlipIssuer\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  { inputs: [], name: \"govWithdraw\", outputs: [], stateMutability: \"nonpayable\", type: \"function\" },\n  {\n    inputs: [\n      {\n        components: [\n          { internalType: \"uint256\", name: \"sig\", type: \"uint256\" },\n          { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n          { internalType: \"address\", name: \"kTimesGAddress\", type: \"address\" },\n        ],\n        internalType: \"struct IShared.SigData\",\n        name: \"sigData\",\n        type: \"tuple\",\n      },\n      { internalType: \"bytes32\", name: \"nodeID\", type: \"bytes32\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"address\", name: \"redeemAddress\", type: \"address\" },\n      { internalType: \"uint48\", name: \"expiryTime\", type: \"uint48\" },\n      { internalType: \"address\", name: \"executor\", type: \"address\" },\n    ],\n    name: \"registerRedemption\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  { inputs: [], name: \"resume\", outputs: [], stateMutability: \"nonpayable\", type: \"function\" },\n  {\n    inputs: [{ internalType: \"contract IFLIP\", name: \"flip\", type: \"address\" }],\n    name: \"setFlip\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"newMinFunding\", type: \"uint256\" }],\n    name: \"setMinFunding\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  { inputs: [], name: \"suspend\", outputs: [], stateMutability: \"nonpayable\", type: \"function\" },\n  {\n    inputs: [\n      {\n        components: [\n          { internalType: \"uint256\", name: \"sig\", type: \"uint256\" },\n          { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n          { internalType: \"address\", name: \"kTimesGAddress\", type: \"address\" },\n        ],\n        internalType: \"struct IShared.SigData\",\n        name: \"sigData\",\n        type: \"tuple\",\n      },\n      { internalType: \"address\", name: \"newIssuer\", type: \"address\" },\n      { internalType: \"bool\", name: \"omitChecks\", type: \"bool\" },\n    ],\n    name: \"updateFlipIssuer\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          { internalType: \"uint256\", name: \"sig\", type: \"uint256\" },\n          { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n          { internalType: \"address\", name: \"kTimesGAddress\", type: \"address\" },\n        ],\n        internalType: \"struct IShared.SigData\",\n        name: \"sigData\",\n        type: \"tuple\",\n      },\n      { internalType: \"uint256\", name: \"newTotalSupply\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"stateChainBlockNumber\", type: \"uint256\" },\n    ],\n    name: \"updateFlipSupply\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          { internalType: \"uint256\", name: \"sig\", type: \"uint256\" },\n          { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n          { internalType: \"address\", name: \"kTimesGAddress\", type: \"address\" },\n        ],\n        internalType: \"struct IShared.SigData\",\n        name: \"sigData\",\n        type: \"tuple\",\n      },\n      { internalType: \"contract IKeyManager\", name: \"keyManager\", type: \"address\" },\n      { internalType: \"bool\", name: \"omitChecks\", type: \"bool\" },\n    ],\n    name: \"updateKeyManager\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n",
    "import type { QuoteResponseRoute } from \"@swapkit/api\";\nimport {\n  AssetValue,\n  type EVMWallets,\n  ProviderName,\n  type SubstrateWallets,\n  SwapKitError,\n  type SwapKitPluginParams,\n  type SwapParams,\n  type UTXOWallets,\n} from \"@swapkit/helpers\";\n\ntype SupportedChain = keyof (EVMWallets & SubstrateWallets & UTXOWallets);\n\nexport async function confirmSwap({\n  buyAsset,\n  sellAsset,\n  recipient,\n  brokerEndpoint,\n}: {\n  buyAsset: AssetValue;\n  sellAsset: AssetValue;\n  recipient: string;\n  brokerEndpoint: string;\n}) {\n  try {\n    const response = await fetch(brokerEndpoint, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        buyAsset: buyAsset.toString(),\n        sellAsset: sellAsset.toString(),\n        destinationAddress: recipient,\n      }),\n    }).then((res) => res.json());\n\n    return response as { channelId: string; depositAddress: string; chain: string };\n  } catch (error) {\n    throw new SwapKitError(\"chainflip_channel_error\", error);\n  }\n}\n\nfunction plugin({\n  getWallet,\n  config: { chainflipBrokerUrl },\n}: SwapKitPluginParams<{ chainflipBrokerUrl: string }>) {\n  async function swap(swapParams: SwapParams<\"chainflip\", QuoteResponseRoute>) {\n    if (!(swapParams?.route?.buyAsset && chainflipBrokerUrl)) {\n      throw new SwapKitError(\"core_swap_invalid_params\", { ...swapParams, chainflipBrokerUrl });\n    }\n\n    const {\n      route: {\n        buyAsset: buyString,\n        sellAsset: sellString,\n        sellAmount,\n        destinationAddress: recipient,\n      },\n    } = swapParams;\n    if (!(sellString && buyString)) {\n      throw new SwapKitError(\"core_swap_asset_not_recognized\");\n    }\n\n    const sellAsset = await AssetValue.from({ asyncTokenLookup: true, asset: sellString });\n    const wallet = getWallet(sellAsset.chain as SupportedChain);\n\n    if (!wallet) {\n      throw new SwapKitError(\"core_wallet_connection_not_found\");\n    }\n\n    const buyAsset = await AssetValue.from({ asyncTokenLookup: true, asset: buyString });\n    const assetValue = sellAsset.set(sellAmount);\n\n    const { depositAddress } = await confirmSwap({\n      brokerEndpoint: chainflipBrokerUrl,\n      buyAsset,\n      recipient,\n      sellAsset,\n    });\n\n    const tx = await wallet.transfer({\n      assetValue,\n      from: wallet.address,\n      recipient: depositAddress,\n    });\n\n    return tx as string;\n  }\n\n  return {\n    swap,\n    supportedSwapkitProviders: [ProviderName.CHAINFLIP],\n  };\n}\n\nexport const ChainflipPlugin = { chainflip: { plugin } } as const;\n\n/**\n * @deprecated Use import { ChainflipPlugin } from \"@swapkit/plugin-chainflip\" instead\n */\nexport const ChainflipProvider = ChainflipPlugin;\n"
  ],
  "mappings": "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",
  "debugId": "5D5F96FDA1AC091064756E2164756E21",
  "names": []
}
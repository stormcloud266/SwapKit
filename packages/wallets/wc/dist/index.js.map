{
  "version": 3,
  "sources": ["../src/constants.ts", "../src/walletconnect.ts", "../src/evmSigner.ts", "../src/helpers.ts", "../src/namespaces.ts"],
  "sourcesContent": [
    "import { Chain } from \"@swapkit/helpers\";\n\nimport type { ClientMetadata } from \"./types.ts\";\n\nexport const DEFAULT_RELAY_URL = \"wss://relay.walletconnect.com\";\n\nexport const ETHEREUM_MAINNET_ID = \"eip155:1\";\nexport const BSC_MAINNET_ID = \"eip155:56\";\nexport const AVALACHE_MAINNET_ID = \"eip155:43114\";\nexport const THORCHAIN_MAINNET_ID = \"cosmos:thorchain\";\nexport const COSMOS_HUB_MAINNET_ID = \"cosmos:cosmoshub-4\";\nexport const KUJIRA_MAINNET_ID = \"cosmos:kaiyo-1\";\nexport const MAYACHAIN_MAINNET_ID = \"cosmos:mayachain\";\nexport const ARBITRUM_ONE_MAINNET_ID = \"eip155:42161\";\nexport const OPTIMISM_MAINNET_ID = \"eip155:10\";\nexport const POLYGON_MAINNET_ID = \"eip155:137\";\n\nexport const DEFAULT_LOGGER = \"debug\";\n\nexport const DEFAULT_APP_METADATA: ClientMetadata = {\n  name: \"THORSwap\",\n  description: \"THORSwap multi-chain dex aggregator powered by THORChain\",\n  url: \"https://app.thorswap.finance/\",\n  icons: [\"https://static.thorswap.net/logo.png\"],\n};\n\n/**\n * EIP155\n */\nexport enum DEFAULT_EIP155_METHODS {\n  ETH_SEND_TRANSACTION = \"eth_sendTransaction\",\n  // not supported by most WC wallets\n  // ETH_SIGN_TRANSACTION = 'eth_signTransaction',\n  ETH_SIGN = \"eth_sign\",\n  PERSONAL_SIGN = \"personal_sign\",\n  ETH_SIGN_TYPED_DATA = \"eth_signTypedData\",\n}\n\nexport enum DEFAULT_EIP_155_EVENTS {\n  ETH_CHAIN_CHANGED = \"chainChanged\",\n  ETH_ACCOUNTS_CHANGED = \"accountsChanged\",\n}\n\n/**\n * COSMOS\n */\nexport enum DEFAULT_COSMOS_METHODS {\n  COSMOS_SIGN_DIRECT = \"cosmos_signDirect\",\n  COSMOS_SIGN_AMINO = \"cosmos_signAmino\",\n  COSMOS_GET_ACCOUNTS = \"cosmos_getAccounts\",\n}\n\nexport enum DEFAULT_COSMOS_EVENTS {}\n\n/**\n * SOLANA\n */\nexport enum DEFAULT_SOLANA_METHODS {\n  SOL_SIGN_TRANSACTION = \"solana_signTransaction\",\n  SOL_SIGN_MESSAGE = \"solana_signMessage\",\n}\n\nexport enum DEFAULT_SOLANA_EVENTS {}\n\n/**\n * POLKADOT\n */\nexport enum DEFAULT_POLKADOT_METHODS {\n  POLKADOT_SIGN_TRANSACTION = \"polkadot_signTransaction\",\n  POLKADOT_SIGN_MESSAGE = \"polkadot_signMessage\",\n}\n\nexport enum DEFAULT_POLKADOT_EVENTS {}\n\n/**\n * NEAR\n */\nexport enum DEFAULT_NEAR_METHODS {\n  NEAR_SIGN_IN = \"near_signIn\",\n  NEAR_SIGN_OUT = \"near_signOut\",\n  NEAR_GET_ACCOUNTS = \"near_getAccounts\",\n  NEAR_SIGN_AND_SEND_TRANSACTION = \"near_signAndSendTransaction\",\n  NEAR_SIGN_AND_SEND_TRANSACTIONS = \"near_signAndSendTransactions\",\n}\n\nexport enum DEFAULT_NEAR_EVENTS {}\n\nexport const WC_SUPPORTED_CHAINS = [\n  Chain.Arbitrum,\n  Chain.Avalanche,\n  Chain.BinanceSmartChain,\n  Chain.Cosmos,\n  Chain.Ethereum,\n  Chain.Kujira,\n  Chain.Maya,\n  Chain.Optimism,\n  Chain.Polygon,\n  Chain.THORChain,\n] as const;\n",
    "import type { StdSignDoc } from \"@cosmjs/amino\";\nimport {\n  Chain,\n  ChainId,\n  type ConnectWalletParams,\n  RPCUrl,\n  SwapKitError,\n  WalletOption,\n  ensureEVMApiKeys,\n  setRequestClientConfig,\n} from \"@swapkit/helpers\";\nimport type { BaseCosmosToolboxType, DepositParam, TransferParams } from \"@swapkit/toolbox-cosmos\";\nimport type { WalletConnectModalSign } from \"@walletconnect/modal-sign-html\";\nimport type { SessionTypes, SignClientTypes } from \"@walletconnect/types\";\n\nimport {\n  DEFAULT_APP_METADATA,\n  DEFAULT_COSMOS_METHODS,\n  DEFAULT_LOGGER,\n  DEFAULT_RELAY_URL,\n  THORCHAIN_MAINNET_ID,\n  WC_SUPPORTED_CHAINS,\n} from \"./constants.ts\";\nimport { getEVMSigner } from \"./evmSigner.ts\";\nimport { chainToChainId, getAddressByChain } from \"./helpers.ts\";\nimport { getRequiredNamespaces } from \"./namespaces.ts\";\n\nconst SUPPORTED_CHAINS = [\n  Chain.BinanceSmartChain,\n  Chain.Ethereum,\n  Chain.THORChain,\n  Chain.Avalanche,\n  Chain.Arbitrum,\n  Chain.Optimism,\n  Chain.Polygon,\n  Chain.Maya,\n  Chain.Cosmos,\n  Chain.Kujira,\n] as const;\n\nasync function getToolbox({\n  chain,\n  walletconnect,\n  address,\n  session,\n  ethplorerApiKey,\n  covalentApiKey,\n}: {\n  walletconnect: Walletconnect;\n  session: SessionTypes.Struct;\n  chain: (typeof SUPPORTED_CHAINS)[number];\n  covalentApiKey?: string;\n  ethplorerApiKey?: string;\n  stagenet?: boolean;\n  address: string;\n}) {\n  switch (chain) {\n    case Chain.Avalanche:\n    case Chain.BinanceSmartChain:\n    case Chain.Arbitrum:\n    case Chain.Optimism:\n    case Chain.Polygon:\n    case Chain.Ethereum: {\n      const { getProvider, getToolboxByChain } = await import(\"@swapkit/toolbox-evm\");\n\n      const keys = ensureEVMApiKeys({ chain, ethplorerApiKey, covalentApiKey });\n      const provider = getProvider(chain);\n      const signer = await getEVMSigner({ walletconnect, chain, provider });\n      const toolbox = getToolboxByChain(chain);\n\n      // @ts-expect-error TODO: fix this\n      return toolbox({ ...keys, provider, signer });\n    }\n\n    case Chain.THORChain: {\n      const { SignMode } = await import(\"cosmjs-types/cosmos/tx/signing/v1beta1/signing.js\");\n      const { TxRaw } = await import(\"cosmjs-types/cosmos/tx/v1beta1/tx.js\");\n      const { encodePubkey, makeAuthInfoBytes } = await import(\"@cosmjs/proto-signing\");\n      const { makeSignDoc } = await import(\"@cosmjs/amino\");\n      const {\n        ThorchainToolbox,\n        buildAminoMsg,\n        buildEncodedTxBody,\n        createStargateClient,\n        fromBase64,\n        getDefaultChainFee,\n        prepareMessageForBroadcast,\n      } = await import(\"@swapkit/toolbox-cosmos\");\n      const toolbox = ThorchainToolbox({ stagenet: false });\n\n      const fee = getDefaultChainFee(chain);\n\n      const signRequest = (signDoc: StdSignDoc) =>\n        walletconnect?.client.request({\n          chainId: THORCHAIN_MAINNET_ID,\n          topic: session.topic,\n          request: {\n            method: DEFAULT_COSMOS_METHODS.COSMOS_SIGN_AMINO,\n            params: { signerAddress: address, signDoc },\n          },\n        });\n\n      async function thorchainTransfer({\n        assetValue,\n        memo,\n        ...rest\n      }: TransferParams | DepositParam) {\n        const account = await toolbox.getAccount(address);\n        if (!account) {\n          throw new SwapKitError({ errorKey: \"wallet_missing_params\", info: { account } });\n        }\n\n        if (!account.pubkey) {\n          throw new SwapKitError({\n            errorKey: \"wallet_missing_params\",\n            info: { account, pubkey: account?.pubkey },\n          });\n        }\n\n        const { accountNumber, sequence = 0 } = account;\n\n        const msgs = [\n          buildAminoMsg({ chain: Chain.THORChain, assetValue, memo, from: address, ...rest }),\n        ];\n\n        const signDoc = makeSignDoc(\n          msgs,\n          fee,\n          ChainId.THORChain,\n          memo,\n          accountNumber?.toString(),\n          sequence?.toString() || \"0\",\n        );\n\n        const signature: Todo = await signRequest(signDoc);\n\n        const bodyBytes = buildEncodedTxBody({\n          chain: Chain.THORChain,\n          msgs: msgs.map(prepareMessageForBroadcast),\n          memo: memo || \"\",\n        });\n        const pubkey = encodePubkey(account.pubkey);\n        const authInfoBytes = makeAuthInfoBytes(\n          [{ pubkey, sequence }],\n          fee.amount,\n          Number.parseInt(fee.gas),\n          undefined,\n          undefined,\n          SignMode.SIGN_MODE_LEGACY_AMINO_JSON,\n        );\n\n        const txRaw = TxRaw.fromPartial({\n          bodyBytes,\n          authInfoBytes,\n          signatures: [\n            fromBase64(\n              typeof signature.signature === \"string\"\n                ? signature.signature\n                : signature.signature.signature,\n            ),\n          ],\n        });\n        const txBytes = TxRaw.encode(txRaw).finish();\n\n        const broadcaster = await createStargateClient(RPCUrl.THORChain);\n        const result = await broadcaster.broadcastTx(txBytes);\n        return result.transactionHash;\n      }\n\n      return {\n        ...toolbox,\n        transfer: (params: TransferParams) => thorchainTransfer(params),\n        deposit: (params: DepositParam) => thorchainTransfer(params),\n      };\n    }\n    default:\n      throw new SwapKitError({\n        errorKey: \"wallet_chain_not_supported\",\n        info: { chain, wallet: WalletOption.WALLETCONNECT },\n      });\n  }\n}\n\nasync function getWalletconnect(\n  chains: Chain[],\n  walletConnectProjectId?: string,\n  walletconnectOptions?: SignClientTypes.Options,\n) {\n  let modal: WalletConnectModalSign | undefined;\n  try {\n    if (!walletConnectProjectId) {\n      throw new SwapKitError(\"wallet_walletconnect_project_id_not_specified\");\n    }\n    const requiredNamespaces = getRequiredNamespaces(chains.map(chainToChainId));\n\n    const { WalletConnectModalSign } = await import(\"@walletconnect/modal-sign-html\");\n\n    const client = new WalletConnectModalSign({\n      logger: DEFAULT_LOGGER,\n      relayUrl: DEFAULT_RELAY_URL,\n      projectId: walletConnectProjectId,\n      metadata: walletconnectOptions?.metadata || DEFAULT_APP_METADATA,\n      ...walletconnectOptions?.core,\n    });\n\n    const oldSession = await client.getSession();\n\n    // disconnect old Session cause we can't handle using it with current ui\n    if (oldSession) {\n      await client.disconnect({\n        topic: oldSession.topic,\n        reason: { code: 0, message: \"Resetting session\" },\n      });\n    }\n\n    const session = await client.connect({ requiredNamespaces });\n\n    const accounts = Object.values(session.namespaces).flatMap(\n      (namespace: Todo) => namespace.accounts,\n    );\n\n    const disconnect = async () => {\n      await client.disconnect({\n        topic: session.topic,\n        reason: { code: 0, message: \"User disconnected\" },\n      });\n    };\n\n    return { session, accounts, client, disconnect };\n  } catch (e) {\n    console.error(e);\n  } finally {\n    if (modal) {\n      // @ts-expect-error wrong typing\n      modal.closeModal();\n    }\n  }\n  return undefined;\n}\n\nexport type Walletconnect = Awaited<ReturnType<typeof getWalletconnect>>;\n\nfunction connectWalletconnect({\n  addChain,\n  config: {\n    thorswapApiKey,\n    ethplorerApiKey,\n    walletConnectProjectId,\n    covalentApiKey,\n    stagenet = false,\n  },\n}: ConnectWalletParams) {\n  return async function connectWallet(\n    chains: (typeof WC_SUPPORTED_CHAINS)[number][],\n    walletconnectOptions?: SignClientTypes.Options,\n  ) {\n    setRequestClientConfig({ apiKey: thorswapApiKey });\n\n    const chainsToConnect = chains.filter((chain) => WC_SUPPORTED_CHAINS.includes(chain));\n    const walletconnect = await getWalletconnect(\n      chainsToConnect,\n      walletConnectProjectId,\n      walletconnectOptions,\n    );\n\n    if (!walletconnect) {\n      throw new SwapKitError(\"wallet_walletconnect_connection_not_established\");\n    }\n\n    const { session, accounts } = walletconnect;\n\n    const promises = chainsToConnect.map(async (chain) => {\n      const address = getAddressByChain(chain, accounts);\n\n      const toolbox = await getToolbox({\n        session,\n        address,\n        chain,\n        walletconnect,\n        ethplorerApiKey,\n        covalentApiKey,\n        stagenet,\n      });\n\n      async function getAccount(accountAddress: string) {\n        const account = await (toolbox as BaseCosmosToolboxType).getAccount(accountAddress);\n        const [{ address, algo, pubkey }] = (await walletconnect?.client.request({\n          chainId: THORCHAIN_MAINNET_ID,\n          topic: session.topic,\n          request: {\n            method: DEFAULT_COSMOS_METHODS.COSMOS_GET_ACCOUNTS,\n            params: {},\n          },\n        })) as [{ address: string; algo: string; pubkey: string }];\n\n        return { ...account, address, pubkey: { type: algo, value: pubkey } };\n      }\n\n      addChain({\n        ...toolbox,\n        disconnect: walletconnect.disconnect,\n        address,\n        balance: [],\n        chain,\n        walletType: WalletOption.WALLETCONNECT,\n        getAccount:\n          chain === Chain.THORChain ? getAccount : (toolbox as BaseCosmosToolboxType).getAccount,\n      });\n    });\n\n    await Promise.all(promises);\n\n    return true;\n  };\n}\n\nexport const walletconnectWallet = { connectWalletconnect } as const;\n",
    "import { type EVMChain, SwapKitError, WalletOption } from \"@swapkit/helpers\";\nimport type { JsonRpcProvider, Provider, TransactionRequest } from \"@swapkit/toolbox-evm\";\nimport { AbstractSigner } from \"@swapkit/toolbox-evm\";\n\nimport { DEFAULT_EIP155_METHODS } from \"./constants.ts\";\nimport { chainToChainId, getAddressByChain } from \"./helpers.ts\";\nimport type { Walletconnect } from \"./walletconnect.ts\";\n\ninterface WalletconnectEVMSignerParams {\n  chain: EVMChain;\n  walletconnect: Walletconnect;\n  provider: Provider | JsonRpcProvider;\n}\n\nclass WalletconnectSigner extends AbstractSigner {\n  address: string;\n\n  private chain: EVMChain;\n  private walletconnect: Walletconnect;\n  readonly provider: Provider | JsonRpcProvider;\n\n  constructor({ chain, provider, walletconnect }: WalletconnectEVMSignerParams) {\n    super(provider);\n    this.chain = chain;\n    this.walletconnect = walletconnect;\n    this.provider = provider;\n    this.address = \"\";\n  }\n\n  // biome-ignore lint/suspicious/useAwait: fulfil implementation type\n  getAddress = async () => {\n    if (!this.walletconnect) {\n      throw new SwapKitError(\"wallet_walletconnect_connection_not_established\");\n    }\n    if (!this.address) {\n      this.address = getAddressByChain(this.chain, this.walletconnect.accounts);\n    }\n\n    return this.address;\n  };\n\n  signMessage = async (message: string) => {\n    // this is probably broken\n    const txHash = (await this.walletconnect?.client.request({\n      chainId: chainToChainId(this.chain),\n      topic: this.walletconnect.session.topic,\n      request: {\n        method: DEFAULT_EIP155_METHODS.ETH_SIGN,\n        params: [message],\n      },\n    })) as string;\n\n    return txHash.startsWith(\"0x\") ? txHash : `0x${txHash}`;\n  };\n\n  signTransaction = () => {\n    throw new Error(\"Not implemented: signTransaction\");\n\n    // const baseTx = {\n    //   from,\n    //   to,\n    //   value: BigNumber.from(value || 0).toHexString(),\n    //   data,\n    // };\n\n    // const txHash = (await this.walletconnect?.client.request({\n    //   chainId: chainToChainId(this.chain),\n    //   topic: this.walletconnect.session.topic,\n    //   request: {\n    //     method: DEFAULT_EIP155_METHODS.ETH_SIGN_TRANSACTION,\n    //     params: [baseTx],\n    //   },\n    // })) as string;\n\n    // return txHash.startsWith('0x') ? txHash : `0x${txHash}`;\n  };\n\n  // ANCHOR (@Towan) - Implement in future\n  signTypedData = () => {\n    throw new Error(\"Not implemented: signTypedData\");\n\n    // const { toHexString } = await import('@swapkit/toolbox-evm');\n\n    // const baseTx = {\n    //   from,\n    //   to,\n    //   value: toHexString(value || 0n),\n    //   data,\n    // };\n\n    // const txHash = (await this.walletconnect?.client.request({\n    //   chainId: chainToChainId(this.chain),\n    //   topic: this.walletconnect.session.topic,\n    //   request: {\n    //     method: DEFAULT_EIP155_METHODS.ETH_SIGN_TYPED_DATA,\n    //     params: [baseTx],\n    //   },\n    // })) as string;\n\n    // return txHash.startsWith('0x') ? txHash : `0x${txHash}`;\n  };\n\n  // @ts-expect-error TODO: fix this\n  sendTransaction = async ({ from, to, value, data }: TransactionRequest) => {\n    const { toHexString } = await import(\"@swapkit/toolbox-evm\");\n\n    const baseTx = {\n      from,\n      to,\n      value: toHexString(BigInt(value || 0)),\n      data,\n    };\n    const response = await this.walletconnect?.client.request({\n      chainId: chainToChainId(this.chain),\n      topic: this.walletconnect.session.topic,\n      request: {\n        method: DEFAULT_EIP155_METHODS.ETH_SEND_TRANSACTION,\n        params: [baseTx],\n      },\n    });\n\n    return response;\n  };\n\n  // @ts-expect-error TODO: fix this\n  connect = (provider: Provider | null) => {\n    if (!provider) {\n      throw new SwapKitError({\n        errorKey: \"wallet_provider_not_found\",\n        info: { wallet: WalletOption.WALLETCONNECT, chain: this.chain },\n      });\n    }\n\n    return new WalletconnectSigner({\n      chain: this.chain,\n      walletconnect: this.walletconnect,\n      provider,\n    });\n  };\n}\nexport const getEVMSigner = async ({\n  chain,\n  walletconnect,\n  provider,\n}: WalletconnectEVMSignerParams) => new WalletconnectSigner({ chain, walletconnect, provider });\n",
    "import { Chain, type EVMChain } from \"@swapkit/helpers\";\n\nimport {\n  ARBITRUM_ONE_MAINNET_ID,\n  AVALACHE_MAINNET_ID,\n  BSC_MAINNET_ID,\n  COSMOS_HUB_MAINNET_ID,\n  ETHEREUM_MAINNET_ID,\n  KUJIRA_MAINNET_ID,\n  MAYACHAIN_MAINNET_ID,\n  OPTIMISM_MAINNET_ID,\n  POLYGON_MAINNET_ID,\n  THORCHAIN_MAINNET_ID,\n} from \"./constants.ts\";\n\nexport const getAddressByChain = (\n  chain: EVMChain | Chain.THORChain | Chain.Maya | Chain.Kujira | Chain.Cosmos,\n  accounts: string[],\n) => {\n  const account = accounts.find((account) => account.startsWith(chainToChainId(chain))) || \"\";\n  const address = account?.split(\":\")?.[2];\n\n  return address || \"\";\n};\n\nexport const chainToChainId = (chain: Chain) => {\n  switch (chain) {\n    case Chain.Avalanche:\n      return AVALACHE_MAINNET_ID;\n    case Chain.BinanceSmartChain:\n      return BSC_MAINNET_ID;\n    case Chain.Ethereum:\n      return ETHEREUM_MAINNET_ID;\n    case Chain.THORChain:\n      return THORCHAIN_MAINNET_ID;\n    case Chain.Arbitrum:\n      return ARBITRUM_ONE_MAINNET_ID;\n    case Chain.Optimism:\n      return OPTIMISM_MAINNET_ID;\n    case Chain.Polygon:\n      return POLYGON_MAINNET_ID;\n    case Chain.Maya:\n      return MAYACHAIN_MAINNET_ID;\n    case Chain.Cosmos:\n      return COSMOS_HUB_MAINNET_ID;\n    case Chain.Kujira:\n      return KUJIRA_MAINNET_ID;\n    default:\n      return \"\";\n  }\n};\n",
    "import type { ProposalTypes } from \"@walletconnect/types\";\n\nimport { SwapKitError } from \"@swapkit/helpers\";\nimport {\n  DEFAULT_COSMOS_METHODS,\n  DEFAULT_EIP155_METHODS,\n  DEFAULT_EIP_155_EVENTS,\n  DEFAULT_NEAR_EVENTS,\n  DEFAULT_NEAR_METHODS,\n  DEFAULT_POLKADOT_EVENTS,\n  DEFAULT_POLKADOT_METHODS,\n  DEFAULT_SOLANA_EVENTS,\n  DEFAULT_SOLANA_METHODS,\n} from \"./constants.ts\";\n\nexport const getNamespacesFromChains = (chains: string[]) => {\n  const supportedNamespaces: string[] = [];\n  for (const chainId of chains) {\n    const [namespace] = chainId.split(\":\");\n    if (namespace && !supportedNamespaces.includes(namespace)) {\n      supportedNamespaces.push(namespace);\n    }\n  }\n\n  return supportedNamespaces;\n};\n\nexport const getSupportedMethodsByNamespace = (namespace: string) => {\n  switch (namespace) {\n    case \"eip155\":\n      return Object.values(DEFAULT_EIP155_METHODS);\n    case \"cosmos\":\n      return Object.values(DEFAULT_COSMOS_METHODS);\n    case \"solana\":\n      return Object.values(DEFAULT_SOLANA_METHODS);\n    case \"polkadot\":\n      return Object.values(DEFAULT_POLKADOT_METHODS);\n    case \"near\":\n      return Object.values(DEFAULT_NEAR_METHODS);\n    default:\n      throw new SwapKitError({\n        errorKey: \"wallet_walletconnect_namespace_not_supported\",\n        info: { namespace },\n      });\n  }\n};\n\nexport const getSupportedEventsByNamespace = (namespace: string) => {\n  switch (namespace) {\n    case \"eip155\":\n      return Object.values(DEFAULT_EIP_155_EVENTS);\n    case \"cosmos\":\n      return [];\n    case \"solana\":\n      return Object.values(DEFAULT_SOLANA_EVENTS);\n    case \"polkadot\":\n      return Object.values(DEFAULT_POLKADOT_EVENTS);\n    case \"near\":\n      return Object.values(DEFAULT_NEAR_EVENTS);\n    default:\n      throw new SwapKitError({\n        errorKey: \"wallet_walletconnect_namespace_not_supported\",\n        info: { namespace },\n      });\n  }\n};\n\nexport const getRequiredNamespaces = (chains: string[]): ProposalTypes.RequiredNamespaces => {\n  const selectedNamespaces = getNamespacesFromChains(chains);\n\n  return Object.fromEntries(\n    selectedNamespaces.map((namespace) => [\n      namespace,\n      {\n        methods: getSupportedMethodsByNamespace(namespace),\n        chains: chains.filter((chain) => chain.startsWith(namespace)),\n        events: getSupportedEventsByNamespace(namespace) as Todo[],\n      },\n    ]),\n  );\n};\n"
  ],
  "mappings": "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",
  "debugId": "D56FEB7C3EF36F2B64756E2164756E21",
  "names": []
}
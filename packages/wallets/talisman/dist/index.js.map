{
  "version": 3,
  "sources": ["../src/talisman.ts", "../src/helpers.ts"],
  "sourcesContent": [
    "import {\n  Chain,\n  type ConnectWalletParams,\n  WalletOption,\n  setRequestClientConfig,\n} from \"@swapkit/helpers\";\nimport { getWalletForChain } from \"./helpers\";\n\nconst TALISMAN_SUPPORTED_CHAINS = [\n  Chain.Ethereum,\n  Chain.Arbitrum,\n  Chain.Avalanche,\n  Chain.Polygon,\n  Chain.BinanceSmartChain,\n  Chain.Optimism,\n  Chain.Polkadot,\n] as const;\n\nfunction connectTalisman({\n  addChain,\n  config: { thorswapApiKey, covalentApiKey, ethplorerApiKey },\n}: ConnectWalletParams) {\n  return async function connectTalisman(chains: (typeof TALISMAN_SUPPORTED_CHAINS)[number][]) {\n    setRequestClientConfig({ apiKey: thorswapApiKey });\n\n    const promises = chains.map(async (chain) => {\n      const { address, walletMethods } = await getWalletForChain({\n        chain,\n        covalentApiKey,\n        ethplorerApiKey,\n      });\n\n      addChain({\n        address,\n        ...walletMethods,\n        chain,\n        balance: [],\n        walletType: WalletOption.TALISMAN,\n      });\n    });\n\n    await Promise.all(promises);\n\n    return true;\n  };\n}\n\nexport const talismanWallet = { connectTalisman } as const;\n",
    "import { decodeAddress, encodeAddress } from \"@polkadot/util-crypto\";\nimport {\n  Chain,\n  ChainToHexChainId,\n  type EVMChain,\n  type EthereumWindowProvider,\n  SwapKitError,\n  WalletOption,\n  addEVMWalletNetwork,\n  ensureEVMApiKeys,\n  prepareNetworkSwitch,\n} from \"@swapkit/helpers\";\nimport {\n  type ARBToolbox,\n  type BSCToolbox,\n  BrowserProvider,\n  type Eip1193Provider,\n  type MATICToolbox,\n  type OPToolbox,\n} from \"@swapkit/toolbox-evm\";\n\nimport type { InjectedWindow } from \"@swapkit/toolbox-substrate\";\n\ndeclare const window: {\n  talismanEth: EthereumWindowProvider;\n} & Window &\n  InjectedWindow;\n\nexport const convertAddress = (inputAddress: string, newPrefix: number): string => {\n  const decodedAddress = decodeAddress(inputAddress);\n  const convertedAddress = encodeAddress(decodedAddress, newPrefix);\n  return convertedAddress;\n};\n\nexport const getWeb3WalletMethods = async ({\n  ethereumWindowProvider,\n  chain,\n  covalentApiKey,\n  ethplorerApiKey,\n}: {\n  ethereumWindowProvider: Eip1193Provider | undefined;\n  chain: EVMChain;\n  covalentApiKey?: string;\n  ethplorerApiKey?: string;\n}) => {\n  const { getToolboxByChain } = await import(\"@swapkit/toolbox-evm\");\n\n  if (!ethereumWindowProvider) {\n    throw new SwapKitError({\n      errorKey: \"wallet_provider_not_found\",\n      info: { wallet: WalletOption.TALISMAN, chain },\n    });\n  }\n\n  const keys = ensureEVMApiKeys({ chain, covalentApiKey, ethplorerApiKey });\n  const provider = new BrowserProvider(ethereumWindowProvider, \"any\");\n  const signer = await provider.getSigner();\n\n  const toolbox = getToolboxByChain(chain)({ ...keys, provider, signer });\n\n  try {\n    chain !== Chain.Ethereum &&\n      (await addEVMWalletNetwork(\n        provider,\n        (\n          toolbox as\n            | ReturnType<typeof ARBToolbox>\n            | ReturnType<typeof BSCToolbox>\n            | ReturnType<typeof MATICToolbox>\n            | ReturnType<typeof OPToolbox>\n        ).getNetworkParams(),\n      ));\n  } catch (_error) {\n    throw new SwapKitError({\n      errorKey: \"wallet_failed_to_add_or_switch_network\",\n      info: { wallet: WalletOption.TALISMAN, chain },\n    });\n  }\n\n  return prepareNetworkSwitch<typeof toolbox>({\n    toolbox: { ...toolbox },\n    chainId: ChainToHexChainId[chain],\n    provider,\n  });\n};\n\nexport const getWalletForChain = async ({\n  chain,\n  ethplorerApiKey,\n  covalentApiKey,\n}: {\n  chain: Chain;\n  ethplorerApiKey?: string;\n  covalentApiKey?: string;\n}) => {\n  switch (chain) {\n    case Chain.Ethereum:\n    case Chain.Arbitrum:\n    case Chain.Optimism:\n    case Chain.Polygon:\n    case Chain.BinanceSmartChain: {\n      if (!(window.talismanEth && \"send\" in window.talismanEth)) {\n        throw new SwapKitError({ errorKey: \"wallet_talisman_not_found\", info: { chain } });\n      }\n\n      const { getProvider } = await import(\"@swapkit/toolbox-evm\");\n\n      const evmWallet = await getWeb3WalletMethods({\n        chain,\n        ethereumWindowProvider: window.talismanEth,\n        covalentApiKey,\n        ethplorerApiKey,\n      });\n\n      const address: string = (await window.talismanEth.send(\"eth_requestAccounts\", []))[0];\n\n      const getBalance = async (addressOverwrite?: string, potentialScamFilter = true) =>\n        evmWallet.getBalance(addressOverwrite || address, potentialScamFilter, getProvider(chain));\n\n      return { walletMethods: { ...evmWallet, getBalance }, address };\n    }\n\n    case Chain.Polkadot: {\n      const { getToolboxByChain } = await import(\"@swapkit/toolbox-substrate\");\n\n      const injectedWindow = window as Window & InjectedWindow;\n      const injectedExtension = injectedWindow?.injectedWeb3?.talisman;\n      const rawExtension = await injectedExtension?.enable?.(\"talisman\");\n\n      if (!rawExtension) {\n        throw new SwapKitError({\n          errorKey: \"wallet_talisman_not_enabled\",\n          info: { chain },\n        });\n      }\n\n      const toolbox = await getToolboxByChain(chain, { signer: rawExtension.signer });\n      const accounts = await rawExtension.accounts.get();\n\n      if (!accounts[0]?.address) {\n        throw new SwapKitError({\n          errorKey: \"wallet_missing_params\",\n          info: { wallet: WalletOption.TALISMAN, accounts, address: accounts[0]?.address },\n        });\n      }\n      const [{ address }] = accounts;\n\n      return { walletMethods: toolbox, address: convertAddress(address, 0) };\n    }\n\n    default:\n      throw new SwapKitError({\n        errorKey: \"wallet_chain_not_supported\",\n        info: { chain, wallet: WalletOption.TALISMAN },\n      });\n  }\n};\n"
  ],
  "mappings": "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",
  "debugId": "F77595F1E853EB2764756E2164756E21",
  "names": []
}
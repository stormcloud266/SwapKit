var y=((e)=>typeof require!=="undefined"?require:typeof Proxy!=="undefined"?new Proxy(e,{get:(t,r)=>(typeof require!=="undefined"?require:t)[r]}):e)(function(e){if(typeof require!=="undefined")return require.apply(this,arguments);throw Error('Dynamic require of "'+e+'" is not supported')});import{Chain as d,WalletOption as E,setRequestClientConfig as W}from"@swapkit/helpers";import{decodeAddress as A,encodeAddress as h}from"@polkadot/util-crypto";import{Chain as l,ChainToHexChainId as f,SwapKitError as w,WalletOption as m,addEVMWalletNetwork as g,ensureEVMApiKeys as T,prepareNetworkSwitch as _}from"@swapkit/helpers";import{BrowserProvider as b}from"@swapkit/toolbox-evm";var x=(e,t)=>{const r=A(e);return h(r,t)},C=async({ethereumWindowProvider:e,chain:t,covalentApiKey:r,ethplorerApiKey:a})=>{const{getToolboxByChain:c}=await import("@swapkit/toolbox-evm");if(!e)throw new w({errorKey:"wallet_provider_not_found",info:{wallet:m.TALISMAN,chain:t}});const s=T({chain:t,covalentApiKey:r,ethplorerApiKey:a}),o=new b(e,"any"),i=await o.getSigner(),n=c(t)({...s,provider:o,signer:i});try{t!==l.Ethereum&&await g(o,n.getNetworkParams())}catch(p){throw new w({errorKey:"wallet_failed_to_add_or_switch_network",info:{wallet:m.TALISMAN,chain:t}})}return _({toolbox:{...n},chainId:f[t],provider:o})},u=async({chain:e,ethplorerApiKey:t,covalentApiKey:r})=>{switch(e){case l.Ethereum:case l.Arbitrum:case l.Optimism:case l.Polygon:case l.BinanceSmartChain:{if(!(window.talismanEth&&("send"in window.talismanEth)))throw new w({errorKey:"wallet_talisman_not_found",info:{chain:e}});const{getProvider:a}=await import("@swapkit/toolbox-evm"),c=await C({chain:e,ethereumWindowProvider:window.talismanEth,covalentApiKey:r,ethplorerApiKey:t}),s=(await window.talismanEth.send("eth_requestAccounts",[]))[0];return{walletMethods:{...c,getBalance:async(i,n=!0)=>c.getBalance(i||s,n,a(e))},address:s}}case l.Polkadot:{const{getToolboxByChain:a}=await import("@swapkit/toolbox-substrate"),o=await window?.injectedWeb3?.talisman?.enable?.("talisman");if(!o)throw new w({errorKey:"wallet_talisman_not_enabled",info:{chain:e}});const i=await a(e,{signer:o.signer}),n=await o.accounts.get();if(!n[0]?.address)throw new w({errorKey:"wallet_missing_params",info:{wallet:m.TALISMAN,accounts:n,address:n[0]?.address}});const[{address:p}]=n;return{walletMethods:i,address:x(p,0)}}default:throw new w({errorKey:"wallet_chain_not_supported",info:{chain:e,wallet:m.TALISMAN}})}};function P({addChain:e,config:{thorswapApiKey:t,covalentApiKey:r,ethplorerApiKey:a}}){return async function c(s){W({apiKey:t});const o=s.map(async(i)=>{const{address:n,walletMethods:p}=await u({chain:i,covalentApiKey:r,ethplorerApiKey:a});e({address:n,...p,chain:i,balance:[],walletType:E.TALISMAN})});return await Promise.all(o),!0}}var R=[d.Ethereum,d.Arbitrum,d.Avalanche,d.Polygon,d.BinanceSmartChain,d.Optimism,d.Polkadot],j={connectTalisman:P};export{j as talismanWallet};

//# debugId=F77595F1E853EB2764756E2164756E21

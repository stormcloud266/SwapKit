{
  "version": 3,
  "sources": ["../src/xdefiWallet.ts", "../src/walletHelpers.ts"],
  "sourcesContent": [
    "import {\n  Chain,\n  type ChainId,\n  ChainToChainId,\n  ChainToHexChainId,\n  ChainToRPC,\n  type ConnectConfig,\n  type ConnectWalletParams,\n  SwapKitError,\n  WalletOption,\n  ensureEVMApiKeys,\n  setRequestClientConfig,\n} from \"@swapkit/helpers\";\nimport type { ARBToolbox, AVAXToolbox, BSCToolbox, SEPToolbox } from \"@swapkit/toolbox-evm\";\n\nimport type { WalletTxParams } from \"./walletHelpers.ts\";\nimport {\n  cosmosTransfer,\n  getXDEFIAddress,\n  getXDEFIProvider,\n  getXdefiMethods,\n  walletTransfer,\n} from \"./walletHelpers.ts\";\n\nconst XDEFI_SUPPORTED_CHAINS = [\n  Chain.Arbitrum,\n  Chain.Avalanche,\n  Chain.BinanceSmartChain,\n  Chain.Bitcoin,\n  Chain.BitcoinCash,\n  Chain.Cosmos,\n  Chain.Dogecoin,\n  Chain.Ethereum,\n  Chain.Kujira,\n  Chain.Litecoin,\n  Chain.Maya,\n  Chain.Optimism,\n  Chain.Polygon,\n  Chain.Solana,\n  Chain.THORChain,\n  Chain.Sepolia,\n] as const;\n\nasync function getWalletMethodsForChain({\n  chain,\n  blockchairApiKey,\n  covalentApiKey,\n  ethplorerApiKey,\n}: ConnectConfig & { chain: (typeof XDEFI_SUPPORTED_CHAINS)[number] }) {\n  switch (chain) {\n    case Chain.Solana: {\n      const { SOLToolbox } = await import(\"@swapkit/toolbox-solana\");\n\n      return { ...SOLToolbox(), transfer: walletTransfer };\n    }\n\n    case Chain.Maya:\n    case Chain.THORChain: {\n      const { getToolboxByChain, THORCHAIN_GAS_VALUE, MAYA_GAS_VALUE } = await import(\n        \"@swapkit/toolbox-cosmos\"\n      );\n\n      const gasLimit = chain === Chain.Maya ? MAYA_GAS_VALUE : THORCHAIN_GAS_VALUE;\n      const toolbox = getToolboxByChain(chain);\n\n      return {\n        ...toolbox(),\n        deposit: (tx: WalletTxParams) => walletTransfer({ ...tx, recipient: \"\" }, \"deposit\"),\n        transfer: (tx: WalletTxParams) => walletTransfer({ ...tx, gasLimit }, \"transfer\"),\n      };\n    }\n\n    case Chain.Cosmos:\n    case Chain.Kujira: {\n      const { getToolboxByChain } = await import(\"@swapkit/toolbox-cosmos\");\n      const toolbox = getToolboxByChain(chain);\n\n      return {\n        ...toolbox(),\n        transfer: cosmosTransfer({\n          chainId: ChainToChainId[chain] as ChainId.Cosmos,\n          rpcUrl: ChainToRPC[chain],\n        }),\n      };\n    }\n\n    case Chain.Bitcoin:\n    case Chain.BitcoinCash:\n    case Chain.Dogecoin:\n    case Chain.Litecoin: {\n      const { getToolboxByChain } = await import(\"@swapkit/toolbox-utxo\");\n      const toolbox = getToolboxByChain(chain)({ apiKey: blockchairApiKey });\n\n      return { ...toolbox, transfer: walletTransfer };\n    }\n\n    case Chain.Ethereum:\n    case Chain.Sepolia:\n    case Chain.BinanceSmartChain:\n    case Chain.Arbitrum:\n    case Chain.Optimism:\n    case Chain.Polygon:\n    case Chain.Avalanche: {\n      const { prepareNetworkSwitch, addEVMWalletNetwork } = await import(\"@swapkit/helpers\");\n      const {\n        getProvider,\n        getToolboxByChain,\n        covalentApi,\n        ethplorerApi,\n        getBalance,\n        BrowserProvider,\n      } = await import(\"@swapkit/toolbox-evm\");\n      const ethereumWindowProvider = getXDEFIProvider(chain);\n\n      if (!ethereumWindowProvider) {\n        throw new SwapKitError(\"wallet_xdefi_not_found\");\n      }\n\n      const apiKeys = ensureEVMApiKeys({ chain, covalentApiKey, ethplorerApiKey });\n      const provider = new BrowserProvider(ethereumWindowProvider, \"any\");\n      const signer = await provider.getSigner();\n      const toolbox = getToolboxByChain(chain)({ ...apiKeys, provider, signer });\n      const xdefiMethods = getXdefiMethods(provider);\n\n      try {\n        chain !== Chain.Ethereum &&\n          (await addEVMWalletNetwork(\n            //@ts-expect-error\n            ethereumWindowProvider,\n            (\n              toolbox as\n                | ReturnType<typeof AVAXToolbox>\n                | ReturnType<typeof BSCToolbox>\n                | ReturnType<typeof ARBToolbox>\n                | ReturnType<typeof SEPToolbox>\n            ).getNetworkParams(),\n          ));\n      } catch (_error) {\n        throw new SwapKitError({\n          errorKey: \"wallet_failed_to_add_or_switch_network\",\n          info: { wallet: WalletOption.XDEFI, chain },\n        });\n      }\n\n      const api =\n        chain === Chain.Ethereum || chain === Chain.Sepolia\n          ? ethplorerApi(apiKeys.ethplorerApiKey)\n          : covalentApi({ apiKey: apiKeys.covalentApiKey, chainId: ChainToChainId[chain] });\n\n      return prepareNetworkSwitch({\n        //@ts-expect-error\n        provider: window.xfi?.ethereum,\n        chainId: ChainToHexChainId[chain],\n        toolbox: {\n          ...toolbox,\n          ...xdefiMethods,\n          // Overwrite xdefi getBalance due to race condition in their app when connecting multiple evm wallets\n          getBalance: (address: string, potentialScamFilter?: boolean) =>\n            getBalance({\n              chain,\n              provider: getProvider(chain),\n              api,\n              address,\n              potentialScamFilter,\n            }),\n        },\n      });\n    }\n\n    default:\n      return null;\n  }\n}\n\nfunction connectXDEFI({\n  addChain,\n  config: { covalentApiKey, ethplorerApiKey, blockchairApiKey, thorswapApiKey },\n}: ConnectWalletParams) {\n  return async (chains: (typeof XDEFI_SUPPORTED_CHAINS)[number][]) => {\n    setRequestClientConfig({ apiKey: thorswapApiKey });\n\n    const promises = chains.map(async (chain) => {\n      const address = await getXDEFIAddress(chain);\n      const walletMethods = await getWalletMethodsForChain({\n        chain,\n        blockchairApiKey,\n        covalentApiKey,\n        ethplorerApiKey,\n      });\n\n      addChain({\n        ...walletMethods,\n        address,\n        balance: [],\n        chain,\n        walletType: WalletOption.XDEFI,\n      });\n    });\n\n    await Promise.all(promises);\n\n    return true;\n  };\n}\n\nexport const xdefiWallet = { connectXDEFI } as const;\n",
    "import type { Keplr } from \"@keplr-wallet/types\";\nimport {\n  type AssetValue,\n  Chain,\n  type ChainId,\n  ChainToChainId,\n  type EVMChain,\n  EVMChains,\n  type FeeOption,\n  RPCUrl,\n  SwapKitError,\n  WalletOption,\n  erc20ABI,\n} from \"@swapkit/helpers\";\nimport { type TransferParams, getDenom } from \"@swapkit/toolbox-cosmos\";\nimport type {\n  ApproveParams,\n  BrowserProvider,\n  CallParams,\n  EVMTxParams,\n  Eip1193Provider,\n} from \"@swapkit/toolbox-evm\";\nimport type { SolanaProvider } from \"@swapkit/toolbox-solana\";\n\ntype TransactionMethod = \"transfer\" | \"deposit\";\n\ntype TransactionParams = {\n  asset: string | { chain: string; symbol: string; ticker: string };\n  amount: number | string | { amount: number; decimals?: number };\n  decimal?: number;\n  recipient: string;\n  memo?: string;\n};\n\nexport type WalletTxParams = {\n  feeOptionKey?: FeeOption;\n  from?: string;\n  memo?: string;\n  recipient: string;\n  assetValue: AssetValue;\n  gasLimit?: string | bigint | undefined;\n};\n\nexport function getXDEFIProvider<T extends Chain>(\n  chain: T,\n): T extends Chain.Solana\n  ? SolanaProvider\n  : T extends Chain.Cosmos | Chain.Kujira\n    ? Keplr\n    : T extends EVMChain\n      ? Eip1193Provider\n      : undefined {\n  if (!window.xfi) throw new SwapKitError(\"wallet_xdefi_not_found\");\n\n  switch (chain) {\n    case Chain.Ethereum:\n    case Chain.Avalanche:\n    case Chain.BinanceSmartChain:\n    case Chain.Arbitrum:\n    case Chain.Optimism:\n    case Chain.Polygon:\n    case Chain.Sepolia:\n      // @ts-expect-error\n      return window.xfi.ethereum;\n\n    case Chain.Cosmos:\n    case Chain.Kujira:\n      // @ts-expect-error\n      return window.xfi.keplr;\n\n    case Chain.Bitcoin:\n      // @ts-expect-error\n      return window.xfi.bitcoin;\n    case Chain.BitcoinCash:\n      // @ts-expect-error\n      return window.xfi.bitcoincash;\n    case Chain.Dogecoin:\n      // @ts-expect-error\n      return window.xfi.dogecoin;\n    case Chain.Litecoin:\n      // @ts-expect-error\n      return window.xfi.litecoin;\n    case Chain.THORChain:\n      // @ts-expect-error\n      return window.xfi.thorchain;\n    case Chain.Maya:\n      // @ts-expect-error\n      return window.xfi.mayachain;\n    case Chain.Solana:\n      // @ts-expect-error\n      return window.xfi.solana;\n\n    default:\n      // @ts-expect-error\n      return undefined;\n  }\n}\n\nasync function transaction({\n  method,\n  params,\n  chain,\n}: {\n  method: TransactionMethod;\n  params: TransactionParams[];\n  chain: Chain;\n}): Promise<string> {\n  const client = getXDEFIProvider(chain);\n\n  return new Promise<string>((resolve, reject) => {\n    if (client && \"request\" in client) {\n      // @ts-ignore\n      client.request({ method, params }, (err: string, tx: string) => {\n        err ? reject(err) : resolve(tx);\n      });\n    }\n  });\n}\n\nexport async function getXDEFIAddress(chain: Chain) {\n  const eipProvider = getXDEFIProvider(chain) as Eip1193Provider;\n  if (!eipProvider) {\n    throw new SwapKitError({\n      errorKey: \"wallet_provider_not_found\",\n      info: { wallet: WalletOption.XDEFI, chain },\n    });\n  }\n\n  if ([Chain.Cosmos, Chain.Kujira].includes(chain)) {\n    const provider = getXDEFIProvider(Chain.Cosmos);\n    if (!provider || \"request\" in provider) {\n      throw new SwapKitError({\n        errorKey: \"wallet_provider_not_found\",\n        info: { wallet: WalletOption.XDEFI, chain },\n      });\n    }\n\n    // Enabling before using the Keplr is recommended.\n    // This method will ask the user whether to allow access if they haven't visited this website.\n    // Also, it will request that the user unlock the wallet if the wallet is locked.\n    const chainId = ChainToChainId[chain];\n    await provider.enable(chainId);\n\n    const offlineSigner = provider.getOfflineSigner(chainId);\n\n    const [item] = await offlineSigner.getAccounts();\n    return item?.address;\n  }\n\n  if (EVMChains.includes(chain as EVMChain)) {\n    const [response] = await eipProvider.request({ method: \"eth_requestAccounts\", params: [] });\n\n    return response;\n  }\n\n  if (chain === Chain.Solana) {\n    const provider = getXDEFIProvider(Chain.Solana);\n\n    const accounts = await provider.connect();\n    return accounts.publicKey.toString();\n  }\n\n  return new Promise((resolve, reject) =>\n    eipProvider.request(\n      { method: \"request_accounts\", params: [] },\n      // @ts-expect-error\n      (error: Todo, [response]: string[]) => (error ? reject(error) : resolve(response)),\n    ),\n  );\n}\n\nexport async function walletTransfer(\n  { assetValue, recipient, memo, gasLimit }: WalletTxParams & { assetValue: AssetValue },\n  method: TransactionMethod = \"transfer\",\n) {\n  if (!assetValue) {\n    throw new SwapKitError(\"wallet_xdefi_asset_not_defined\");\n  }\n\n  /**\n   * EVM requires amount to be hex string\n   * UTXO/Cosmos requires amount to be number\n   */\n\n  const from = await getXDEFIAddress(assetValue.chain);\n  const params = [\n    {\n      amount: {\n        amount: assetValue.getBaseValue(\"number\"),\n        decimals: assetValue.decimal,\n      },\n      asset: {\n        chain: assetValue.chain,\n        symbol: assetValue.symbol.toUpperCase(),\n        ticker: assetValue.symbol.toUpperCase(),\n      },\n      memo,\n      from,\n      recipient,\n      gasLimit,\n    },\n  ];\n\n  return transaction({ method, params, chain: assetValue.chain });\n}\n\nexport function cosmosTransfer({\n  chainId,\n  rpcUrl,\n}: {\n  chainId: ChainId.Cosmos | ChainId.Kujira;\n  rpcUrl?: string;\n}) {\n  return async ({ from, recipient, assetValue, memo }: TransferParams) => {\n    const { createSigningStargateClient } = await import(\"@swapkit/toolbox-cosmos\");\n    // @ts-ignore\n    const offlineSigner = window.xfi?.keplr?.getOfflineSignerOnlyAmino(chainId);\n    const cosmJS = await createSigningStargateClient(rpcUrl || RPCUrl.Cosmos, offlineSigner);\n\n    const coins = [\n      {\n        denom: getDenom(`u${assetValue.symbol}`).toLowerCase(),\n        amount: assetValue.getBaseValue(\"string\"),\n      },\n    ];\n\n    try {\n      const { transactionHash } = await cosmJS.sendTokens(from, recipient, coins, 2, memo);\n      return transactionHash;\n    } catch (error) {\n      throw new SwapKitError(\"core_transaction_failed\", { error });\n    }\n  };\n}\n\nexport function getXdefiMethods(provider: BrowserProvider) {\n  return {\n    call: async <T>({\n      contractAddress,\n      abi,\n      funcName,\n      funcParams = [],\n      txOverrides,\n    }: CallParams): Promise<T> => {\n      const contractProvider = provider;\n      if (!contractAddress) {\n        throw new SwapKitError(\"wallet_xdefi_contract_address_not_provided\");\n      }\n      const { createContract, createContractTxObject, isStateChangingCall, toHexString } =\n        await import(\"@swapkit/toolbox-evm\");\n\n      const isStateChanging = isStateChangingCall(abi, funcName);\n\n      if (isStateChanging) {\n        const { value, from, to, data } = await createContractTxObject(contractProvider, {\n          contractAddress,\n          abi,\n          funcName,\n          funcParams,\n          txOverrides,\n        });\n\n        return provider.send(\"eth_sendTransaction\", [\n          {\n            value: toHexString(BigInt(value || 0)),\n            from,\n            to,\n            data: data || \"0x\",\n          } as Todo,\n        ]);\n      }\n      const contract = createContract(contractAddress, abi, contractProvider);\n\n      const result = await contract[funcName]?.(...funcParams);\n\n      return typeof result?.hash === \"string\" ? result?.hash : result;\n    },\n    approve: async ({ assetAddress, spenderAddress, amount, from }: ApproveParams) => {\n      const { MAX_APPROVAL, createContractTxObject, toHexString } = await import(\n        \"@swapkit/toolbox-evm\"\n      );\n      const funcParams = [spenderAddress, BigInt(amount || MAX_APPROVAL)];\n      const txOverrides = { from };\n\n      const functionCallParams = {\n        contractAddress: assetAddress,\n        abi: erc20ABI,\n        funcName: \"approve\",\n        funcParams,\n        txOverrides,\n      };\n\n      const { value, to, data } = await createContractTxObject(provider, functionCallParams);\n\n      return provider.send(\"eth_sendTransaction\", [\n        {\n          value: toHexString(BigInt(value || 0)),\n          from,\n          to,\n          data: data || \"0x\",\n        } as Todo,\n      ]);\n    },\n    sendTransaction: async (tx: EVMTxParams) => {\n      const { from, to, data, value } = tx;\n      if (!to) {\n        throw new SwapKitError(\"wallet_xdefi_send_transaction_no_address\");\n      }\n\n      const { toHexString } = await import(\"@swapkit/toolbox-evm\");\n\n      return provider.send(\"eth_sendTransaction\", [\n        {\n          value: toHexString(BigInt(value || 0)),\n          from,\n          to,\n          data: data || \"0x\",\n        } as Todo,\n      ]);\n    },\n  };\n}\n"
  ],
  "mappings": "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",
  "debugId": "3F663FED04EC35A364756E2164756E21",
  "names": []
}
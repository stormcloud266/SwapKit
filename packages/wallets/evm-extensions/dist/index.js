var y=((t)=>typeof require!=="undefined"?require:typeof Proxy!=="undefined"?new Proxy(t,{get:(e,n)=>(typeof require!=="undefined"?require:e)[n]}):t)(function(t){if(typeof require!=="undefined")return require.apply(this,arguments);throw Error('Dynamic require of "'+t+'" is not supported')});import{Chain as E,ChainId as P,ChainToHexChainId as S,WalletOption as r,addEVMWalletNetwork as T,ensureEVMApiKeys as v,prepareNetworkSwitch as V,setRequestClientConfig as b,switchEVMWalletNetwork as C}from"@swapkit/helpers";import{getToolboxByChain as x}from"@swapkit/toolbox-evm";function f({addChain:t,config:{covalentApiKey:e,ethplorerApiKey:n,thorswapApiKey:w}}){return async function a(c,o=r.METAMASK,i){b({apiKey:w});const W=c.map(async(s)=>{const{BrowserProvider:p,getProvider:u}=await import("@swapkit/toolbox-evm");if(o===r.EIP6963){if(!i)throw new Error("Missing provider");const l=new p(i,"any");await l.send("eth_requestAccounts",[]);const B=await(await l.getSigner()).getAddress(),M=await m({chain:s,ethplorerApiKey:n,covalentApiKey:e,ethereumWindowProvider:i,provider:l});t({...M,chain:s,address:B,getBalance:async(h=!0)=>M.getBalance(B,h,u(s)),balance:[],walletType:o});return}const d=new p(O(o),"any");await d.send("eth_requestAccounts",[]);const g=await(await d.getSigner()).getAddress(),A=await m({chain:s,ethplorerApiKey:n,covalentApiKey:e,ethereumWindowProvider:O(o),provider:d});t({...A,chain:s,address:g,getBalance:async(l=!0)=>A.getBalance(g,l,u(s)),balance:[],walletType:o})});return await Promise.all(W),!0}}var O=(t)=>{switch(t){case r.BRAVE:case r.METAMASK:case r.OKX_MOBILE:return window.ethereum;case r.COINBASE_WEB:return window.coinbaseWalletExtension;case r.TRUSTWALLET_WEB:return window.trustwallet}},m=async({ethereumWindowProvider:t,chain:e,covalentApiKey:n,ethplorerApiKey:w,provider:a})=>{if(!t)throw new Error("Requested web3 wallet is not installed");const c=v({chain:e,covalentApiKey:n,ethplorerApiKey:w}),o=await a.getSigner(),i=x(e)({...c,provider:a,signer:o});try{e!==E.Ethereum&&e!==E.Sepolia&&await T(a,i.getNetworkParams()),e===E.Sepolia&&await C(a,P.SepoliaHex)}catch(W){throw new Error(`Failed to add/switch ${e} network: ${e}`)}return V({toolbox:{...i},chainId:S[e],provider:a})},X={connectEVMWallet:f};export{m as getWeb3WalletMethods,X as evmWallet};

//# debugId=834A8F6E162D665264756E2164756E21

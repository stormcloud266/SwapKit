{
  "version": 3,
  "sources": ["../src/radixWallet.ts"],
  "sourcesContent": [
    "import { DataRequestBuilder, RadixDappToolkit } from \"@radixdlt/radix-dapp-toolkit\";\nimport {\n  Chain,\n  type ConnectWalletParams,\n  RPCUrl,\n  WalletOption,\n  setRequestClientConfig,\n} from \"@swapkit/helpers\";\nimport { RadixMainnet, type RadixSigner } from \"@swapkit/toolbox-radix\";\n\n// TODO figure out way to make wallet work nicely with toolbox without reimplementing all the methods\nconst RadixSignerInstance = (): RadixSigner & { getAddress: () => Promise<string> } => {\n  const rdt = RadixDappToolkit({\n    dAppDefinitionAddress: \"account_rdx128r289p58222hcvev7frs6kue76pl7pdcnw8725aw658v0zggkh9ws\",\n    networkId: RadixMainnet.networkId,\n    applicationName: \"Swapkit Playground\",\n    applicationVersion: \"1.0.0\",\n  });\n\n  return {\n    getAddress: () => {\n      return new Promise((resolve) => {\n        const existingWalletData = rdt.walletApi.getWalletData();\n        const account = existingWalletData?.accounts?.[0];\n\n        if (account) resolve(account.address);\n\n        rdt.walletApi.setRequestData(DataRequestBuilder.accounts().atLeast(1));\n        rdt.walletApi.sendRequest();\n\n        rdt.walletApi.walletData$.subscribe((state) => {\n          if (state.accounts[0]) {\n            resolve(state.accounts[0].address);\n          }\n        });\n      });\n    },\n    publicKey: () => {\n      throw new Error(\"Not implemented\");\n    },\n    publicKeyBytes: () => {\n      throw new Error(\"Not implemented\");\n    },\n    publicKeyHex: () => {\n      throw new Error(\"Not implemented\");\n    },\n    sign: (_messageHash: Uint8Array) => {\n      throw new Error(\"Not implemented\");\n    },\n    signToSignature: (_messageHash: Uint8Array) => {\n      throw new Error(\"Not implemented\");\n    },\n    signToSignatureWithPublicKey: (_messageHash: Uint8Array) => {\n      throw new Error(\"Not implemented\");\n    },\n  };\n};\n\nconst getWalletMethods = async () => {\n  const { getRadixCoreApiClient, RadixToolbox, RadixMainnet } = await import(\n    \"@swapkit/toolbox-radix\"\n  );\n\n  const api = await getRadixCoreApiClient(RPCUrl.Radix, RadixMainnet);\n\n  const signer = await RadixSignerInstance();\n  const toolbox = await RadixToolbox({ api, signer });\n\n  const address = await signer.getAddress();\n\n  return {\n    address,\n    walletMethods: {\n      ...toolbox,\n      getAddress: signer.getAddress,\n      getBalance: () => toolbox.getBalance(address),\n    },\n  };\n};\n\nfunction connectRadixWallet({ addChain, config: { thorswapApiKey } }: ConnectWalletParams) {\n  return async function connectRadixWallet(_chains: Chain.Radix[]) {\n    setRequestClientConfig({ apiKey: thorswapApiKey });\n\n    const { address, walletMethods } = await getWalletMethods();\n\n    addChain({\n      chain: Chain.Radix,\n      address,\n      balance: [],\n      walletType: WalletOption.RADIX_WALLET,\n      ...walletMethods,\n    });\n\n    return true;\n  };\n}\n\nexport const radixWallet = { connectRadixWallet } as const;\n"
  ],
  "mappings": "mSAAA,6BAAS,sBAAoB,qCAC7B,gBACE,YAEA,kBACA,4BACA,yBAEF,uBAAS,+BAwET,SAAS,CAAkB,EAAG,WAAU,QAAU,mBAAyC,CACzF,OAAO,eAAe,CAAkB,CAAC,EAAwB,CAC/D,EAAuB,CAAE,OAAQ,CAAe,CAAC,EAEjD,MAAQ,UAAS,iBAAkB,MAAM,EAAiB,EAU1D,OARA,EAAS,CACP,MAAO,EAAM,MACb,UACA,QAAS,CAAC,EACV,WAAY,EAAa,gBACtB,CACL,CAAC,EAEM,IAnFX,IAAM,EAAsB,IAA2D,CACrF,MAAM,EAAM,EAAiB,CAC3B,sBAAuB,qEACvB,UAAW,EAAa,UACxB,gBAAiB,qBACjB,mBAAoB,OACtB,CAAC,EAED,MAAO,CACL,WAAY,IAAM,CAChB,OAAO,IAAI,QAAQ,CAAC,IAAY,CAE9B,MAAM,EADqB,EAAI,UAAU,cAAc,GACnB,WAAW,GAE/C,GAAI,EAAS,EAAQ,EAAQ,OAAO,EAEpC,EAAI,UAAU,eAAe,EAAmB,SAAS,EAAE,QAAQ,CAAC,CAAC,EACrE,EAAI,UAAU,YAAY,EAE1B,EAAI,UAAU,YAAY,UAAU,CAAC,IAAU,CAC7C,GAAI,EAAM,SAAS,GACjB,EAAQ,EAAM,SAAS,GAAG,OAAO,EAEpC,EACF,GAEH,UAAW,IAAM,CACf,MAAM,IAAI,MAAM,iBAAiB,GAEnC,eAAgB,IAAM,CACpB,MAAM,IAAI,MAAM,iBAAiB,GAEnC,aAAc,IAAM,CAClB,MAAM,IAAI,MAAM,iBAAiB,GAEnC,KAAM,CAAC,IAA6B,CAClC,MAAM,IAAI,MAAM,iBAAiB,GAEnC,gBAAiB,CAAC,IAA6B,CAC7C,MAAM,IAAI,MAAM,iBAAiB,GAEnC,6BAA8B,CAAC,IAA6B,CAC1D,MAAM,IAAI,MAAM,iBAAiB,EAErC,GAGI,EAAmB,SAAY,CACnC,MAAQ,wBAAuB,eAAc,gBAAiB,KAC5D,kCAGI,EAAM,MAAM,EAAsB,EAAO,MAAO,CAAY,EAE5D,EAAS,MAAM,EAAoB,EACnC,EAAU,MAAM,EAAa,CAAE,MAAK,QAAO,CAAC,EAE5C,EAAU,MAAM,EAAO,WAAW,EAExC,MAAO,CACL,UACA,cAAe,IACV,EACH,WAAY,EAAO,WACnB,WAAY,IAAM,EAAQ,WAAW,CAAO,CAC9C,CACF,GAqBW,EAAc,CAAE,oBAAmB",
  "debugId": "D1F0A10474F8B3F464756E2164756E21",
  "names": []
}
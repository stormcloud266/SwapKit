var L=((j)=>typeof require!=="undefined"?require:typeof Proxy!=="undefined"?new Proxy(j,{get:(z,F)=>(typeof require!=="undefined"?require:z)[F]}):j)(function(j){if(typeof require!=="undefined")return require.apply(this,arguments);throw Error('Dynamic require of "'+j+'" is not supported')});import{DataRequestBuilder as N,RadixDappToolkit as Q}from"@radixdlt/radix-dapp-toolkit";import{Chain as V,RPCUrl as X,WalletOption as Y,setRequestClientConfig as Z}from"@swapkit/helpers";import{RadixMainnet as _}from"@swapkit/toolbox-radix";function B({addChain:j,config:{thorswapApiKey:z}}){return async function F(G){Z({apiKey:z});const{address:E,walletMethods:H}=await f();return j({chain:V.Radix,address:E,balance:[],walletType:Y.RADIX_WALLET,...H}),!0}}var $=()=>{const j=Q({dAppDefinitionAddress:"account_rdx128r289p58222hcvev7frs6kue76pl7pdcnw8725aw658v0zggkh9ws",networkId:_.networkId,applicationName:"Swapkit Playground",applicationVersion:"1.0.0"});return{getAddress:()=>{return new Promise((z)=>{const G=j.walletApi.getWalletData()?.accounts?.[0];if(G)z(G.address);j.walletApi.setRequestData(N.accounts().atLeast(1)),j.walletApi.sendRequest(),j.walletApi.walletData$.subscribe((E)=>{if(E.accounts[0])z(E.accounts[0].address)})})},publicKey:()=>{throw new Error("Not implemented")},publicKeyBytes:()=>{throw new Error("Not implemented")},publicKeyHex:()=>{throw new Error("Not implemented")},sign:(z)=>{throw new Error("Not implemented")},signToSignature:(z)=>{throw new Error("Not implemented")},signToSignatureWithPublicKey:(z)=>{throw new Error("Not implemented")}}},f=async()=>{const{getRadixCoreApiClient:j,RadixToolbox:z,RadixMainnet:F}=await import("@swapkit/toolbox-radix"),G=await j(X.Radix,F),E=await $(),H=await z({api:G,signer:E}),J=await E.getAddress();return{address:J,walletMethods:{...H,getAddress:E.getAddress,getBalance:()=>H.getBalance(J)}}},I={connectRadixWallet:B};export{I as radixWallet};

//# debugId=D1F0A10474F8B3F464756E2164756E21

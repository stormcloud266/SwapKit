var p=((t)=>typeof require!=="undefined"?require:typeof Proxy!=="undefined"?new Proxy(t,{get:(o,a)=>(typeof require!=="undefined"?require:o)[a]}):t)(function(t){if(typeof require!=="undefined")return require.apply(this,arguments);throw Error('Dynamic require of "'+t+'" is not supported')});import{Chain as m,WalletOption as W,setRequestClientConfig as K}from"@swapkit/helpers";import{Chain as n,ChainId as u,ChainToHexChainId as b,RPCUrl as h,SwapKitError as k,addEVMWalletNetwork as P,prepareNetworkSwitch as T}from"@swapkit/helpers";import{AVAXToolbox as A,BSCToolbox as S,BrowserProvider as C,ETHToolbox as E}from"@swapkit/toolbox-evm";var O=(t)=>async({from:o,recipient:a,amount:w,asset:i,memo:l})=>{if(!(window.okxwallet&&("keplr"in window.okxwallet)))throw new Error("No cosmos okxwallet found");const{keplr:e}=window.okxwallet,r=e?.getOfflineSignerOnlyAmino(u.Cosmos),{createSigningStargateClient:s}=await import("@swapkit/toolbox-cosmos"),c=await s(t||h.Cosmos,r),g=[{denom:i?.symbol==="MUON"?"umuon":"uatom",amount:w.amount().toString()}],{transactionHash:d}=await c.sendTokens(o,a,g,1.6,l);return d},y=async({chain:t,ethplorerApiKey:o,covalentApiKey:a,blockchairApiKey:w,rpcUrl:i,api:l})=>{switch(t){case n.Ethereum:case n.Avalanche:case n.Arbitrum:case n.Optimism:case n.Polygon:case n.BinanceSmartChain:{if(!(window.okxwallet&&("send"in window.okxwallet)))throw new Error("No okxwallet found");const{getProvider:e}=await import("@swapkit/toolbox-evm"),r=await v({chain:t,ethplorerApiKey:o,covalentApiKey:a,ethereumWindowProvider:window.okxwallet}),s=(await window.okxwallet.send("eth_requestAccounts",[])).result[0];return{...r,getBalance:async(g,d=!0)=>r.getBalance(g||s,d,e(t)),address:s}}case n.Bitcoin:{if(!(window.okxwallet&&("bitcoin"in window.okxwallet)))throw new Error("No bitcoin okxwallet found");const{bitcoin:e}=window.okxwallet,{Psbt:r,BTCToolbox:s}=await import("@swapkit/toolbox-utxo"),c=(await e.connect()).address,g=s({rpcUrl:i,apiKey:w,apiClient:l}),d=async(f)=>{const x=await e.signPsbt(f.toHex(),{from:c,type:"list"});return r.fromHex(x)};return{...g,transfer:(f)=>{return g.transfer({...f,signTransaction:d})},address:c}}case n.Cosmos:{if(!(window.okxwallet&&("keplr"in window.okxwallet)))throw new Error("No bitcoin okxwallet found");const{keplr:e}=window.okxwallet;await e.enable(u.Cosmos);const r=await e.getOfflineSignerOnlyAmino(u.Cosmos).getAccounts();if(!r?.[0])throw new Error("No cosmos account found");const{GaiaToolbox:s}=await import("@swapkit/toolbox-cosmos"),[{address:c}]=r;return{address:c,...s({server:l}),transfer:O(i)}}default:throw new Error(`No wallet for chain ${t}`)}},v=async({ethereumWindowProvider:t,chain:o,covalentApiKey:a,ethplorerApiKey:w})=>{if(!t)throw new Error("Requested web3 wallet is not installed");if(o!==n.Ethereum&&!a||o===n.Ethereum&&!w)throw new k({errorKey:"wallet_missing_api_key",info:{missingKey:o===n.Ethereum?"ethplorerApiKey":"covalentApiKey",chain:o}});const i=new C(t,"any"),l={provider:i,signer:await i.getSigner(),ethplorerApiKey:w,covalentApiKey:a},e=o===n.Ethereum?E(l):o===n.Avalanche?A(l):S(l);try{o!==n.Ethereum&&await P(i,e.getNetworkParams())}catch(r){throw new Error(`Failed to add/switch ${o} network: ${o}`)}return T({toolbox:{...e},chainId:b[o],provider:i})};function B({addChain:t,config:{thorswapApiKey:o,covalentApiKey:a,ethplorerApiKey:w,blockchairApiKey:i}}){return async function l(e){K({apiKey:o});const r=e.map(async(s)=>{const c=await y({chain:s,covalentApiKey:a,ethplorerApiKey:w,blockchairApiKey:i});t({...c,chain:s,balance:[],walletType:W.OKX})});return await Promise.all(r),!0}}var D=[m.Arbitrum,m.Avalanche,m.BinanceSmartChain,m.Optimism,m.Polygon,m.Bitcoin,m.Ethereum,m.Cosmos],N={connectOkx:B};export{N as okxWallet};

//# debugId=90D1DC0929465F3C64756E2164756E21

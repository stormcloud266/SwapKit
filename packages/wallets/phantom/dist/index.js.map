{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": [
    "import {\n  Chain,\n  type ConnectWalletParams,\n  SwapKitError,\n  WalletOption,\n  setRequestClientConfig,\n} from \"@swapkit/helpers\";\n\nfunction getPhantomProvider() {\n  // @ts-ignore\n  return window.phantom?.solana;\n}\n\nfunction connectPhantom({ addChain, config: { thorswapApiKey }, rpcUrls }: ConnectWalletParams) {\n  return async function connectPhantom(chain: Chain = Chain.Solana) {\n    setRequestClientConfig({ apiKey: thorswapApiKey });\n\n    const provider = getPhantomProvider();\n    if (!provider?.isPhantom) {\n      throw new SwapKitError(\"wallet_phantom_not_found\");\n    }\n\n    try {\n      const connection = await provider.connect();\n      const address = connection.publicKey.toString();\n\n      const { SOLToolbox } = await import(\"@swapkit/toolbox-solana\");\n\n      const walletMethods = SOLToolbox({ rpcUrl: rpcUrls[chain] });\n\n      addChain({\n        ...walletMethods,\n        chain,\n        address,\n        walletType: WalletOption.PHANTOM,\n        balance: [],\n        transfer: console.log,\n      });\n\n      return true;\n    } catch (_) {\n      throw new SwapKitError(\"wallet_connection_rejected_by_user\");\n    }\n  };\n}\n\nexport const phantomWallet = { connectPhantom } as const;\n"
  ],
  "mappings": "mSAAA,gBACE,kBAEA,kBACA,4BACA,yBAGF,SAAS,CAAkB,EAAG,CAE5B,OAAO,OAAO,SAAS,OAGzB,SAAS,CAAc,EAAG,WAAU,QAAU,kBAAkB,WAAgC,CAC9F,OAAO,eAAe,CAAc,CAAC,EAAe,EAAM,OAAQ,CAChE,EAAuB,CAAE,OAAQ,CAAe,CAAC,EAEjD,MAAM,EAAW,EAAmB,EACpC,IAAK,GAAU,UACb,MAAM,IAAI,EAAa,0BAA0B,EAGnD,GAAI,CAEF,MAAM,GADa,MAAM,EAAS,QAAQ,GACf,UAAU,SAAS,GAEtC,cAAe,KAAa,mCAE9B,EAAgB,EAAW,CAAE,OAAQ,EAAQ,EAAO,CAAC,EAW3D,OATA,EAAS,IACJ,EACH,QACA,UACA,WAAY,EAAa,QACzB,QAAS,CAAC,EACV,SAAU,QAAQ,GACpB,CAAC,EAEM,SACA,EAAP,CACA,MAAM,IAAI,EAAa,oCAAoC,IAK1D,IAAM,EAAgB,CAAE,gBAAe",
  "debugId": "8AE9E5FD56B0A82D64756E2164756E21",
  "names": []
}
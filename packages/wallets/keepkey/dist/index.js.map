{
  "version": 3,
  "sources": ["../src/index.ts", "../src/chains/cosmos.ts", "../src/helpers/coins.ts", "../src/chains/evm.ts", "../src/chains/mayachain.ts", "../src/chains/thorchain.ts", "../src/chains/utxo.ts"],
  "sourcesContent": [
    "import {\n  Chain,\n  type ConnectWalletParams,\n  type DerivationPathArray,\n  type EVMChain,\n  WalletOption,\n  setRequestClientConfig,\n} from \"@swapkit/helpers\";\n\nimport { KeepKeySdk } from \"@keepkey/keepkey-sdk\";\nexport type { PairingInfo } from \"@keepkey/keepkey-sdk\";\n\nimport { cosmosWalletMethods } from \"./chains/cosmos.ts\";\nimport { KeepKeySigner } from \"./chains/evm.ts\";\nimport { mayachainWalletMethods } from \"./chains/mayachain.ts\";\nimport { thorchainWalletMethods } from \"./chains/thorchain.ts\";\nimport { utxoWalletMethods } from \"./chains/utxo.ts\";\n\nexport const KEEPKEY_SUPPORTED_CHAINS = [\n  Chain.Arbitrum,\n  Chain.Avalanche,\n  Chain.BinanceSmartChain,\n  Chain.Bitcoin,\n  Chain.BitcoinCash,\n  Chain.Cosmos,\n  Chain.Dogecoin,\n  Chain.Dash,\n  Chain.Ethereum,\n  Chain.Litecoin,\n  Chain.Optimism,\n  Chain.Polygon,\n  Chain.THORChain,\n  Chain.Maya,\n] as const;\n\n/*\n * KeepKey Wallet\n */\ntype KeepKeyOptions = {\n  sdk: KeepKeySdk;\n  apiClient?: Todo;\n  rpcUrl?: string;\n  ethplorerApiKey?: string;\n  blockchairApiKey?: string;\n  covalentApiKey?: string;\n  chain: Chain;\n  derivationPath?: DerivationPathArray;\n};\n\nconst getWalletMethods = async ({\n  sdk,\n  apiClient,\n  rpcUrl,\n  chain,\n  derivationPath,\n  covalentApiKey,\n  ethplorerApiKey,\n  blockchairApiKey,\n}: KeepKeyOptions) => {\n  const { getProvider, getToolboxByChain } = await import(\"@swapkit/toolbox-evm\");\n\n  switch (chain) {\n    case Chain.BinanceSmartChain:\n    case Chain.Arbitrum:\n    case Chain.Optimism:\n    case Chain.Polygon:\n    case Chain.Avalanche:\n    case Chain.Ethereum: {\n      if (chain === Chain.Ethereum && !ethplorerApiKey)\n        throw new Error(\"Ethplorer API key not found\");\n      if (chain !== Chain.Ethereum && !covalentApiKey)\n        throw new Error(\"Covalent API key not found\");\n\n      const provider = getProvider(chain as EVMChain, rpcUrl);\n      const signer = new KeepKeySigner({\n        sdk,\n        chain,\n        derivationPath,\n        provider,\n      });\n      const address = await signer.getAddress();\n      const evmParams = {\n        api: apiClient,\n        signer,\n        provider,\n        covalentApiKey: covalentApiKey as string,\n        ethplorerApiKey: ethplorerApiKey as string,\n      };\n\n      return {\n        address,\n        ...getToolboxByChain(chain)(evmParams),\n      };\n    }\n    case Chain.Cosmos: {\n      return cosmosWalletMethods({ sdk, derivationPath, api: apiClient });\n    }\n    case Chain.THORChain: {\n      return thorchainWalletMethods({ sdk, derivationPath });\n    }\n    case Chain.Maya: {\n      return mayachainWalletMethods({ sdk, derivationPath });\n    }\n    case Chain.Bitcoin:\n    case Chain.BitcoinCash:\n    case Chain.Dash:\n    case Chain.Dogecoin:\n    case Chain.Litecoin: {\n      return utxoWalletMethods({\n        apiKey: blockchairApiKey,\n        apiClient,\n        sdk,\n        chain,\n        derivationPath,\n      });\n    }\n    default:\n      throw new Error(`Chain not supported ${chain}`);\n  }\n};\n\nexport const checkKeepkeyAvailability = async (\n  spec = \"http://localhost:1646/spec/swagger.json\",\n) => {\n  try {\n    const response = await fetch(spec);\n    return response.status === 200;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n};\n\n// kk-sdk docs: https://medium.com/@highlander_35968/building-on-the-keepkey-sdk-2023fda41f38\n// test spec: if offline, launch keepkey-bridge\nconst checkAndLaunch = async (attempts: number) => {\n  if (attempts === 0) {\n    alert(\n      \"KeepKey desktop is required for keepkey-sdk, please go to https://keepkey.com/get-started\",\n    );\n  }\n  const isAvailable = await checkKeepkeyAvailability();\n\n  if (!isAvailable) {\n    window.location.assign(\"keepkey://launch\");\n    await new Promise((resolve) => setTimeout(resolve, 30000));\n    checkAndLaunch(attempts - 1);\n  }\n};\n\nfunction connectKeepkey({\n  apis,\n  rpcUrls,\n  addChain,\n  config: {\n    blockchairApiKey,\n    covalentApiKey,\n    ethplorerApiKey = \"freekey\",\n    keepkeyConfig,\n    thorswapApiKey,\n  },\n}: ConnectWalletParams) {\n  return async function connectKeepkey(\n    chains: (typeof KEEPKEY_SUPPORTED_CHAINS)[number][],\n    // @deprecated - use derivationPathMap instead\n    derivationPaths?: DerivationPathArray[],\n    derivationPathMap?: Record<Chain, DerivationPathArray>,\n  ) {\n    setRequestClientConfig({ apiKey: thorswapApiKey });\n    if (!keepkeyConfig) throw new Error(\"KeepKey config not found\");\n\n    await checkAndLaunch(3);\n\n    // Only build this once for all assets\n    const keepKeySdk = await KeepKeySdk.create(keepkeyConfig);\n\n    const toolboxPromises = chains.map(async (chain, i) => {\n      const derivationPath = Array.isArray(derivationPaths)\n        ? derivationPaths[i]\n        : derivationPathMap?.[chain];\n\n      const walletMethods = await getWalletMethods({\n        sdk: keepKeySdk,\n        apiClient: apis[chain],\n        rpcUrl: rpcUrls[chain],\n        chain,\n        derivationPath,\n        covalentApiKey,\n        ethplorerApiKey,\n        blockchairApiKey,\n      });\n\n      addChain({\n        ...walletMethods,\n        balance: [],\n        chain,\n        walletType: WalletOption.KEEPKEY,\n      });\n    });\n\n    await Promise.all(toolboxPromises);\n\n    return true;\n  };\n}\n\nexport const keepkeyWallet = { connectKeepkey } as const;\n",
    "import type { KeepKeySdk } from \"@keepkey/keepkey-sdk\";\nimport {\n  ChainId,\n  DerivationPath,\n  type DerivationPathArray,\n  RPCUrl,\n  derivationPathToString,\n} from \"@swapkit/helpers\";\nimport type { BaseCosmosToolboxType, TransferParams } from \"@swapkit/toolbox-cosmos\";\n\nimport { bip32ToAddressNList } from \"../helpers/coins.ts\";\n\nexport const cosmosWalletMethods = async ({\n  sdk,\n  api,\n  derivationPath,\n}: {\n  sdk: KeepKeySdk;\n  api: string;\n  derivationPath?: DerivationPathArray;\n}): Promise<BaseCosmosToolboxType & { address: string }> => {\n  const { DEFAULT_COSMOS_FEE_MAINNET, GaiaToolbox, createStargateClient } = await import(\n    \"@swapkit/toolbox-cosmos\"\n  );\n\n  try {\n    const derivationPathString = derivationPath\n      ? derivationPathToString(derivationPath)\n      : `${DerivationPath.GAIA}/0`;\n\n    const { address: fromAddress } = (await sdk.address.cosmosGetAddress({\n      address_n: bip32ToAddressNList(derivationPathString),\n    })) as { address: string };\n\n    const toolbox = GaiaToolbox({ server: api });\n\n    if (DEFAULT_COSMOS_FEE_MAINNET.amount[0]) {\n      DEFAULT_COSMOS_FEE_MAINNET.amount[0].amount = String(\n        await toolbox?.getFeeRateFromThorswap?.(ChainId.Cosmos, 500),\n      );\n    }\n\n    // TODO support other cosmos assets\n    const transfer = async ({ assetValue, recipient, memo }: TransferParams) => {\n      const amount = assetValue.getBaseValue(\"string\");\n      const accountInfo = await toolbox.getAccount(fromAddress);\n\n      const keepKeySignedTx = await sdk.cosmos.cosmosSignAmino({\n        signerAddress: fromAddress,\n        signDoc: {\n          fee: DEFAULT_COSMOS_FEE_MAINNET,\n          memo: memo || \"\",\n          sequence: accountInfo?.sequence.toString() ?? \"\",\n          chain_id: ChainId.Cosmos,\n          account_number: accountInfo?.accountNumber.toString() ?? \"\",\n          msgs: [\n            {\n              value: {\n                amount: [{ denom: \"uatom\", amount }],\n                to_address: recipient,\n                from_address: fromAddress,\n              },\n              type: \"cosmos-sdk/MsgSend\",\n            },\n          ],\n        },\n      });\n\n      const decodedBytes = atob(keepKeySignedTx.serialized);\n      const uint8Array = new Uint8Array(decodedBytes.length).map((_, i) =>\n        decodedBytes.charCodeAt(i),\n      );\n\n      const client = await createStargateClient(RPCUrl.Cosmos);\n      const response = await client.broadcastTx(uint8Array);\n\n      return response.transactionHash;\n    };\n\n    return { ...toolbox, transfer, address: fromAddress };\n  } catch (e) {\n    console.error(e);\n    throw e;\n  }\n};\n",
    "/*\n    KeepKey Specific bip32 path conventions\n*/\n\nconst HARDENED = 0x80000000;\n\nexport enum ChainToKeepKeyName {\n  BTC = \"Bitcoin\",\n  BCH = \"BitcoinCash\",\n  DOGE = \"Dogecoin\",\n  LTC = \"Litecoin\",\n  DASH = \"Dash\",\n}\n\nexport function addressNListToBIP32(address: number[]) {\n  return `m/${address.map((num) => (num >= HARDENED ? `${num - HARDENED}'` : num)).join(\"/\")}`;\n}\n\nexport function bip32Like(path: string) {\n  if (path === \"m/\") return true;\n\n  return /^m(((\\/[0-9]+h)+|(\\/[0-9]+H)+|(\\/[0-9]+')*)((\\/[0-9]+)*))$/.test(path);\n}\n\n// biome-ignore lint/complexity/noExcessiveCognitiveComplexity: TODO: Refactor\nexport function bip32ToAddressNList(initPath: string): number[] {\n  let path = initPath;\n\n  if (!bip32Like(path)) {\n    throw new Error(`Not a bip32 path: '${path}'`);\n  }\n\n  if (/^m\\//i.test(path)) {\n    path = path.slice(2);\n  }\n  const segments = path.split(\"/\");\n\n  if (segments.length === 1 && segments[0] === \"\") return [];\n\n  const ret = new Array(segments.length);\n\n  for (let i = 0; i < segments.length; i++) {\n    // TODO: Check for better way instead of exec\n    const segment = segments[i];\n    if (segment) {\n      const tmp = /(\\d+)([hH']?)/.exec(segment);\n      if (tmp === null) throw new Error(\"Invalid input\");\n\n      const [, num = \"\", modifier = \"\"] = tmp;\n\n      ret[i] = Number.parseInt(num, 10);\n\n      if (ret[i] >= HARDENED) throw new Error(\"Invalid child index\");\n\n      if (modifier === \"h\" || modifier === \"H\" || modifier === \"'\") {\n        ret[i] += HARDENED;\n      } else if (modifier.length !== 0) {\n        throw new Error(\"Invalid modifier\");\n      }\n    }\n  }\n\n  return ret;\n}\n",
    "import type { KeepKeySdk } from \"@keepkey/keepkey-sdk\";\nimport {\n  type Chain,\n  ChainToChainId,\n  type DerivationPathArray,\n  NetworkDerivationPath,\n  derivationPathToString,\n} from \"@swapkit/helpers\";\nimport type { JsonRpcProvider, Provider, TransactionRequest } from \"@swapkit/toolbox-evm\";\nimport { AbstractSigner } from \"@swapkit/toolbox-evm\";\n\nimport { bip32ToAddressNList } from \"../helpers/coins.ts\";\n\ninterface KeepKeyEVMSignerParams {\n  sdk: KeepKeySdk;\n  chain: Chain;\n  derivationPath?: DerivationPathArray;\n  provider: Provider | JsonRpcProvider;\n}\n\nexport class KeepKeySigner extends AbstractSigner {\n  private sdk: KeepKeySdk;\n  private chain: Chain;\n  private derivationPath: DerivationPathArray;\n  private address: string;\n  readonly provider: Provider | JsonRpcProvider;\n\n  constructor({ sdk, chain, derivationPath, provider }: KeepKeyEVMSignerParams) {\n    super();\n    this.sdk = sdk;\n    this.chain = chain;\n    this.derivationPath = derivationPath || NetworkDerivationPath.ETH;\n    this.address = \"\";\n    this.provider = provider;\n  }\n\n  signTypedData(): Promise<string> {\n    throw new Error(\"this method is not implemented\");\n  }\n\n  getAddress = async () => {\n    if (this.address) return this.address;\n    const { address } = await this.sdk.address.ethereumGetAddress({\n      address_n: bip32ToAddressNList(derivationPathToString(this.derivationPath)),\n    });\n\n    this.address = address;\n    return address;\n  };\n\n  signMessage = (message: string) =>\n    this.sdk.eth.ethSign({ address: this.address, message }) as Promise<string>;\n\n  signTransaction = async ({\n    to,\n    value,\n    gasLimit,\n    nonce,\n    data,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    gasPrice,\n    // biome-ignore lint/complexity/noExcessiveCognitiveComplexity: <explanation>\n  }: TransactionRequest) => {\n    if (!to) throw new Error(\"Missing to address\");\n    if (!gasLimit) throw new Error(\"Missing gasLimit\");\n    if (!data) throw new Error(\"Missing data\");\n\n    const isEIP1559 = !!((maxFeePerGas || maxPriorityFeePerGas) && !gasPrice);\n    if (isEIP1559 && !maxFeePerGas) throw new Error(\"Missing maxFeePerGas\");\n    if (isEIP1559 && !maxPriorityFeePerGas) throw new Error(\"Missing maxFeePerGas\");\n    if (!(isEIP1559 || gasPrice)) throw new Error(\"Missing gasPrice\");\n\n    const { toHexString } = await import(\"@swapkit/toolbox-evm\");\n\n    const nonceValue = nonce\n      ? BigInt(nonce)\n      : BigInt(await this.provider.getTransactionCount(await this.getAddress(), \"pending\"));\n\n    const input = {\n      gas: toHexString(BigInt(gasLimit)),\n      addressNList: [2147483692, 2147483708, 2147483648, 0, 0],\n      from: this.address,\n      chainId: toHexString(BigInt(ChainToChainId[this.chain])),\n      to: to.toString(),\n      value: toHexString(BigInt(value || 0)),\n      nonce: toHexString(nonceValue),\n      data,\n      ...(isEIP1559 && {\n        maxFeePerGas: toHexString(BigInt(maxFeePerGas?.toString() || \"0\")),\n        maxPriorityFeePerGas: toHexString(BigInt(maxPriorityFeePerGas?.toString() || \"0\")),\n      }),\n      ...(!isEIP1559 && {\n        // Fixed syntax error and structure here\n        gasPrice: toHexString(BigInt(gasPrice?.toString() || \"0\")),\n      }),\n    };\n    const responseSign = await this.sdk.eth.ethSignTransaction(input);\n    return responseSign.serialized;\n  };\n\n  sendTransaction = async (tx: TransactionRequest): Promise<Todo> => {\n    if (!this.provider) throw new Error(\"No provider set\");\n\n    const signedTxHex = await this.signTransaction(tx);\n\n    return await this.provider.broadcastTransaction(signedTxHex);\n  };\n\n  connect = (provider: Provider) =>\n    new KeepKeySigner({\n      sdk: this.sdk,\n      chain: this.chain,\n      derivationPath: this.derivationPath,\n      provider,\n    });\n}\n",
    "import type { KeepKeySdk } from \"@keepkey/keepkey-sdk\";\nimport {\n  type AssetValue,\n  Chain,\n  ChainId,\n  DerivationPath,\n  type DerivationPathArray,\n  RPCUrl,\n  derivationPathToString,\n} from \"@swapkit/helpers\";\nimport type { DepositParam, ThorchainToolboxType, TransferParams } from \"@swapkit/toolbox-cosmos\";\n\nimport { bip32ToAddressNList } from \"../helpers/coins.js\";\n\ntype SignTransactionParams = {\n  assetValue: AssetValue;\n  recipient?: string;\n  from: string;\n  memo: string | undefined;\n};\n\nexport const mayachainWalletMethods = async ({\n  sdk,\n  derivationPath,\n}: {\n  sdk: KeepKeySdk;\n  derivationPath?: DerivationPathArray;\n}): Promise<ThorchainToolboxType & { address: string }> => {\n  const { createStargateClient, getToolboxByChain } = await import(\"@swapkit/toolbox-cosmos\");\n\n  const toolbox = getToolboxByChain(Chain.Maya)();\n  const derivationPathString = derivationPath\n    ? derivationPathToString(derivationPath)\n    : `${DerivationPath.MAYA}/0`;\n\n  const { address: fromAddress } = (await sdk.address.mayachainGetAddress({\n    address_n: bip32ToAddressNList(derivationPathString),\n  })) as { address: string };\n\n  const signTransaction = async ({ assetValue, recipient, from, memo }: SignTransactionParams) => {\n    const { makeSignDoc } = await import(\"@cosmjs/amino\");\n    const { getDenomWithChain } = await import(\"@swapkit/toolbox-cosmos\");\n\n    const account = await toolbox.getAccount(from);\n    if (!account) throw new Error(\"Account not found\");\n    const { accountNumber, sequence = 0 } = account;\n    const amount = assetValue.getBaseValue(\"string\");\n\n    const isTransfer = recipient && recipient !== \"\";\n\n    // TODO check if we can move to toolbox created msg\n    const msg = isTransfer\n      ? {\n          type: \"mayachain/MsgSend\",\n          value: {\n            amount: [{ amount, denom: assetValue.symbol.toLowerCase() }],\n            from_address: from,\n            to_address: recipient,\n          },\n        }\n      : {\n          type: \"mayachain/MsgDeposit\",\n          value: {\n            coins: [{ amount, asset: getDenomWithChain(assetValue) }],\n            memo,\n            signer: from,\n          },\n        };\n\n    const signDoc = makeSignDoc(\n      [msg],\n      { gas: \"500000000\", amount: [] },\n      ChainId.Maya,\n      memo,\n      accountNumber?.toString(),\n      sequence,\n    );\n\n    const signedTx = isTransfer\n      ? await sdk.mayachain.mayachainSignAminoTransfer({\n          // TODO can we ignore this ?\n          // @ts-expect-error readonly cant be assigned to writable\n          signDoc,\n          signerAddress: from,\n        })\n      : await sdk.mayachain.mayachainSignAminoDeposit({\n          // @ts-expect-error\n          signDoc,\n          signerAddress: from,\n        });\n    const decodedBytes = atob(signedTx.serialized);\n    return new Uint8Array(decodedBytes.length).map((_, i) => decodedBytes.charCodeAt(i));\n  };\n\n  const transfer = async ({ assetValue, recipient, memo }: TransferParams) => {\n    const stargateClient = await createStargateClient(RPCUrl.Maya);\n    const signedTransaction = await signTransaction({\n      assetValue,\n      recipient,\n      memo,\n      from: fromAddress,\n    });\n    const { transactionHash } = await stargateClient.broadcastTx(signedTransaction);\n\n    return transactionHash;\n  };\n\n  const deposit = async ({ assetValue, memo }: DepositParam) => {\n    const stargateClient = await createStargateClient(RPCUrl.THORChain);\n    const signedTransaction = await signTransaction({\n      assetValue,\n      memo,\n      from: fromAddress,\n    });\n    const { transactionHash } = await stargateClient.broadcastTx(signedTransaction);\n\n    return transactionHash;\n  };\n\n  return { ...toolbox, transfer, deposit, address: fromAddress };\n};\n",
    "import type {\n  KeepKeySdk,\n  TypesThorchainSignDocDeposit,\n  TypesThorchainSignDocTransfer,\n} from \"@keepkey/keepkey-sdk\";\nimport {\n  type AssetValue,\n  Chain,\n  ChainId,\n  DerivationPath,\n  type DerivationPathArray,\n  RPCUrl,\n  derivationPathToString,\n} from \"@swapkit/helpers\";\nimport type { DepositParam, ThorchainToolboxType, TransferParams } from \"@swapkit/toolbox-cosmos\";\n\nimport { bip32ToAddressNList } from \"../helpers/coins.js\";\n\ntype SignTransactionParams = {\n  assetValue: AssetValue;\n  recipient?: string;\n  from: string;\n  memo: string | undefined;\n};\n\nexport const thorchainWalletMethods = async ({\n  sdk,\n  derivationPath,\n}: {\n  sdk: KeepKeySdk;\n  derivationPath?: DerivationPathArray;\n}): Promise<ThorchainToolboxType & { address: string }> => {\n  const { makeSignDoc } = await import(\"@cosmjs/amino\");\n  const { buildAminoMsg, getDefaultChainFee, createStargateClient, ThorchainToolbox } =\n    await import(\"@swapkit/toolbox-cosmos\");\n\n  const toolbox = ThorchainToolbox({ stagenet: false });\n  const derivationPathString = derivationPath\n    ? derivationPathToString(derivationPath)\n    : `${DerivationPath.THOR}/0`;\n\n  const { address: fromAddress } = (await sdk.address.thorchainGetAddress({\n    address_n: bip32ToAddressNList(derivationPathString),\n  })) as { address: string };\n\n  const signTransaction = async ({ assetValue, recipient, from, memo }: SignTransactionParams) => {\n    const account = await toolbox.getAccount(from);\n    if (!account) throw new Error(\"Account not found\");\n    const { accountNumber, sequence = 0 } = account;\n\n    const isTransfer = recipient && recipient !== \"\";\n\n    const msg = buildAminoMsg({ chain: Chain.THORChain, from, recipient, assetValue, memo });\n\n    const signDoc = makeSignDoc(\n      [msg],\n      getDefaultChainFee(Chain.THORChain),\n      ChainId.THORChain,\n      memo,\n      accountNumber?.toString(),\n      sequence,\n    );\n\n    const signedTx = isTransfer\n      ? await sdk.thorchain.thorchainSignAminoTransfer({\n          signDoc: signDoc as TypesThorchainSignDocTransfer,\n          signerAddress: from,\n        })\n      : await sdk.thorchain.thorchainSignAminoDeposit({\n          signDoc: signDoc as TypesThorchainSignDocDeposit,\n          signerAddress: from,\n        });\n    const decodedBytes = atob(signedTx.serialized);\n    return new Uint8Array(decodedBytes.length).map((_, i) => decodedBytes.charCodeAt(i));\n  };\n\n  const transfer = async ({ assetValue, recipient, memo }: TransferParams) => {\n    const stargateClient = await createStargateClient(RPCUrl.THORChain);\n    const signedTransaction = await signTransaction({\n      assetValue,\n      recipient,\n      memo,\n      from: fromAddress,\n    });\n    const { transactionHash } = await stargateClient.broadcastTx(signedTransaction);\n\n    return transactionHash;\n  };\n\n  const deposit = async ({ assetValue, memo }: DepositParam) => {\n    const stargateClient = await createStargateClient(RPCUrl.THORChain);\n    const signedTransaction = await signTransaction({\n      assetValue,\n      memo,\n      from: fromAddress,\n    });\n    const { transactionHash } = await stargateClient.broadcastTx(signedTransaction);\n\n    return transactionHash;\n  };\n\n  // const signMessage = async (message: string) => {\n  //   const stargateClient = await createStargateClient(RPCUrl.THORChain);\n  //   // return signedTx;\n  // };\n\n  return { ...toolbox, transfer, deposit, address: fromAddress };\n};\n",
    "import {\n  Chain,\n  DerivationPath,\n  type DerivationPathArray,\n  FeeOption,\n  type UTXOChain,\n  derivationPathToString,\n} from \"@swapkit/helpers\";\nimport type {\n  BCHToolbox,\n  BaseUTXOToolbox,\n  Psbt,\n  UTXOToolbox,\n  UTXOTransferParams,\n} from \"@swapkit/toolbox-utxo\";\n\nimport { ChainToKeepKeyName, bip32ToAddressNList } from \"../helpers/coins.ts\";\n\ntype KKUtxoWalletParams = {\n  sdk: Todo;\n  chain: UTXOChain;\n  derivationPath?: DerivationPathArray;\n  apiKey?: string;\n  apiClient?: ReturnType<typeof BaseUTXOToolbox>[\"apiClient\"];\n};\n\ninterface psbtTxOutput {\n  address: string;\n  script: Buffer;\n  value: number;\n  change?: boolean; // Optional, assuming it indicates if the output is a change\n}\ninterface ExtendedPsbt extends Psbt {\n  txOutputs: psbtTxOutput[];\n}\ninterface KeepKeyInputObject {\n  addressNList: number[];\n  scriptType: string;\n  amount: string;\n  vout: number;\n  txid: string;\n  hex: string;\n}\n\nexport const utxoWalletMethods = async ({\n  sdk,\n  chain,\n  derivationPath,\n  apiKey,\n  apiClient,\n}: KKUtxoWalletParams): Promise<\n  UTXOToolbox & {\n    address: string;\n    signTransaction: (\n      psbt: ExtendedPsbt,\n      inputs: KeepKeyInputObject[],\n      memo?: string,\n    ) => Promise<string>;\n    transfer: (params: UTXOTransferParams) => Promise<string>;\n  }\n> => {\n  if (!(apiKey || apiClient)) throw new Error(\"UTXO API key not found\");\n  const { getToolboxByChain } = await import(\"@swapkit/toolbox-utxo\");\n\n  const toolbox = getToolboxByChain(chain)({ apiClient, apiKey });\n  const scriptType = [Chain.Bitcoin, Chain.Litecoin].includes(chain) ? \"p2wpkh\" : \"p2pkh\";\n\n  const derivationPathString = derivationPath\n    ? derivationPathToString(derivationPath)\n    : `${DerivationPath[chain]}/0`;\n\n  const addressInfo = {\n    coin: ChainToKeepKeyName[chain],\n    script_type: scriptType,\n    address_n: bip32ToAddressNList(derivationPathString),\n  };\n\n  const { address: walletAddress } = await sdk.address.utxoGetAddress(addressInfo);\n\n  const signTransaction = async (psbt: Psbt, inputs: KeepKeyInputObject[], memo = \"\") => {\n    const outputs = psbt.txOutputs\n      .map((output) => {\n        const { value, address, change } = output as psbtTxOutput;\n\n        const outputAddress =\n          chain === Chain.BitcoinCash\n            ? (toolbox as ReturnType<typeof BCHToolbox>).stripToCashAddress(address)\n            : address;\n\n        if (change || address === walletAddress) {\n          return {\n            addressNList: addressInfo.address_n,\n            isChange: true,\n            addressType: \"change\",\n            amount: value,\n            scriptType,\n          };\n        }\n        if (outputAddress) {\n          return { address: outputAddress, amount: value, addressType: \"spend\" };\n        }\n\n        return null;\n      })\n      .filter(Boolean);\n\n    const removeNullAndEmptyObjectsFromArray = (arr: Todo[]) => {\n      return arr.filter(\n        (item) => item !== null && typeof item === \"object\" && Object.keys(item).length !== 0,\n      );\n    };\n\n    const responseSign = await sdk.utxo.utxoSignTransaction({\n      coin: ChainToKeepKeyName[chain],\n      inputs,\n      outputs: removeNullAndEmptyObjectsFromArray(outputs),\n      version: 1,\n      locktime: 0,\n      opReturnData: memo,\n    });\n    return responseSign.serializedTx;\n  };\n\n  const transfer = async ({\n    from,\n    recipient,\n    feeOptionKey,\n    feeRate,\n    memo,\n    ...rest\n  }: UTXOTransferParams) => {\n    if (!from) throw new Error(\"From address must be provided\");\n    if (!recipient) throw new Error(\"Recipient address must be provided\");\n\n    const { psbt, inputs: rawInputs } = await toolbox.buildTx({\n      ...rest,\n      memo,\n      feeOptionKey,\n      recipient,\n      feeRate: feeRate || (await toolbox.getFeeRates())[feeOptionKey || FeeOption.Fast],\n      sender: from,\n      fetchTxHex: chain,\n    });\n\n    const inputs = rawInputs.map(({ value, index, hash, txHex }) => ({\n      //@TODO don't hardcode master, lookup on blockbook what input this is for and what path that address is!\n      addressNList: addressInfo.address_n,\n      scriptType,\n      amount: value.toString(),\n      vout: index,\n      txid: hash,\n      hex: txHex || \"\",\n    }));\n\n    const txHex = await signTransaction(psbt, inputs, memo);\n    return toolbox.broadcastTx(txHex);\n  };\n\n  return { ...toolbox, signTransaction, transfer, address: walletAddress };\n};\n"
  ],
  "mappings": "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",
  "debugId": "785A1C27F24A9C2E64756E2164756E21",
  "names": []
}
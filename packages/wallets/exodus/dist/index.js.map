{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": [
    "import type { Wallet } from \"@passkeys/core\";\nimport {\n  Chain,\n  ChainToHexChainId,\n  type ConnectWalletParams,\n  type EVMChain,\n  WalletOption,\n  addEVMWalletNetwork,\n  ensureEVMApiKeys,\n  prepareNetworkSwitch,\n  setRequestClientConfig,\n} from \"@swapkit/helpers\";\nimport {\n  type AVAXToolbox,\n  BrowserProvider,\n  type Eip1193Provider,\n  getProvider,\n  getToolboxByChain,\n} from \"@swapkit/toolbox-evm\";\nimport { BTCToolbox, Psbt, type UTXOTransferParams } from \"@swapkit/toolbox-utxo\";\nimport {\n  AddressPurpose,\n  BitcoinNetworkType,\n  type BitcoinProvider,\n  type GetAddressOptions,\n  type GetAddressResponse,\n  type SignTransactionOptions,\n  getAddress,\n  signTransaction as satsSignTransaction,\n} from \"sats-connect\";\n\nexport const getWalletMethods = async ({\n  ethereumWindowProvider,\n  walletProvider,\n  chain,\n  ethplorerApiKey,\n  covalentApiKey,\n  blockchairApiKey,\n  rpcUrl,\n  api,\n}: {\n  ethereumWindowProvider: Eip1193Provider | undefined;\n  walletProvider: BrowserProvider | BitcoinProvider;\n  chain: Chain;\n  covalentApiKey?: string;\n  ethplorerApiKey?: string;\n  blockchairApiKey?: string;\n  rpcUrl?: string;\n  api?: Todo;\n}) => {\n  switch (chain) {\n    case Chain.Bitcoin: {\n      const toolbox = BTCToolbox({ rpcUrl, apiKey: blockchairApiKey, apiClient: api });\n\n      let address = \"\";\n\n      const getProvider: () => Promise<BitcoinProvider | undefined> = () =>\n        new Promise((res) => res(walletProvider as BitcoinProvider));\n\n      const getAddressOptions: GetAddressOptions = {\n        getProvider,\n        payload: {\n          purposes: [AddressPurpose.Payment],\n          message: \"Address for receiving and sending payments\",\n          network: { type: BitcoinNetworkType.Mainnet },\n        },\n        onFinish: (response: GetAddressResponse) => {\n          if (!response.addresses[0]) throw Error(\"No address found\");\n          address = response.addresses[0].address;\n        },\n        onCancel: () => {\n          throw Error(\"Request canceled\");\n        },\n      };\n\n      await getAddress(getAddressOptions);\n\n      async function signTransaction(psbt: Psbt) {\n        let signedPsbt: Psbt | undefined;\n        const signPsbtOptions: SignTransactionOptions = {\n          getProvider,\n          payload: {\n            message: \"Sign transaction\",\n            network: {\n              type: BitcoinNetworkType.Mainnet,\n            },\n            psbtBase64: psbt.toBase64(),\n            broadcast: false,\n            inputsToSign: [\n              {\n                address: address,\n                signingIndexes: psbt.txInputs.map((input) => input.index),\n              },\n            ],\n          },\n          onFinish: (response) => {\n            signedPsbt = Psbt.fromBase64(response.psbtBase64);\n          },\n          onCancel: () => {\n            throw Error(\"Signature canceled\");\n          },\n        };\n\n        await satsSignTransaction(signPsbtOptions);\n        return signedPsbt;\n      }\n\n      const transfer = (transferParams: UTXOTransferParams) => {\n        return toolbox.transfer({\n          ...transferParams,\n          signTransaction,\n        });\n      };\n\n      return { ...toolbox, transfer, address };\n    }\n    case Chain.Ethereum:\n    case Chain.Arbitrum:\n    case Chain.Avalanche:\n    case Chain.BinanceSmartChain:\n    case Chain.Optimism:\n    case Chain.Polygon: {\n      if (!ethereumWindowProvider) throw new Error(\"Requested web3 wallet is not installed\");\n\n      const keys = ensureEVMApiKeys({ chain, covalentApiKey, ethplorerApiKey });\n      const provider = getProvider(chain);\n      const browserProvider = walletProvider as BrowserProvider;\n\n      await browserProvider.send(\"eth_requestAccounts\", []);\n\n      const signer = await browserProvider.getSigner();\n      const address = await signer.getAddress();\n      const toolbox = getToolboxByChain(chain)({ ...keys, provider, signer });\n\n      try {\n        chain !== Chain.Ethereum &&\n          (await addEVMWalletNetwork(\n            browserProvider,\n            (toolbox as ReturnType<typeof AVAXToolbox>).getNetworkParams(),\n          ));\n      } catch (_error) {\n        throw new Error(`Failed to add/switch ${chain} network: ${chain}`);\n      }\n\n      return {\n        address,\n        ...prepareNetworkSwitch<typeof toolbox>({\n          toolbox,\n          chainId: ChainToHexChainId[chain],\n          provider: browserProvider,\n        }),\n      };\n    }\n    default:\n      throw new Error(`Unsupported chain: ${chain}`);\n  }\n};\n\nfunction connectExodusWallet({\n  addChain,\n  config: { covalentApiKey, ethplorerApiKey, thorswapApiKey },\n}: ConnectWalletParams) {\n  return async function connectExodusWallet(chains: (EVMChain | Chain.Bitcoin)[], wallet: Wallet) {\n    if (!wallet) throw new Error(\"Missing Exodus Wallet instance\");\n    setRequestClientConfig({ apiKey: thorswapApiKey });\n\n    const { providers } = wallet;\n\n    const promises = chains.map(async (chain) => {\n      const walletProvider =\n        chain === Chain.Bitcoin\n          ? providers.bitcoin\n          : new BrowserProvider(providers.ethereum, \"any\");\n\n      const { address, ...walletMethods } = await getWalletMethods({\n        chain,\n        ethplorerApiKey,\n        covalentApiKey,\n        ethereumWindowProvider: providers.ethereum,\n        walletProvider,\n      });\n\n      const getBalance = async (potentialScamFilter = true) =>\n        walletMethods.getBalance(address, potentialScamFilter);\n\n      addChain({\n        ...walletMethods,\n        chain,\n        address,\n        getBalance,\n        balance: [],\n        walletType: WalletOption.EXODUS,\n      });\n      return;\n    });\n\n    await Promise.all(promises);\n\n    return true;\n  };\n}\n\nexport const exodusWallet = { connectExodusWallet } as const;\n\nexport * from \"@passkeys/react\";\nexport * from \"@passkeys/core\";\n"
  ],
  "mappings": "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",
  "debugId": "E4AB47AB341A198764756E2164756E21",
  "names": []
}
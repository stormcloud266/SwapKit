{
  "version": 3,
  "sources": ["../src/evmSigner.ts", "../src/index.ts"],
  "sourcesContent": [
    "import {\n  type Chain,\n  ChainToChainId,\n  type DerivationPathArray,\n  SwapKitError,\n  SwapKitNumber,\n  WalletOption,\n  derivationPathToString,\n} from \"@swapkit/helpers\";\nimport type { JsonRpcProvider, Provider, TransactionRequest } from \"@swapkit/toolbox-evm\";\n\ntype TrezorEVMSignerParams = {\n  chain: Chain;\n  derivationPath: DerivationPathArray;\n  provider: Provider | JsonRpcProvider;\n};\n\nexport async function getEVMSigner({ chain, derivationPath, provider }: TrezorEVMSignerParams) {\n  const { AbstractSigner } = await import(\"@swapkit/toolbox-evm\");\n\n  class TrezorSigner extends AbstractSigner {\n    address: string;\n    chain: Chain;\n    derivationPath: DerivationPathArray;\n    readonly provider: Provider | JsonRpcProvider;\n\n    constructor({ chain, derivationPath, provider }: TrezorEVMSignerParams) {\n      super(provider);\n\n      this.address = \"\";\n      this.chain = chain;\n      this.derivationPath = derivationPath;\n      this.provider = provider;\n    }\n\n    getAddress = async () => {\n      if (!this.address) {\n        const { default: TrezorConnect } = await import(\"@trezor/connect-web\");\n\n        const result = await TrezorConnect.ethereumGetAddress({\n          path: derivationPathToString(this.derivationPath),\n          showOnTrezor: true,\n        });\n\n        if (!result.success) {\n          throw new SwapKitError({\n            errorKey: \"wallet_trezor_failed_to_get_address\",\n            info: { ...result, chain: this.chain, derivationPath: this.derivationPath },\n          });\n        }\n\n        this.address = result.payload.address;\n      }\n\n      return this.address;\n    };\n\n    signMessage = async (message: string) => {\n      const { default: TrezorConnect } = await import(\"@trezor/connect-web\");\n\n      const result = await TrezorConnect.ethereumSignMessage({\n        path: derivationPathToString(this.derivationPath),\n        message,\n      });\n\n      if (!result.success) {\n        throw new SwapKitError({\n          errorKey: \"wallet_trezor_failed_to_sign_transaction\",\n          info: { ...result, message, chain: this.chain, derivationPath: this.derivationPath },\n        });\n      }\n\n      return result.payload.signature;\n    };\n\n    signTypedData(): Promise<string> {\n      throw new Error(\"Not implemented\");\n    }\n\n    signTransaction = async ({\n      to,\n      gasLimit,\n      value,\n      data,\n      nonce,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      gasPrice,\n      // biome-ignore lint/complexity/noExcessiveCognitiveComplexity: Todo: refactor\n    }: TransactionRequest) => {\n      if (!to) throw new SwapKitError({ errorKey: \"wallet_missing_params\", info: { to } });\n      if (!gasLimit)\n        throw new SwapKitError({ errorKey: \"wallet_missing_params\", info: { gasLimit } });\n\n      const isEIP1559 = maxFeePerGas && maxPriorityFeePerGas;\n\n      if (isEIP1559 && !maxFeePerGas) {\n        throw new SwapKitError({ errorKey: \"wallet_missing_params\", info: { maxFeePerGas } });\n      }\n      if (isEIP1559 && !maxPriorityFeePerGas) {\n        throw new SwapKitError({\n          errorKey: \"wallet_missing_params\",\n          info: { maxPriorityFeePerGas },\n        });\n      }\n      if (!(isEIP1559 || gasPrice)) {\n        throw new SwapKitError({ errorKey: \"wallet_missing_params\", info: { gasPrice } });\n      }\n\n      const { default: TrezorConnect } = await import(\"@trezor/connect-web\");\n      const { Transaction, toHexString } = await import(\"@swapkit/toolbox-evm\");\n\n      const additionalFields = isEIP1559\n        ? {\n            maxFeePerGas: toHexString(BigInt(maxFeePerGas?.toString() || 0)),\n            maxPriorityFeePerGas: toHexString(BigInt(maxPriorityFeePerGas?.toString() || 0)),\n          }\n        : (gasPrice && { gasPrice: toHexString(BigInt(gasPrice?.toString() || 0)) }) || {\n            gasPrice: \"0x0\",\n          };\n\n      const formattedTx = {\n        chainId: Number.parseInt(ChainToChainId[this.chain]),\n        to: to.toString(),\n        value: toHexString(BigInt(value?.toString() || 0)),\n        gasLimit: toHexString(BigInt(gasLimit?.toString() || 0)),\n        nonce: (\n          nonce?.toString() ||\n          (await this.provider.getTransactionCount(await this.getAddress(), \"pending\"))\n        ).toString(),\n        data: data?.toString() || \"0x\",\n        ...additionalFields,\n      };\n\n      const { success, payload } = await TrezorConnect.ethereumSignTransaction({\n        path: derivationPathToString(this.derivationPath),\n        transaction: formattedTx,\n      });\n\n      if (!success) {\n        throw new SwapKitError({\n          errorKey: \"wallet_trezor_failed_to_sign_transaction\",\n          info: { ...payload, chain: this.chain, derivationPath: this.derivationPath },\n        });\n      }\n\n      const { r, s, v } = payload;\n\n      const hash = Transaction.from({\n        ...formattedTx,\n        nonce: Number.parseInt(formattedTx.nonce),\n        type: isEIP1559 ? 2 : 0,\n        signature: { r, s, v: new SwapKitNumber(v).getBaseValue(\"number\") },\n      }).serialized;\n\n      if (!hash) {\n        throw new SwapKitError({\n          errorKey: \"wallet_trezor_failed_to_sign_transaction\",\n          info: { chain: this.chain, derivationPath: this.derivationPath },\n        });\n      }\n\n      return hash;\n    };\n\n    connect = (provider: Provider | null) => {\n      if (!provider) {\n        throw new SwapKitError({\n          errorKey: \"wallet_provider_not_found\",\n          info: {\n            wallet: WalletOption.TREZOR,\n            chain: this.chain,\n            derivationPath: this.derivationPath,\n          },\n        });\n      }\n\n      return new TrezorSigner({\n        chain: this.chain,\n        derivationPath: this.derivationPath,\n        provider,\n      });\n    };\n  }\n\n  return new TrezorSigner({ chain, derivationPath, provider });\n}\n",
    "import {\n  Chain,\n  type ConnectWalletParams,\n  type DerivationPathArray,\n  FeeOption,\n  SwapKitError,\n  WalletOption,\n  derivationPathToString,\n  ensureEVMApiKeys,\n  setRequestClientConfig,\n} from \"@swapkit/helpers\";\nimport type { Psbt, UTXOTransferParams, UTXOType } from \"@swapkit/toolbox-utxo\";\n\nexport const TREZOR_SUPPORTED_CHAINS = [\n  Chain.Arbitrum,\n  Chain.Avalanche,\n  Chain.BinanceSmartChain,\n  Chain.Bitcoin,\n  Chain.BitcoinCash,\n  Chain.Dash,\n  Chain.Dogecoin,\n  Chain.Ethereum,\n  Chain.Litecoin,\n  Chain.Optimism,\n  Chain.Polygon,\n  Chain.Sepolia,\n] as const;\n\ntype TrezorOptions = {\n  ethplorerApiKey?: string;\n  blockchairApiKey?: string;\n  covalentApiKey?: string;\n  trezorManifest?: { appUrl: string; email: string };\n};\n\ntype Params = TrezorOptions & {\n  // TODO improve api typing\n  api?: Todo;\n  chain: Chain;\n  derivationPath: DerivationPathArray;\n  rpcUrl?: string;\n};\n\nfunction getScriptType(derivationPath: DerivationPathArray) {\n  switch (derivationPath[0]) {\n    case 84:\n      return { input: \"SPENDWITNESS\", output: \"PAYTOWITNESS\" } as const;\n    case 49:\n      return { input: \"SPENDP2SHWITNESS\", output: \"PAYTOP2SHWITNESS\" } as const;\n    case 44:\n      return { input: \"SPENDADDRESS\", output: \"PAYTOADDRESS\" } as const;\n    default:\n      return null;\n  }\n}\n\nasync function getToolbox({\n  api,\n  rpcUrl,\n  chain,\n  derivationPath,\n  blockchairApiKey,\n  ethplorerApiKey,\n  covalentApiKey,\n}: Params) {\n  switch (chain) {\n    case Chain.BinanceSmartChain:\n    case Chain.Avalanche:\n    case Chain.Arbitrum:\n    case Chain.Optimism:\n    case Chain.Polygon:\n    case Chain.Sepolia:\n    case Chain.Ethereum: {\n      const { getProvider, getToolboxByChain } = await import(\"@swapkit/toolbox-evm\");\n      const { getEVMSigner } = await import(\"./evmSigner.ts\");\n\n      const keys = ensureEVMApiKeys({ chain, ethplorerApiKey, covalentApiKey });\n      const provider = getProvider(chain, rpcUrl);\n      const toolbox = getToolboxByChain(chain);\n\n      const signer = await getEVMSigner({ chain, derivationPath, provider });\n      const address = await signer.getAddress();\n\n      return { address, walletMethods: toolbox({ ...keys, api, provider, signer }) };\n    }\n\n    case Chain.Bitcoin:\n    case Chain.BitcoinCash:\n    case Chain.Dash:\n    case Chain.Dogecoin:\n    case Chain.Litecoin: {\n      const { toCashAddress, getToolboxByChain, BCHToolbox } = await import(\n        \"@swapkit/toolbox-utxo\"\n      );\n\n      if (!(blockchairApiKey || api)) {\n        throw new SwapKitError({\n          errorKey: \"wallet_missing_api_key\",\n          info: { missingKey: \"blockchairApiKey\" },\n        });\n      }\n\n      const scriptType = getScriptType(derivationPath);\n\n      if (!scriptType) {\n        throw new SwapKitError({\n          errorKey: \"wallet_trezor_derivation_path_not_supported\",\n          info: { derivationPath },\n        });\n      }\n\n      const coin = chain.toLowerCase();\n      const params = { apiClient: api, apiKey: blockchairApiKey, rpcUrl };\n      const toolbox = getToolboxByChain(chain)(params);\n\n      const getAddress = async (path: DerivationPathArray = derivationPath) => {\n        const { default: TrezorConnect } = await import(\"@trezor/connect-web\");\n        const { success, payload } = await TrezorConnect.getAddress({\n          path: derivationPathToString(path),\n          coin,\n        });\n\n        if (!success) {\n          throw new SwapKitError({\n            errorKey: \"wallet_trezor_failed_to_get_address\",\n            info: {\n              chain,\n              error: (payload as { error: string; code?: string }).error || \"Unknown error\",\n            },\n          });\n        }\n\n        return chain === Chain.BitcoinCash\n          ? (toolbox as ReturnType<typeof BCHToolbox>).stripPrefix(payload.address)\n          : payload.address;\n      };\n\n      const address = await getAddress();\n\n      const signTransaction = async (psbt: Psbt, inputs: UTXOType[], memo = \"\") => {\n        const { default: TrezorConnect } = await import(\"@trezor/connect-web\");\n        const address_n = derivationPath.map((pathElement, index) =>\n          index < 3 ? ((pathElement as number) | 0x80000000) >>> 0 : (pathElement as number),\n        );\n\n        const result = await TrezorConnect.signTransaction({\n          coin,\n          inputs: inputs.map((input) => ({\n            // Hardens the first 3 elements of the derivation path - required by trezor\n            address_n,\n            prev_hash: input.hash,\n            prev_index: input.index,\n            // object needs amount but does not use it for signing\n            amount: input.value,\n            script_type: scriptType.input,\n          })),\n\n          // Lint is not happy with the type of txOutputs\n          // biome-ignore lint/complexity/noExcessiveCognitiveComplexity: TODO: refactor\n          outputs: psbt.txOutputs.map((output: Todo) => {\n            const outputAddress =\n              chain === Chain.BitcoinCash && output.address\n                ? toCashAddress(output.address)\n                : output.address;\n\n            // Strip prefix from BCH address to compare with stripped address from Trezor\n            const isChangeAddress =\n              chain === Chain.BitcoinCash && outputAddress\n                ? (toolbox as ReturnType<typeof BCHToolbox>).stripPrefix(outputAddress) === address\n                : outputAddress === address;\n\n            // OP_RETURN\n            if (!output.address) {\n              return {\n                amount: \"0\",\n                op_return_data: Buffer.from(memo).toString(\"hex\"),\n                script_type: \"PAYTOOPRETURN\",\n              };\n            }\n\n            // Change Address\n            if (isChangeAddress) {\n              return { address_n, amount: output.value, script_type: scriptType.output };\n            }\n\n            // Outgoing UTXO\n            return { address: outputAddress, amount: output.value, script_type: \"PAYTOADDRESS\" };\n          }),\n        });\n\n        if (result.success) {\n          return result.payload.serializedTx;\n        }\n\n        throw new SwapKitError({\n          errorKey: \"wallet_trezor_failed_to_sign_transaction\",\n          info: {\n            chain,\n            error: (result.payload as { error: string; code?: string }).error,\n          },\n        });\n      };\n\n      const transfer = async ({\n        from,\n        recipient,\n        feeOptionKey,\n        feeRate,\n        memo,\n        ...rest\n      }: UTXOTransferParams) => {\n        if (!from)\n          throw new SwapKitError({\n            errorKey: \"wallet_missing_params\",\n            info: { wallet: WalletOption.TREZOR, memo, from },\n          });\n        if (!recipient)\n          throw new SwapKitError({\n            errorKey: \"wallet_missing_params\",\n            info: { wallet: WalletOption.TREZOR, memo, recipient },\n          });\n\n        const { psbt, inputs } = await toolbox.buildTx({\n          ...rest,\n          memo,\n          recipient,\n          feeRate: feeRate || (await toolbox.getFeeRates())[feeOptionKey || FeeOption.Fast],\n          sender: from,\n          fetchTxHex: chain === Chain.Dogecoin,\n        });\n\n        const txHex = await signTransaction(psbt, inputs, memo);\n        return toolbox.broadcastTx(txHex);\n      };\n\n      return {\n        address,\n        walletMethods: {\n          ...toolbox,\n          transfer,\n          signTransaction,\n        },\n      };\n    }\n    default:\n      throw new SwapKitError({\n        errorKey: \"wallet_chain_not_supported\",\n        info: { chain, wallet: WalletOption.TREZOR },\n      });\n  }\n}\n\nfunction connectTrezor({\n  apis,\n  rpcUrls,\n  addChain,\n  config: {\n    covalentApiKey,\n    ethplorerApiKey,\n    blockchairApiKey,\n    trezorManifest = { appUrl: \"\", email: \"\" },\n    thorswapApiKey,\n  },\n}: ConnectWalletParams) {\n  return async function connectTrezor(\n    chains: (typeof TREZOR_SUPPORTED_CHAINS)[number][],\n    derivationPath: DerivationPathArray,\n  ) {\n    const chain = chains[0];\n    if (!chain) return false;\n\n    setRequestClientConfig({ apiKey: thorswapApiKey });\n\n    const { default: TrezorConnect } = await import(\"@trezor/connect-web\");\n    const { success } = await TrezorConnect.getDeviceState();\n\n    if (!success) {\n      TrezorConnect.init({ lazyLoad: true, manifest: trezorManifest });\n    }\n\n    const { address, walletMethods } = await getToolbox({\n      api: apis[chain],\n      rpcUrl: rpcUrls[chain],\n      chain,\n      covalentApiKey,\n      ethplorerApiKey,\n      blockchairApiKey,\n      derivationPath,\n    });\n\n    addChain({\n      chain,\n      ...walletMethods,\n      address,\n      balance: [],\n      walletType: WalletOption.TREZOR,\n    });\n\n    return true;\n  };\n}\n\nexport const trezorWallet = { connectTrezor } as const;\n"
  ],
  "mappings": "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",
  "debugId": "7DA238D9B80D698464756E2164756E21",
  "names": []
}
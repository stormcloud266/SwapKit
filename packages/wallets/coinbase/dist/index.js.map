{
  "version": 3,
  "sources": ["../src/index.ts", "../src/signer.ts"],
  "sourcesContent": [
    "import type { CoinbaseWalletSDKOptions } from \"@coinbase/wallet-sdk/dist/CoinbaseWalletSDK.js\";\nimport { setRequestClientConfig } from \"@swapkit/helpers\";\nimport { Chain, type ConnectWalletParams, WalletOption } from \"@swapkit/helpers\";\n\nimport { getWalletForChain } from \"./signer.js\";\n\nconst COINBASE_SUPPORTED_CHAINS = [\n  Chain.Arbitrum,\n  Chain.Avalanche,\n  Chain.BinanceSmartChain,\n  Chain.Optimism,\n  Chain.Polygon,\n  Chain.Ethereum,\n  Chain.Sepolia,\n] as const;\n\nfunction connectCoinbaseWallet({\n  addChain,\n  config: { thorswapApiKey, covalentApiKey, ethplorerApiKey },\n  coinbaseWalletSettings,\n}: ConnectWalletParams & { coinbaseWalletSettings?: CoinbaseWalletSDKOptions }) {\n  return async function connectCoinbaseWallet(\n    chains: (typeof COINBASE_SUPPORTED_CHAINS)[number][],\n  ) {\n    setRequestClientConfig({ apiKey: thorswapApiKey });\n\n    const promises = chains.map(async (chain) => {\n      const walletMethods = await getWalletForChain({\n        chain,\n        covalentApiKey,\n        ethplorerApiKey,\n        coinbaseWalletSettings,\n      });\n\n      addChain({ ...walletMethods, balance: [], chain, walletType: WalletOption.COINBASE_MOBILE });\n    });\n\n    await Promise.all(promises);\n\n    return true;\n  };\n}\n\nexport const coinbaseWallet = { connectCoinbaseWallet } as const;\n",
    "import { type CoinbaseWalletProvider, CoinbaseWalletSDK } from \"@coinbase/wallet-sdk\";\nimport type { CoinbaseWalletSDKOptions } from \"@coinbase/wallet-sdk/dist/CoinbaseWalletSDK\";\nimport { Chain, ChainToRPC } from \"@swapkit/helpers\";\nimport {\n  AbstractSigner,\n  type Provider,\n  getProvider,\n  type getToolboxByChain,\n} from \"@swapkit/toolbox-evm\";\n\nclass CoinbaseMobileSigner extends AbstractSigner {\n  #coinbaseProvider: CoinbaseWalletProvider;\n\n  constructor(coinbaseProvider: CoinbaseWalletProvider, provider?: Provider) {\n    super(provider);\n    this.#coinbaseProvider = coinbaseProvider;\n  }\n\n  async getAddress() {\n    const accounts = await this.#coinbaseProvider.request<string[]>({\n      method: \"eth_requestAccounts\",\n    });\n\n    if (!accounts[0]) throw new Error(\"No Account found\");\n\n    return accounts[0];\n  }\n\n  async signTransaction() {\n    return await this.#coinbaseProvider.request<string>({\n      method: \"eth_signTransaction\",\n    });\n  }\n\n  async signMessage(message: string | Uint8Array) {\n    return await this.#coinbaseProvider.request<string>({\n      method: \"personal_sign\",\n      params: [message, await this.getAddress()],\n    });\n  }\n\n  signTypedData = () => {\n    throw new Error(\"this method is not implemented\");\n  };\n\n  connect(provider: Provider) {\n    return new CoinbaseMobileSigner(this.#coinbaseProvider, provider);\n  }\n}\n\nexport const getWalletForChain = async ({\n  chain,\n  ethplorerApiKey,\n  covalentApiKey,\n  api,\n  coinbaseWalletSettings = {\n    appName: \"Developer App\",\n  } as CoinbaseWalletSDKOptions,\n}: {\n  chain: Chain;\n  ethplorerApiKey?: string;\n  covalentApiKey?: string;\n  // biome-ignore lint/suspicious/noExplicitAny: <explanation>\n  api?: any;\n  coinbaseWalletSettings?: CoinbaseWalletSDKOptions;\n}): Promise<ReturnType<ReturnType<typeof getToolboxByChain>> & { address: string }> => {\n  switch (chain) {\n    case Chain.Ethereum:\n    case Chain.Sepolia:\n    case Chain.Avalanche:\n    case Chain.Arbitrum:\n    case Chain.Optimism:\n    case Chain.Polygon:\n    case Chain.BinanceSmartChain: {\n      const coinbaseWallet = new CoinbaseWalletSDK(coinbaseWalletSettings);\n\n      const walletProvider = coinbaseWallet.makeWeb3Provider(ChainToRPC[chain]);\n\n      // TODO fix error\n      if (!walletProvider) throw new Error(\"No wallet provider\");\n\n      const { getToolboxByChain } = await import(\"@swapkit/toolbox-evm\");\n\n      const provider = getProvider(chain);\n\n      const signer = new CoinbaseMobileSigner(walletProvider, provider);\n\n      const params = {\n        api,\n        provider,\n        signer,\n      };\n\n      const toolbox = getToolboxByChain(chain)({\n        ...params,\n        covalentApiKey: covalentApiKey as string,\n        ethplorerApiKey: ethplorerApiKey as string,\n      });\n\n      return {\n        address: await signer.getAddress(),\n        ...toolbox,\n      };\n    }\n\n    default:\n      throw new Error(`No wallet for chain ${chain}`);\n  }\n};\n"
  ],
  "mappings": "mSACA,iCAAS,yBACT,gBAAS,kBAAiC,yBCF1C,4BAAsC,6BAEtC,gBAAS,gBAAO,yBAChB,yBACE,iBAEA,6BAIF,MAAM,UAA6B,CAAe,CAChD,GAEA,WAAW,CAAC,EAA0C,EAAqB,CACzE,MAAM,CAAQ,EACd,KAAK,GAAoB,OAGrB,WAAU,EAAG,CACjB,MAAM,EAAW,MAAM,KAAK,GAAkB,QAAkB,CAC9D,OAAQ,qBACV,CAAC,EAED,IAAK,EAAS,GAAI,MAAM,IAAI,MAAM,kBAAkB,EAEpD,OAAO,EAAS,QAGZ,gBAAe,EAAG,CACtB,OAAO,MAAM,KAAK,GAAkB,QAAgB,CAClD,OAAQ,qBACV,CAAC,OAGG,YAAW,CAAC,EAA8B,CAC9C,OAAO,MAAM,KAAK,GAAkB,QAAgB,CAClD,OAAQ,gBACR,OAAQ,CAAC,EAAS,MAAM,KAAK,WAAW,CAAC,CAC3C,CAAC,EAGH,cAAgB,IAAM,CACpB,MAAM,IAAI,MAAM,gCAAgC,GAGlD,OAAO,CAAC,EAAoB,CAC1B,OAAO,IAAI,EAAqB,KAAK,GAAmB,CAAQ,EAEpE,CAEO,IAAM,EAAoB,OAC/B,QACA,kBACA,iBACA,MACA,yBAAyB,CACvB,QAAS,eACX,KAQqF,CACrF,OAAQ,QACD,EAAM,cACN,EAAM,aACN,EAAM,eACN,EAAM,cACN,EAAM,cACN,EAAM,aACN,EAAM,kBAAmB,CAG5B,MAAM,EAFiB,IAAI,EAAkB,CAAsB,EAE7B,iBAAiB,EAAW,EAAM,EAGxE,IAAK,EAAgB,MAAM,IAAI,MAAM,oBAAoB,EAEzD,MAAQ,qBAAsB,KAAa,gCAErC,EAAW,EAAY,CAAK,EAE5B,EAAS,IAAI,EAAqB,EAAgB,CAAQ,EAE1D,EAAS,CACb,MACA,WACA,QACF,EAEM,EAAU,EAAkB,CAAK,EAAE,IACpC,EACH,eAAgB,EAChB,gBAAiB,CACnB,CAAC,EAED,MAAO,CACL,QAAS,MAAM,EAAO,WAAW,KAC9B,CACL,CACF,SAGE,MAAM,IAAI,MAAM,uBAAuB,GAAO,ID1FpD,SAAS,CAAqB,EAC5B,WACA,QAAU,iBAAgB,iBAAgB,mBAC1C,0BAC8E,CAC9E,OAAO,eAAe,CAAqB,CACzC,EACA,CACA,EAAuB,CAAE,OAAQ,CAAe,CAAC,EAEjD,MAAM,EAAW,EAAO,IAAI,MAAO,IAAU,CAC3C,MAAM,EAAgB,MAAM,EAAkB,CAC5C,QACA,iBACA,kBACA,wBACF,CAAC,EAED,EAAS,IAAK,EAAe,QAAS,CAAC,EAAG,QAAO,WAAY,EAAa,eAAgB,CAAC,EAC5F,EAID,OAFA,MAAM,QAAQ,IAAI,CAAQ,EAEnB,IAjCX,IAAM,EAA4B,CAChC,EAAM,SACN,EAAM,UACN,EAAM,kBACN,EAAM,SACN,EAAM,QACN,EAAM,SACN,EAAM,OACR,EA6Ba,EAAiB,CAAE,uBAAsB",
  "debugId": "337D56AF9E92396B64756E2164756E21",
  "names": []
}